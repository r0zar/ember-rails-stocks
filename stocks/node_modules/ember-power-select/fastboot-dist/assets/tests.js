define('dummy/tests/acceptance/all-public-pages-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance', 'ember'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance, _ember) {

  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | All Public Pages');

  (0, _qunit.test)('visit every Docs page in order', function (assert) {
    var expectedPages = 15;
    return keepClickingNext('/docs', '.doc-page-nav-link-next').then(function (urls) {
      assert.equal(urls.length, expectedPages);
    });
  });

  (0, _qunit.test)('visit every Cookbook page in order', function (assert) {
    var expectedPages = 6;
    return keepClickingNext('/cookbook', '.doc-page-nav-link-next').then(function (urls) {
      assert.equal(urls.length, expectedPages);
    });
  });

  (0, _qunit.test)('visit /addons', function (assert) {
    visit('/addons');
    andThen(function () {
      assert.equal('/addons', currentURL());
    });
  });

  function keepClickingNext(initialUrl, nextLinkSelector) {
    var seenURLs = Object.create(null);
    return new _ember['default'].RSVP.Promise(function (resolve) {
      visit(initialUrl);
      andThen(function () {
        visitNextPage();
      });
      function visitNextPage() {
        andThen(function () {
          if (seenURLs[currentURL()]) {
            throw new Error("page visitor detected a loop");
          }
          seenURLs[currentURL()] = true;
          var nextLink = find(nextLinkSelector);
          if (nextLink.length === 0) {
            resolve(Object.keys(seenURLs));
          } else {
            click(nextLinkSelector);
            visitNextPage();
          }
        });
      }
    });
  }
});
define('dummy/tests/acceptance/all-public-pages-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - acceptance/all-public-pages-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/all-public-pages-test.js should pass jshint.');
  });
});
define('dummy/tests/acceptance/helpers-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {

  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | helpers | selectChoose');

  (0, _qunit.test)('selectChoose helper opens the select and selects the option with the given text', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      selectChoose('.select-choose', 'three');
    });

    andThen(function () {
      assert.equal(find('.select-choose .ember-power-select-trigger').text().trim(), 'three', 'The proper value has been selected');
      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');
      assert.equal(find('.select-choose-target').text().trim(), 'You\'ve selected: three');
    });
  });

  (0, _qunit.test)('selectChoose selects the option with the given text on an already opened select', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      click('.select-choose .ember-power-select-trigger');
    });

    andThen(function () {
      selectChoose('.select-choose', 'three');
    });

    andThen(function () {
      assert.equal(find('.select-choose .ember-power-select-trigger').text().trim(), 'three', 'The proper value has been selected');
      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');
      assert.equal(find('.select-choose-target').text().trim(), 'You\'ve selected: three');
    });
  });

  (0, _qunit.test)('the selectChoose helper works with an onopen function that fetches data async on single selects', function (assert) {
    visit('/helpers-testing');
    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      selectChoose('.select-choose-onopen', 'three');
    });
    andThen(function () {
      assert.equal(find('.select-choose-onopen .ember-power-select-trigger').text().trim().split(' ')[0].trim(), 'three', 'The proper value has been selected');
      assert.equal($('.ember-power-select-options').length, 0, 'The select is closed');
      assert.equal(find('.select-choose-target').text().trim(), 'You\'ve selected: three');
    });
  });

  (0, _qunit.test)('the selectChoose helper works with an onopen function that fetches data async on multiple selects', function (assert) {
    visit('/helpers-testing');
    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      selectChoose('.select-choose-onopen-multiple', 'three');
    });
    andThen(function () {
      assert.equal(find('.select-choose-onopen-multiple .ember-power-select-multiple-option').length, 1, 'One options has been selected');
      assert.ok(/three/.test(find('.select-choose-onopen-multiple .ember-power-select-multiple-option:eq(0)').text().trim()), 'The proper value has been selected');
      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');
    });
  });

  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | helpers | selectSearch');

  (0, _qunit.test)('selectSearch helper searches in the given single select if it is already opened', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      click('.select-async .ember-power-select-trigger');
      selectSearch('.select-async', 'three');
    });

    andThen(function () {
      assert.equal(find('.ember-power-select-options').text().trim(), 'three');
    });
  });

  (0, _qunit.test)('selectSearch helper searches in the given single select, opening it if needed', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      selectSearch('.select-async', 'three');
    });

    andThen(function () {
      assert.equal(find('.ember-power-select-options').text().trim(), 'three');
    });
  });

  (0, _qunit.test)('selectSearch helper searches in the given multiple select opened', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      click('.select-multiple .ember-power-select-trigger');
      selectSearch('.select-multiple', 'three');
    });

    andThen(function () {
      assert.equal(find('.ember-power-select-options').text().trim(), 'three');
    });
  });

  (0, _qunit.test)('selectSearch helper searches in the given multiple select closed', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.equal(currentURL(), '/helpers-testing');
      selectSearch('.select-multiple', 'three');
    });

    andThen(function () {
      assert.equal(find('.ember-power-select-options').text().trim(), 'three');
    });
  });

  (0, _qunit.test)('removeMultipleOption removes selected option', function (assert) {
    visit('/helpers-testing');

    selectChoose('.select-choose-onopen-multiple', 'three');
    selectChoose('.select-choose-onopen-multiple', 'four');
    andThen(function () {
      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 2, 'Multiple options selected');
    });

    removeMultipleOption('.select-choose-onopen-multiple', 'three');
    andThen(function () {
      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 1, 'One option removed');
    });

    removeMultipleOption('.select-choose-onopen-multiple', 'four');
    andThen(function () {
      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 0, 'Last option removed');
    });
  });

  (0, _qunit.test)('clearSelected removes selected option', function (assert) {
    visit('/helpers-testing');

    andThen(function () {
      assert.notOk(find('.select-choose-onopen .ember-power-select-clear-btn').text());
    });

    selectChoose('.select-choose-onopen', 'three');
    andThen(function () {
      assert.ok(find('.select-choose-onopen .ember-power-select-clear-btn').text());
      assert.ok(find('.select-choose-onopen .ember-power-select-selected-item').text(), 'three', 'The proper value has been selected');
    });

    clearSelected('.select-choose-onopen', 'three');
    andThen(function () {
      assert.notOk(find('.select-choose-onopen .ember-power-select-clear-btn').text());
    });
  });
});
define('dummy/tests/acceptance/helpers-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - acceptance/helpers-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/helpers-test.js should pass jshint.');
  });
});
define('dummy/tests/app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app.js should pass jshint.');
  });
});
define('dummy/tests/blanket-options', ['exports'], function (exports) {
  /* globals blanket, module */

  var options = {
    modulePrefix: 'ember-power-select',
    filter: '//.*ember-power-select/.*/',
    antifilter: '//.*(tests|template).*/',
    loaderExclusions: [],
    enableCoverage: true,
    cliOptions: {
      reporters: ['json'],
      autostart: true
    }
  };
  if (typeof exports === 'undefined') {
    blanket.options(options);
  } else {
    module.exports = options;
  }
});
define('dummy/tests/blanket-options.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - blanket-options.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'blanket-options.js should pass jshint.');
  });
});
define('dummy/tests/components/animated-options.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/animated-options.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/animated-options.js should pass jshint.');
  });
});
define('dummy/tests/components/code-sample.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/code-sample.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/code-sample.js should pass jshint.');
  });
});
define('dummy/tests/components/navigable-select.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/navigable-select.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/navigable-select.js should pass jshint.');
  });
});
define('dummy/tests/controllers/fastboot-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/fastboot-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/fastboot-test.js should pass jshint.');
  });
});
define('dummy/tests/controllers/helpers-testing.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/helpers-testing.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/helpers-testing.js should pass jshint.');
  });
});
define('dummy/tests/controllers/legacy-demo.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/legacy-demo.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/legacy-demo.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/bootstrap-theme.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/bootstrap-theme.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/bootstrap-theme.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/create-custom-options.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/create-custom-options.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/create-custom-options.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/css-animations.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/css-animations.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/css-animations.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/debounce-searches.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/debounce-searches.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/debounce-searches.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/index.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/index.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/index.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook/navigable-select.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook/navigable-select.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook/navigable-select.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/cookbook.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/cookbook.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/cookbook.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/action-handling.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/action-handling.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/action-handling.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/custom-search-action.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/custom-search-action.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/custom-search-action.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/disable-things.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/disable-things.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/disable-things.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/groups.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/groups.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/groups.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/how-to-use-it.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/how-to-use-it.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/how-to-use-it.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/multiple-selection.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/multiple-selection.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/multiple-selection.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/the-list.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/the-list.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/the-list.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/the-search.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/the-search.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/the-search.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs/the-trigger.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs/the-trigger.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs/the-trigger.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages/docs.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages/docs.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages/docs.js should pass jshint.');
  });
});
define('dummy/tests/controllers/public-pages.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - controllers/public-pages.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'controllers/public-pages.js should pass jshint.');
  });
});
define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = destroyApp;

  function destroyApp(application) {
    _ember['default'].run(application, 'destroy');
  }
});
define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/destroy-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');
  });
});
define('dummy/tests/helpers/ember-basic-dropdown', ['exports'], function (exports) {
  exports.clickTrigger = clickTrigger;
  exports.tapTrigger = tapTrigger;

  function clickTrigger(scope) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var selector = '.ember-basic-dropdown-trigger';
    if (scope) {
      selector = scope + ' ' + selector;
    }
    var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return event[key] = options[key];
    });
    Ember.run(function () {
      return Ember.$(selector)[0].dispatchEvent(event);
    });
  }

  function tapTrigger(scope) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var selector = '.ember-basic-dropdown-trigger';
    if (scope) {
      selector = scope + ' ' + selector;
    }
    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return touchStartEvent[key] = options[key];
    });
    Ember.run(function () {
      return Ember.$(selector)[0].dispatchEvent(touchStartEvent);
    });
    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return touchEndEvent[key] = options[key];
    });
    Ember.run(function () {
      return Ember.$(selector)[0].dispatchEvent(touchEndEvent);
    });
  }
});
define('dummy/tests/helpers/ember-power-select', ['exports', 'ember'], function (exports, _ember) {
  exports.nativeMouseDown = nativeMouseDown;
  exports.nativeMouseUp = nativeMouseUp;
  exports.triggerKeydown = triggerKeydown;
  exports.typeInSearch = typeInSearch;
  exports.clickTrigger = clickTrigger;

  // Helpers for integration tests

  function typeText(selector, text) {
    var $selector = $(selector);
    $selector.val(text);
    var event = document.createEvent("Events");
    event.initEvent('input', true, true);
    $selector[0].dispatchEvent(event);
  }

  function fireNativeMouseEvent(eventType, selectorOrDomElement) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return event[key] = options[key];
    });
    var target = undefined;
    if (typeof selectorOrDomElement === 'string') {
      target = _ember['default'].$(selectorOrDomElement)[0];
    } else {
      target = selectorOrDomElement;
    }
    _ember['default'].run(function () {
      return target.dispatchEvent(event);
    });
  }

  function nativeMouseDown(selectorOrDomElement, options) {
    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);
  }

  function nativeMouseUp(selectorOrDomElement, options) {
    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);
  }

  function triggerKeydown(domElement, k) {
    var oEvent = document.createEvent("Events");
    oEvent.initEvent('keydown', true, true);
    $.extend(oEvent, {
      view: window,
      ctrlKey: false,
      altKey: false,
      shiftKey: false,
      metaKey: false,
      keyCode: k,
      charCode: k
    });
    _ember['default'].run(function () {
      domElement.dispatchEvent(oEvent);
    });
  }

  function typeInSearch(text) {
    _ember['default'].run(function () {
      typeText('.ember-power-select-search input, .ember-power-select-trigger-multiple-input', text);
    });
  }

  function clickTrigger(scope) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var selector = '.ember-power-select-trigger';
    if (scope) {
      selector = scope + ' ' + selector;
    }
    nativeMouseDown(selector, options);
  }

  // Helpers for acceptance tests

  exports['default'] = function () {
    var isEmberOne = _ember['default'].VERSION.match(/1\.13/);

    _ember['default'].Test.registerAsyncHelper('selectChoose', function (app, cssPath, value) {
      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\d+)/)[1];
      // If the dropdown is closed, open it
      if (_ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0) {
        nativeMouseDown(cssPath + ' .ember-power-select-trigger');
        wait();
      }

      // Select the option with the given text
      andThen(function () {
        var potentialTargets = $('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-option:contains("' + value + '")').toArray();
        var target = undefined;
        if (potentialTargets.length > 1) {
          target = potentialTargets.find(function (t) {
            return t.textContent.trim() === value;
          }) || potentialTargets[0];
        } else {
          target = potentialTargets[0];
        }
        nativeMouseUp(target);
      });
    });

    _ember['default'].Test.registerAsyncHelper('selectSearch', function (app, cssPath, value) {
      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\d+)/)[1];
      var isMultipleSelect = _ember['default'].$(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;

      var dropdownIsClosed = _ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0;
      if (dropdownIsClosed) {
        nativeMouseDown(cssPath + ' .ember-power-select-trigger');
        wait();
      }

      if (isMultipleSelect) {
        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);
        if (isEmberOne) {
          triggerEvent(cssPath + ' .ember-power-select-trigger-multiple-input', 'input');
        }
      } else {
        fillIn('.ember-power-select-search input', value);
        if (isEmberOne) {
          triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search input', 'input');
        }
      }
    });

    _ember['default'].Test.registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {
      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn')[0];
      try {
        nativeMouseDown(elem);
      } catch (e) {
        console.warn('css path to remove btn not found');
        throw e;
      }
    });

    _ember['default'].Test.registerAsyncHelper('clearSelected', function (app, cssPath, value) {
      var elem = find(cssPath + ' .ember-power-select-clear-btn')[0];
      try {
        nativeMouseDown(elem);
      } catch (e) {
        console.warn('css path to clear btn not found');
        throw e;
      }
    });
  };
});
define('dummy/tests/helpers/highlight-substr.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/highlight-substr.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/highlight-substr.js should pass jshint.');
  });
});
define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {
  exports['default'] = function (name) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    (0, _qunit.module)(name, {
      beforeEach: function beforeEach() {
        this.application = (0, _dummyTestsHelpersStartApp['default'])();

        if (options.beforeEach) {
          options.beforeEach.apply(this, arguments);
        }
      },

      afterEach: function afterEach() {
        if (options.afterEach) {
          options.afterEach.apply(this, arguments);
        }

        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);
      }
    });
  };
});
define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/module-for-acceptance.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');
  });
});
define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {

  var resolver = _dummyResolver['default'].create();

  resolver.namespace = {
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix
  };

  exports['default'] = resolver;
});
define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/resolver.js should pass jshint.');
  });
});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment', 'dummy/tests/helpers/ember-power-select'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment, _dummyTestsHelpersEmberPowerSelect) {
  exports['default'] = startApp;

  (0, _dummyTestsHelpersEmberPowerSelect['default'])();

  function startApp(attrs) {
    var application = undefined;

    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);
    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    _ember['default'].run(function () {
      application = _dummyApp['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }
});
define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/start-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/constants', ['exports'], function (exports) {
  var numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'];

  exports.numbers = numbers;
  var names = ["María", "Søren Larsen", "João", "Miguel", "Marta", "Lisa"];

  exports.names = names;
  var countries = [{ name: 'United States', code: 'US', population: 321853000 }, { name: 'Spain', code: 'ES', population: 46439864 }, { name: 'Portugal', code: 'PT', population: 10374822 }, { name: 'Russia', code: 'RU', population: 146588880 }, { name: 'Latvia', code: 'LV', population: 1978300 }, { name: 'Brazil', code: 'BR', population: 204921000 }, { name: 'United Kingdom', code: 'GB', population: 64596752 }];

  exports.countries = countries;
  var countriesWithDisabled = [{ name: 'United States', code: 'US', population: 321853000 }, { name: 'Spain', code: 'ES', population: 46439864 }, { name: 'Portugal', code: 'PT', population: 10374822, disabled: true }, { name: 'Russia', code: 'RU', population: 146588880, disabled: true }, { name: 'Latvia', code: 'LV', population: 1978300 }, { name: 'Brazil', code: 'BR', population: 204921000, disabled: true }, { name: 'United Kingdom', code: 'GB', population: 64596752 }];

  exports.countriesWithDisabled = countriesWithDisabled;
  var groupedNumbers = [{ groupName: "Smalls", options: ["one", "two", "three"] }, { groupName: "Mediums", options: ["four", "five", "six"] }, { groupName: "Bigs", options: [{ groupName: "Fairly big", options: ["seven", "eight", "nine"] }, { groupName: "Really big", options: ["ten", "eleven", "twelve"] }, "thirteen"]
  }, "one hundred", "one thousand"];
  exports.groupedNumbers = groupedNumbers;
});
define('dummy/tests/integration/components/constants.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/constants.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/constants.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/a11y-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants', 'dummy/tests/helpers/ember-power-select'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants, _dummyTestsHelpersEmberPowerSelect) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Accesibility)', {
    integration: true
  });

  (0, _emberQunit.test)('Single-select: The top-level options list have `role=listbox` and nested lists have `role=group`', function (assert) {
    assert.expect(2);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $rootLevelOptionsList = $('.ember-power-select-dropdown > .ember-power-select-options');
    assert.equal($rootLevelOptionsList.attr('role'), 'listbox', 'The top-level list has `role=listbox`');
    var $nestedOptionList = $('.ember-power-select-options .ember-power-select-options');
    assert.ok($nestedOptionList.toArray().every(function (l) {
      return l.attributes.role.value === 'group';
    }), 'All the nested lists have `role=group`');
  });

  (0, _emberQunit.test)('Multiple-select: The top-level options list have `role=listbox` and nested lists have `role=group`', function (assert) {
    assert.expect(2);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 37], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $rootLevelOptionsList = $('.ember-power-select-dropdown > .ember-power-select-options');
    assert.equal($rootLevelOptionsList.attr('role'), 'listbox', 'The top-level list has `role=listbox`');
    var $nestedOptionList = $('.ember-power-select-options .ember-power-select-options');
    assert.ok($nestedOptionList.toArray().every(function (l) {
      return l.attributes.role.value === 'group';
    }), 'All the nested lists have `role=group`');
  });

  (0, _emberQunit.test)('Single-select: All options have `role=option`', function (assert) {
    assert.expect(1);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok($('.ember-power-select-option').toArray().every(function (l) {
      return l.attributes.role.value === 'option';
    }), 'All the options have `role=option`');
  });

  (0, _emberQunit.test)('Multiple-select: All options have `role=option`', function (assert) {
    assert.expect(1);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok($('.ember-power-select-option').toArray().every(function (l) {
      return l.attributes.role.value === 'option';
    }), 'All the options have `role=option`');
  });

  (0, _emberQunit.test)('Single-select: The selected option has `aria-selected=true` and the rest `aria-selected=false`', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = "two";
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:contains("two")').attr('aria-selected'), 'true', 'the selected option has aria-selected=true');
    assert.equal($('.ember-power-select-option[aria-selected="false"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-selected=false');
  });

  (0, _emberQunit.test)('Multiple-select: The selected options have `aria-selected=true` and the rest `aria-selected=false`', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = ['two', 'four'];
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:contains("two")').attr('aria-selected'), 'true', 'the first selected option has aria-selected=true');
    assert.equal($('.ember-power-select-option:contains("four")').attr('aria-selected'), 'true', 'the second selected option has aria-selected=true');
    assert.equal($('.ember-power-select-option[aria-selected="false"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 2, 'All other options have aria-selected=false');
  });

  (0, _emberQunit.test)('Single-select: The highlighted option has `aria-current=true` and the rest `aria-current=false`', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:contains("one")').attr('aria-current'), 'true', 'the highlighted option has aria-current=true');
    assert.equal($('.ember-power-select-option[aria-current="false"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-current=false');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option:contains("one")').attr('aria-current'), 'false', 'the first option has now aria-current=false');
    assert.equal($('.ember-power-select-option:contains("two")').attr('aria-current'), 'true', 'the second option has now aria-current=false');
  });

  (0, _emberQunit.test)('Multiple-select: The highlighted option has `aria-current=true` and the rest `aria-current=false`', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:contains("one")').attr('aria-current'), 'true', 'the highlighted option has aria-current=true');
    assert.equal($('.ember-power-select-option[aria-current="false"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-current=false');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option:contains("one")').attr('aria-current'), 'false', 'the first option has now aria-current=false');
    assert.equal($('.ember-power-select-option:contains("two")').attr('aria-current'), 'true', 'the second option has now aria-current=false');
  });

  (0, _emberQunit.test)('Single-select: Options with a disabled field have `aria-disabled=true`', function (assert) {
    assert.expect(1);

    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-disabled=true]').length, 3, 'Three of them are disabled');
  });

  (0, _emberQunit.test)('Multiple-select: Options with a disabled field have `aria-disabled=true`', function (assert) {
    assert.expect(1);

    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 37], [2, 58]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 81], [2, 84]]]]], [], ['loc', [null, [2, 76], [2, 85]]]]], [], ['loc', [null, [2, 68], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-disabled=true]').length, 3, 'Three of them are disabled');
  });

  (0, _emberQunit.test)('Single-select: The trigger has `role=button`, `aria-haspopup=true` and `aria-controls=<id-of-dropdown>`', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-trigger').attr('role'), 'button', 'The trigger has role button');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-haspopup'), 'true', 'aria-haspopup is true');
    assert.ok(/^ember-basic-dropdown-content-ember\d+$/.test(this.$('.ember-power-select-trigger').attr('aria-controls')), 'aria-controls point to the dropdown');
  });

  (0, _emberQunit.test)('Multiple-select: The trigger has `role=button`, `aria-haspopup=true` and `aria-controls=<id-of-dropdown>`', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-trigger').attr('role'), 'button', 'The trigger has role button');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-haspopup'), 'true', 'aria-haspopup is true');
    assert.ok(/^ember-basic-dropdown-content-ember\d+$/.test(this.$('.ember-power-select-trigger').attr('aria-controls')), 'aria-controls point to the dropdown');
  });

  (0, _emberQunit.test)('Single-select: The trigger attributes `aria-expanded` and `aria-pressed` that are true when the dropdown is opened', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'false', 'Not expanded');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'false', 'Not pressed');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'true', 'Not expanded');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'true', 'Not pressed');
  });

  (0, _emberQunit.test)('Multiple-select: The trigger attributes `aria-expanded` and `aria-pressed` that are true when the dropdown is opened', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'false', 'Not expanded');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'false', 'Not pressed');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'true', 'Not expanded');
    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'true', 'Not pressed');
  });

  (0, _emberQunit.test)('Single-select: The listbox has a unique id`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(/^ember-power-select-options-ember\d+$/.test($('.ember-power-select-options').attr('id')), 'The search has a unique id');
  });

  (0, _emberQunit.test)('Multiple-select: The listbox has a unique id`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(/^ember-power-select-options-ember\d+$/.test($('.ember-power-select-options').attr('id')), 'The search has a unique id');
  });

  (0, _emberQunit.test)('Single-select: The searchbox has type `search` and `aria-controls=<id-of-listbox>`', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-search input').attr('type'), 'search', 'The type of the input is `search`');
    assert.ok(/^ember-power-select-options-ember\d+$/.test($('.ember-power-select-search input').attr('aria-controls')), 'The `aria-controls` points to the id of the listbox');
  });

  (0, _emberQunit.test)('Multiple-select: The searchbox has type `search` and `aria-controls=<id-of-listbox>`', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-trigger-multiple-input').attr('type'), 'search', 'The type of the input is `search`');
    assert.ok(/^ember-power-select-options-ember\d+$/.test($('.ember-power-select-trigger-multiple-input').attr('aria-controls')), 'The `aria-controls` points to the id of the listbox');
  });

  (0, _emberQunit.test)('Single-select: The listbox has `aria-controls=<id-of-the-trigger>`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(/^ember-power-select-trigger-ember\d+$/.test($('.ember-power-select-options').attr('aria-controls')), 'The listbox controls the trigger');
  });

  (0, _emberQunit.test)('Multiple-select: The listbox has `aria-controls=<id-of-the-trigger>`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(/^ember-power-select-trigger-ember\d+$/.test($('.ember-power-select-options').attr('aria-controls')), 'The listbox controls the trigger');
  });

  (0, _emberQunit.test)('Multiple-select: The selected elements are <li>s inside an <ul>, and have an item with `role=button` with `aria-label="remove element"`', function (assert) {
    assert.expect(12);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = ['two', 'four', 'six'];
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    this.$('.ember-power-select-multiple-option').toArray().forEach(function (e) {
      assert.equal(e.tagName, 'LI', 'The element is a list item');
      assert.equal(e.parentElement.tagName, 'UL', 'The parent element is a list');
      var closeButton = e.querySelector('.ember-power-select-multiple-remove-btn');
      assert.equal($(closeButton).attr('role'), 'button', 'The role of the close button is "button"');
      assert.equal($(closeButton).attr('aria-label'), 'remove element', 'The close button has a helpful aria label');
    });
  });

  (0, _emberQunit.test)('Single-select: The trigger element correctly passes through WAI-ARIA widget attributes', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 12,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [11, 6], [11, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 13,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['ariaInvalid', true, 'ariaLabel', 'ariaLabelString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'required', true, 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [8, 15], [8, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [12, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    var $trigger = this.$('.ember-power-select-trigger');

    assert.equal($trigger.attr('aria-label'), 'ariaLabelString', 'aria-label set correctly');
    assert.equal($trigger.attr('aria-invalid'), 'true', 'aria-invalid set correctly');
    assert.equal($trigger.attr('aria-required'), 'true', 'aria-required set correctly');
  });

  (0, _emberQunit.test)('Multiple-select: The trigger element correctly passes through WAI-ARIA widget attributes', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 12,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [11, 6], [11, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 13,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['ariaLabel', 'ariaLabelString', 'ariaInvalid', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'required', true, 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [8, 15], [8, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [12, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    var $trigger = this.$('.ember-power-select-trigger');

    assert.equal($trigger.attr('aria-label'), 'ariaLabelString', 'aria-label set correctly');
    assert.equal($trigger.attr('aria-invalid'), 'true', 'aria-invalid set correctly');
    assert.equal($trigger.attr('aria-required'), 'true', 'aria-required set correctly');
  });

  (0, _emberQunit.test)('Single-select: The trigger element correctly passes through WAI-ARIA relationship attributes', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 11,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [10, 6], [10, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 12,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['ariaDescribedBy', 'ariaDescribedByString', 'ariaLabelledBy', 'ariaLabelledByString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [7, 15], [7, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [11, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    var $trigger = this.$('.ember-power-select-trigger');

    assert.equal($trigger.attr('aria-describedby'), 'ariaDescribedByString', 'aria-describedby set correctly');
    assert.equal($trigger.attr('aria-labelledby'), 'ariaLabelledByString', 'aria-required set correctly');
  });

  (0, _emberQunit.test)('Multiple-select: The trigger element correctly passes through WAI-ARIA relationship attributes', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 11,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [10, 6], [10, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 12,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['ariaDescribedBy', 'ariaDescribedByString', 'ariaLabelledBy', 'ariaLabelledByString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [7, 15], [7, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [11, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    var $trigger = this.$('.ember-power-select-trigger');

    assert.equal($trigger.attr('aria-describedby'), 'ariaDescribedByString', 'aria-describedby set correctly');
    assert.equal($trigger.attr('aria-labelledby'), 'ariaLabelledByString', 'aria-required set correctly');
  });
});
define('dummy/tests/integration/components/power-select/a11y-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/a11y-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/a11y-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/assertions-and-deprecations-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Assertions & deprecations)', {
    integration: true
  });

  (0, _emberQunit.test)('the `onchange` function is mandatory', function (assert) {
    var _this = this;

    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;

    assert.throws(function () {
      _this.render(Ember.HTMLBars.template((function () {
        var child0 = (function () {
          return {
            meta: {
              'fragmentReason': false,
              'revision': 'Ember@2.4.1',
              'loc': {
                'source': null,
                'start': {
                  'line': 2,
                  'column': 6
                },
                'end': {
                  'line': 2,
                  'column': 75
                }
              }
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment('');
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [['content', 'opt', ['loc', [null, [2, 68], [2, 75]]]]],
            locals: ['opt'],
            templates: []
          };
        })();

        return {
          meta: {
            'fragmentReason': {
              'name': 'missing-wrapper',
              'problems': ['wrong-type']
            },
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 1,
                'column': 0
              },
              'end': {
                'line': 3,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('\n      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n    ');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 30], [2, 39]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 49], [2, 57]]]]], [], []]], 0, null, ['loc', [null, [2, 6], [2, 92]]]]],
          locals: [],
          templates: [child0]
        };
      })()));
    }, /requires an `onchange` function/);
  });
});
define('dummy/tests/integration/components/power-select/assertions-and-deprecations-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/assertions-and-deprecations-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/assertions-and-deprecations-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/check-horizontal-position-test', ['exports', 'ember-qunit', 'dummy/tests/helpers/ember-power-select'], function (exports, _emberQunit, _dummyTestsHelpersEmberPowerSelect) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (horizontalPosition)', {
    integration: true
  });

  (0, _emberQunit.test)('check horizontal position specifying `right`', function (assert) {
    assert.expect(2);

    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['horizontalPosition', 'right', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 69], [2, 72]]]]], [], ['loc', [null, [2, 64], [2, 73]]]]], [], ['loc', [null, [2, 56], [2, 74]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-basic-dropdown--left').length, 0);
    assert.equal($('.ember-basic-dropdown--right').length, 2);
  });

  (0, _emberQunit.test)('check horizontal position without specify any property', function (assert) {
    assert.expect(2);

    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 42], [2, 45]]]]], [], ['loc', [null, [2, 37], [2, 46]]]]], [], ['loc', [null, [2, 29], [2, 47]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-basic-dropdown--right').length, 0);
    assert.equal($('.ember-basic-dropdown--left').length, 2);
  });
});
define('dummy/tests/integration/components/power-select/check-horizontal-position-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/check-horizontal-position-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/check-horizontal-position-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/custom-search-test', ['exports', 'ember', 'ember-qunit', 'ember-test-helpers/wait', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _emberTestHelpersWait, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {
  var RSVP = _ember['default'].RSVP;

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Custom search function)', {
    integration: true
  });

  (0, _emberQunit.test)('When you pass a custom search action instead of options, opening the select show a "Type to search" message in a list element', function (assert) {
    assert.expect(1);

    this.searchFn = function () {};

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text(), 'Type to search', 'The dropdown shows the "type to seach" message');
  });

  (0, _emberQunit.test)('When no options are given but there is a search action, a "type to search" message is rendered', function (assert) {
    assert.expect(2);

    this.searchFn = function () {};
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text(), 'Type to search');
    assert.ok($('.ember-power-select-option').hasClass('ember-power-select-option--search-message'), 'The option with the search message has a special class');
  });

  (0, _emberQunit.test)('The "type to search" message can be customized passing `searchMessage=something`', function (assert) {
    assert.expect(1);

    this.searchFn = function () {};
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'searchMessage', 'Type the name of the thing', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 101], [2, 104]]]]], [], ['loc', [null, [2, 96], [2, 105]]]]], [], ['loc', [null, [2, 88], [2, 106]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text(), 'Type the name of the thing');
  });

  (0, _emberQunit.test)('The search function can return an array and those options get rendered', function (assert) {
    assert.expect(1);

    this.searchFn = function (term) {
      return _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
        return str.indexOf(term) > -1;
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.equal($('.ember-power-select-option').length, 7);
  });

  (0, _emberQunit.test)('The search function can return a promise that resolves to an array and those options get rendered', function (assert) {
    assert.expect(1);

    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option').length, 7);
    });
  });

  (0, _emberQunit.test)('While the async search is being performed the "Type to search" dissapears the "Loading..." message appears', function (assert) {
    assert.expect(3);

    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(/Type to search/.test($('.ember-power-select-dropdown').text()), 'The type to search message is displayed');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.ok(!/Type to search/.test($('.ember-power-select-dropdown').text()), 'The type to search message dissapeared');
    assert.ok(/Loading options\.\.\./.test($('.ember-power-select-dropdown').text()), '"Loading options..." message appears');
    return (0, _emberTestHelpersWait['default'])();
  });

  (0, _emberQunit.test)('When the search resolves to an empty array then the "No results found" message or block appears.', function (assert) {
    assert.expect(1);

    this.searchFn = function () {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve([]);
        }, 10);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.ok(/No results found/.test($('.ember-power-select-option').text()), 'The default "No results" message renders');
    });
  });

  (0, _emberQunit.test)('When the search resolves to an empty array then the custom "No results" message appears', function (assert) {
    assert.expect(1);

    this.searchFn = function () {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve([]);
        }, 10);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'noMatchesMessage', 'Meec. Try again', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 93], [2, 96]]]]], [], ['loc', [null, [2, 88], [2, 97]]]]], [], ['loc', [null, [2, 80], [2, 98]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.ok(/Meec\. Try again/.test($('.ember-power-select-option').text()), 'The customized "No results" message renders');
    });
  });

  (0, _emberQunit.test)('When the search resolves to an empty array then the custom alternate block renders', function (assert) {
    assert.expect(1);

    this.searchFn = function () {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve([]);
        }, 10);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      var child1 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 4,
                'column': 4
              },
              'end': {
                'line': 6,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createElement('span');
            dom.setAttribute(el1, 'class', 'foo-bar');
            var el2 = dom.createTextNode('Baz');
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 7,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, 1, ['loc', [null, [2, 4], [6, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-dropdown .foo-bar').length, 1, 'The alternate block message gets rendered');
    });
  });

  (0, _emberQunit.test)('When one search is fired before the previous one resolved, the "Loading" continues until the 2nd is resolved', function (assert) {
    var done = assert.async();
    assert.expect(2);

    this.searchFn = function () {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers);
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("tee");

    setTimeout(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    }, 50);

    setTimeout(function () {
      assert.ok(/Loading options/.test($('.ember-power-select-option').text()), 'The loading message is visible');
      assert.equal($('.ember-power-select-option').length, 1, 'No results are shown');
    }, 120);

    setTimeout(done, 180);
  });

  (0, _emberQunit.test)('On an empty select, when the search resolves, the first element is highlighted like with regular filtering', function (assert) {
    assert.expect(1);

    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first result is highlighted');
    });
  });

  (0, _emberQunit.test)('On an select with a selected value, if after a search this value is not among the options the first element is highlighted', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = _dummyTestsIntegrationComponentsConstants.numbers[2];
    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 44], [2, 51]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 61], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:eq(2)').attr('aria-current'), 'true', 'The 3rd result is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first result is highlighted');
    });
  });

  (0, _emberQunit.test)('Closing a component with a custom search cleans the search box and the results list', function (assert) {
    var _this = this;

    assert.expect(5);
    this.searchFn = function (term) {
      return RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
        return str.indexOf(term) > -1;
      }));
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'different-node');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 27], [3, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 58], [3, 61]]]]], [], ['loc', [null, [3, 53], [3, 62]]]]], [], ['loc', [null, [3, 45], [3, 63]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.equal($('.ember-power-select-option').length, 7, 'Results are filtered');
    assert.equal($('.ember-power-select-search input').val(), 'teen');
    _ember['default'].run(function () {
      var event = new window.Event('mousedown');
      _this.$('#different-node')[0].dispatchEvent(event);
    });
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 1, 'Results have been cleared');
    assert.equal($('.ember-power-select-option').text().trim(), 'Type to search');
    assert.equal($('.ember-power-select-search input').val(), '', 'The searchbox was cleared');
  });

  (0, _emberQunit.test)('When received both options and search, those options are shown when the dropdown opens before the first search is performed', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 50);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'different-node');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 43], [3, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 74], [3, 77]]]]], [], ['loc', [null, [3, 69], [3, 78]]]]], [], ['loc', [null, [3, 61], [3, 79]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.equal($('.ember-power-select-option').length, 21, 'All the options are shown and also the loading message');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...');
    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option').length, 7, 'All the options are shown but no the loading message');
    });
  });

  (0, _emberQunit.test)('Don\'t return from the search action and update the options instead also works as an strategy', function (assert) {
    var _this2 = this;

    assert.expect(2);

    this.selectedOptions = _dummyTestsIntegrationComponentsConstants.numbers;
    this.searchFn = function (term) {
      _ember['default'].run.later(function () {
        _this2.set('selectedOptions', _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
          return str.indexOf(term) > -1;
        }));
      }, 20);
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'different-node');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'selectedOptions', ['loc', [null, [3, 28], [3, 43]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 51], [3, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 82], [3, 85]]]]], [], ['loc', [null, [3, 77], [3, 86]]]]], [], ['loc', [null, [3, 69], [3, 87]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option').length, 7);
    });
  });

  (0, _emberQunit.test)('Setting the options to a promise from the custom search function works (and does not prevent further searches)', function (assert) {
    var _this3 = this;

    var done = assert.async();
    assert.expect(14);

    this.selectedOptions = RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers);
    var searchCalls = 0;
    this.searchFn = function (term) {
      searchCalls++;
      var promise = new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 30);
      });
      _this3.set('selectedOptions', promise);
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'different-node');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'selectedOptions', ['loc', [null, [3, 28], [3, 43]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 51], [3, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 82], [3, 85]]]]], [], ['loc', [null, [3, 77], [3, 86]]]]], [], ['loc', [null, [3, 69], [3, 87]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.equal($('.ember-power-select-option').length, 21, 'All the options are shown plus the loading message');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');

    setTimeout(function () {
      assert.equal(searchCalls, 1, 'The search was called only once');
      assert.equal($('.ember-power-select-option').length, 7);
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("seven");
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');
      assert.equal($('.ember-power-select-option').length, 8);
    }, 40);

    setTimeout(function () {
      assert.equal(searchCalls, 2, 'The search was called only twice');
      assert.equal($('.ember-power-select-option').length, 8);
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'It is still searching the previous result');
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("four");
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');
      assert.equal($('.ember-power-select-option').length, 8);
    }, 60);

    setTimeout(function () {
      assert.equal(searchCalls, 3, 'The search was called only three times');
      assert.equal($('.ember-power-select-option').length, 2);
      done();
    }, 200);
  });

  (0, _emberQunit.test)('If you delete the last char of the input before the previous promise resolves, that promise is discarded', function (assert) {
    var done = assert.async();
    assert.expect(2);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        setTimeout(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(':');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],
          locals: ['number', 'searchTerm'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 43], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    setTimeout(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("t");
    }, 150);
    setTimeout(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("");
    }, 200);
    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'All the options are displayed after clearing the search');
      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'two:', 'The results are the original options');
      done();
    }, 300);
  });

  (0, _emberQunit.test)('The yielded search term in single selects is updated only when the async search for it finishes', function (assert) {
    var done = assert.async();
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        setTimeout(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(':');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],
          locals: ['number', 'searchTerm'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 43], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    setTimeout(function () {
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'thirteen:teen', 'The results and the searchTerm have updated');
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("four");
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'There is a search going on');
      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'thirteen:teen', 'The results and the searchTerm are still the same because the search has not finished yet');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('The yielded search term in multiple selects is updated only when the async search for it finishes', function (assert) {
    var done = assert.async();
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        setTimeout(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(':');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],
          locals: ['number', 'searchTerm'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 52], [2, 60]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 83], [2, 86]]]]], [], ['loc', [null, [2, 78], [2, 87]]]]], [], ['loc', [null, [2, 70], [2, 88]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    setTimeout(function () {
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'thirteen:teen', 'The results and the searchTerm have updated');
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("four");
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'There is a search going on');
      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'thirteen:teen', 'The results and the searchTerm are still the same because the search has not finished yet');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('BUGFIX: Destroy a component why an async search is pending does not cause an error', function (assert) {
    var done = assert.async();
    assert.expect(0); // This test has no assertions. The fact that nothing fails is the proof that it works
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.visible = true;

    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        setTimeout(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 200);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              'fragmentReason': false,
              'revision': 'Ember@2.4.1',
              'loc': {
                'source': null,
                'start': {
                  'line': 3,
                  'column': 6
                },
                'end': {
                  'line': 5,
                  'column': 6
                }
              }
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode('        ');
              dom.appendChild(el0, el1);
              var el1 = dom.createComment('');
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(':');
              dom.appendChild(el0, el1);
              var el1 = dom.createComment('');
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode('\n');
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [['content', 'number', ['loc', [null, [4, 8], [4, 18]]]], ['content', 'searchTerm', ['loc', [null, [4, 19], [4, 33]]]]],
            locals: ['number', 'searchTerm'],
            templates: []
          };
        })();

        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 6,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 39], [3, 46]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 54], [3, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 85], [3, 88]]]]], [], ['loc', [null, [3, 80], [3, 89]]]]], [], ['loc', [null, [3, 72], [3, 90]]]]], 0, null, ['loc', [null, [3, 6], [5, 32]]]]],
          locals: [],
          templates: [child0]
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 7,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'if', [['get', 'visible', ['loc', [null, [2, 10], [2, 17]]]]], [], 0, null, ['loc', [null, [2, 4], [6, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    this.set('visible', false);
    setTimeout(function () {
      done();
    }, 150);
  });

  (0, _emberQunit.test)('BUGFIX: When the given options are a promise and a search function is provided, clearing the search must display the results of the original promise', function (assert) {
    assert.expect(3);
    this.numbersPromise = RSVP.Promise.resolve(_dummyTestsIntegrationComponentsConstants.numbers);

    this.searchFn = function (term) {
      return _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
        return str.indexOf(term) > -1;
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 3
              },
              'end': {
                'line': 4,
                'column': 3
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('     ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 5], [3, 15]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 27], [2, 41]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 49], [2, 57]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 93], [2, 96]]]]], [], ['loc', [null, [2, 88], [2, 97]]]]], [], ['loc', [null, [2, 80], [2, 98]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 20, 'There is 20 options');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");
    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 options');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("");
    assert.equal($('.ember-power-select-option').length, 20, 'There is 20 options again§');
  });
});
define('dummy/tests/integration/components/power-select/custom-search-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/custom-search-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/custom-search-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/customization-with-classnames-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Customization using triggerClass)', {
    integration: true
  });

  (0, _emberQunit.test)('trigger on single selects can be customized using triggerClass', function (assert) {
    assert.expect(1);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]], 'triggerClass', 'country-single-trigger'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.country-single-trigger').length, 1, 'Class was added.');
  });

  (0, _emberQunit.test)('trigger on multiple selects can be customized using triggerClass', function (assert) {
    assert.expect(1);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = [_dummyTestsIntegrationComponentsConstants.countries[1], _dummyTestsIntegrationComponentsConstants.countries[0]];

    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]], 'triggerClass', 'country-multiple-trigger'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.country-multiple-trigger').length, 1, 'Class was added.');
  });
});
define('dummy/tests/integration/components/power-select/customization-with-classnames-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/customization-with-classnames-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/customization-with-classnames-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/customization-with-compoments-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants', 'dummy/tests/helpers/ember-power-select', 'ember'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants, _dummyTestsHelpersEmberPowerSelect, _ember) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Customization using components)', {
    integration: true
  });

  (0, _emberQunit.test)('selected option can be customized using triggerComponent', function (assert) {
    assert.expect(3);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'triggerComponent', 'selected-country', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 113], [2, 116]]]]], [], ['loc', [null, [2, 108], [2, 117]]]]], [], ['loc', [null, [2, 100], [2, 118]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-status-icon').length, 0, 'The provided trigger component is not rendered');
    assert.equal($('.ember-power-select-trigger .icon-flag').length, 1, 'The custom flag appears.');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'Spain', 'With the country name as the text.');
  });

  (0, _emberQunit.test)('selected item option can be customized using selectedItemComponent', function (assert) {
    assert.expect(3);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'selectedItemComponent', 'selected-item-country', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 123], [2, 126]]]]], [], ['loc', [null, [2, 118], [2, 127]]]]], [], ['loc', [null, [2, 110], [2, 128]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-status-icon').length, 1, 'The provided trigger component is rendered');
    assert.equal($('.ember-power-select-trigger .icon-flag').length, 1, 'The custom flag appears.');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'Spain', 'With the country name as the text.');
  });

  (0, _emberQunit.test)('the list of options can be customized using optionsComponent', function (assert) {
    assert.expect(2);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'optionsComponent', 'list-of-countries', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 114], [2, 117]]]]], [], ['loc', [null, [2, 109], [2, 118]]]]], [], ['loc', [null, [2, 101], [2, 119]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var text = $('.ember-power-select-options').text().trim();
    assert.ok(/Countries:/.test(text), 'The given component is rendered');
    assert.ok(/3\. Russia/.test(text), 'The component has access to the options');
  });

  (0, _emberQunit.test)('the content before the list can be customized passing `beforeOptionsComponent`', function (assert) {
    assert.expect(2);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'beforeOptionsComponent', 'custom-before-options', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 124], [2, 127]]]]], [], ['loc', [null, [2, 119], [2, 128]]]]], [], ['loc', [null, [2, 111], [2, 129]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown #custom-before-options-p-tag').length, 1, 'The custom component is rendered instead of the usual search bar');
    assert.equal($('.ember-power-select-search input').length, 0, 'The search input is not visible');
  });

  (0, _emberQunit.test)('the content after the list can be customized passing `afterOptionsComponent`', function (assert) {
    assert.expect(2);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'afterOptionsComponent', 'custom-after-options', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 122], [2, 125]]]]], [], ['loc', [null, [2, 117], [2, 126]]]]], [], ['loc', [null, [2, 109], [2, 127]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown #custom-after-options-p-tag').length, 1, 'The custom component is rendered instead of the usual search bar');
    assert.equal($('.ember-power-select-search input').length, 1, 'The search input is still visible');
  });

  (0, _emberQunit.test)('the `beforeOptionsComponent` and `afterOptionsComponent` receive the `extra` hash', function (assert) {
    assert.expect(1);
    var counter = 0;
    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain
    this.someAction = function () {
      counter++;
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 9,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [8, 6], [8, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 10,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [3, 15], [3, 22]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [4, 28], [4, 36]]]]], [], ['loc', [null, [4, 23], [4, 37]]]]], [], ['loc', [null, [4, 15], [4, 38]]]], 'afterOptionsComponent', 'custom-after-options2', 'beforeOptionsComponent', 'custom-before-options2', 'extra', ['subexpr', 'hash', [], ['passedAction', ['subexpr', 'action', [['get', 'someAction', ['loc', [null, [7, 39], [7, 49]]]]], [], ['loc', [null, [7, 31], [7, 50]]]]], ['loc', [null, [7, 12], [7, 51]]]]], 0, null, ['loc', [null, [2, 4], [9, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      return $('.custom-before-options2-button')[0].click();
    });
    _ember['default'].run(function () {
      return $('.custom-after-options2-button')[0].click();
    });
    assert.equal(counter, 2, 'The action inside the extra hash has been called twice');
  });

  (0, _emberQunit.test)('the `triggerComponent` receives the `loading` state', function (assert) {
    assert.expect(2);
    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 7,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [6, 6], [6, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 8,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [3, 15], [3, 22]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [4, 28], [4, 36]]]]], [], ['loc', [null, [4, 23], [4, 37]]]]], [], ['loc', [null, [4, 15], [4, 38]]]], 'triggerComponent', 'custom-trigger-for-loading'], 0, null, ['loc', [null, [2, 4], [7, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'It isn\'t loading', 'Results are not loading');
    var pendingPromise = new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        resolve(_dummyTestsIntegrationComponentsConstants.countries);
      }, 100);
    });
    _ember['default'].run(this, 'set', 'countries', pendingPromise);
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'Is loading', 'Results are loading');
  });
});
define('dummy/tests/integration/components/power-select/customization-with-compoments-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/customization-with-compoments-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/customization-with-compoments-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/disabled-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Disabled)', {
    integration: true
  });

  (0, _emberQunit.test)('A disabled dropdown doesn\'t responds to mouse/keyboard events', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'disabled', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var $trigger = this.$('.ember-power-select-trigger');
    assert.ok($trigger.attr('aria-disabled'), 'true', 'The trigger has `aria-disabled=true`');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');
  });

  (0, _emberQunit.test)('A disabled dropdown is not focusable, and ignores the passed tabindex ', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'tabindex', '123', 'disabled', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 87], [2, 90]]]]], [], ['loc', [null, [2, 82], [2, 91]]]]], [], ['loc', [null, [2, 74], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    assert.equal(this.$('.ember-power-select-trigger').attr('tabindex'), undefined, 'The trigger has no tabindex so it can\'t be focused');
  });

  (0, _emberQunit.test)('Disabled options are not highlighted when hovered with the mouse', function (assert) {
    assert.expect(1);

    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      return $('.ember-power-select-option[aria-disabled="true"]:eq(0)').trigger('mouseover');
    });
    assert.equal($('.ember-power-select-option[aria-disabled="true"]:eq(0)').attr('aria-current'), 'false', 'The hovered option was not highlighted because it\'s disabled');
  });

  (0, _emberQunit.test)('Disabled options are skipped when highlighting items with the keyboard', function (assert) {
    assert.expect(1);

    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.ok($('.ember-power-select-option[aria-current="true"]').text().trim(), 'LV: Latvia', 'The hovered option was not highlighted because it\'s disabled');
  });

  (0, _emberQunit.test)('When passed `disabled=true`, the input inside the trigger is also disabled', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.ok(this.$('.ember-power-select-trigger-multiple-input').prop('disabled'), 'The input is disabled');
  });

  (0, _emberQunit.test)('When passed `disabled=true`, the options cannot be removed', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = [_dummyTestsIntegrationComponentsConstants.numbers[2], _dummyTestsIntegrationComponentsConstants.numbers[4]];

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 38], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 90], [2, 97]]]]], [], []], 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-multiple-remove-btn').length, 0, 'There is no button to remove selected elements');
  });

  (0, _emberQunit.test)('BUGFIX: When after a search the only result is a disabled element, it isn\'t highlighted and cannot be selected', function (assert) {
    assert.expect(3);
    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 3
              },
              'end': {
                'line': 4,
                'column': 3
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('     ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("Br");
    assert.equal($('.ember-power-select-option[aria-current="true"]').length, 0, 'Nothing is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'Nothing was selected');
  });

  (0, _emberQunit.test)('BUGFIX: When after a search there is two results and the first one is a disabled element, the second one is highlighted', function (assert) {
    assert.expect(4);
    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 3
              },
              'end': {
                'line': 4,
                'column': 3
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('     ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("o"); // Finds ["Portugal", "United Kingdom"]
    assert.equal($('.ember-power-select-option').length, 2, 'There is two results');
    assert.equal($('.ember-power-select-option[aria-disabled="true"]').length, 1, 'One is disabled');
    assert.equal($('.ember-power-select-option[aria-current="true"]').length, 1, 'One element is highlighted');
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'United Kingdom', 'The first non-disabled element is highlighted');
  });

  (0, _emberQunit.test)('BUGFIX: When searching by pressing keys on a focused & closed select, disabled options are ignored', function (assert) {
    assert.expect(3);
    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 3
              },
              'end': {
                'line': 4,
                'column': 3
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('     ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    trigger.focus();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');
    assert.equal(trigger.textContent.trim(), 'United Kingdom', '"United Kingdom" has been selected');
  });
});
define('dummy/tests/integration/components/power-select/disabled-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/disabled-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/disabled-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/ember-data-test', ['exports', 'ember', 'ember-qunit', 'ember-test-helpers/wait', 'dummy/tests/helpers/ember-power-select', 'dummy/initializers/ember-cli-mirage', 'dummy/initializers/ember-data'], function (exports, _ember, _emberQunit, _emberTestHelpersWait, _dummyTestsHelpersEmberPowerSelect, _dummyInitializersEmberCliMirage, _dummyInitializersEmberData) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Ember-data integration)', {
    integration: true,
    beforeEach: function beforeEach() {
      var owner = _ember['default'].getOwner(this);
      this.server = (0, _dummyInitializersEmberCliMirage.startMirage)({ environment: 'test', modulePrefix: 'dummy' });

      _dummyInitializersEmberData['default'].initialize(owner);
      this.store = owner.lookup('service:store');
    },

    afterEach: function afterEach() {
      this.server.shutdown();
    }
  });

  (0, _emberQunit.test)('Passing as options of a `store.findAll` works', function (assert) {
    server.createList('user', 10);
    this.users = this.store.findAll('user');
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option').length, 10, 'Once the collection resolves the options render normally');
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('2');
      assert.equal($('.ember-power-select-option').length, 1, 'Filtering works');
    });
  });

  (0, _emberQunit.test)('Passing as options the result of `store.query` works', function (assert) {
    server.createList('user', 10);
    this.users = this.store.query('user', { foo: 'bar' });
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');

    return (0, _emberTestHelpersWait['default'])().then(function () {
      assert.equal($('.ember-power-select-option').length, 10, 'Once the collection resolves the options render normally');
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('2');
      assert.equal($('.ember-power-select-option').length, 1, 'Filtering works');
    });
  });

  (0, _emberQunit.test)('Delete an item in a multiple selection', function (assert) {
    server.createList('user', 10);
    this.users = this.store.findAll('user');
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 37], [2, 42]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 71], [2, 76]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'users', ['loc', [null, [2, 99], [2, 104]]]]], [], ['loc', [null, [2, 94], [2, 105]]]]], [], ['loc', [null, [2, 86], [2, 106]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    return (0, _emberTestHelpersWait['default'])().then(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn:first');
      assert.equal($('.ember-power-select-multiple-remove-btn').length, 9, 'Once the collection resolves the options render normally');
    });
  });

  (0, _emberQunit.test)('The `selected` option can be an async belongsTo', function (assert) {
    var _this = this;

    var done = assert.async();
    assert.expect(6);

    var users = server.createList('user', 10);
    var mainUser = server.create('user', { friendIds: users.map(function (u) {
        return u.id;
      }), bestieId: users[3].id });

    _ember['default'].run(function () {
      _this.store.findRecord('user', mainUser.id).then(function (record) {
        _this.mainUser = record;
        _this.render(_ember['default'].HTMLBars.template((function () {
          var child0 = (function () {
            return {
              meta: {
                'fragmentReason': false,
                'revision': 'Ember@2.4.1',
                'loc': {
                  'source': null,
                  'start': {
                    'line': 2,
                    'column': 8
                  },
                  'end': {
                    'line': 4,
                    'column': 8
                  }
                }
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('          ');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [['content', 'option.name', ['loc', [null, [3, 10], [3, 25]]]]],
              locals: ['option'],
              templates: []
            };
          })();

          return {
            meta: {
              'fragmentReason': {
                'name': 'missing-wrapper',
                'problems': ['wrong-type']
              },
              'revision': 'Ember@2.4.1',
              'loc': {
                'source': null,
                'start': {
                  'line': 1,
                  'column': 0
                },
                'end': {
                  'line': 5,
                  'column': 6
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode('\n');
              dom.appendChild(el0, el1);
              var el1 = dom.createComment('');
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode('      ');
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'mainUser.friends', ['loc', [null, [2, 32], [2, 48]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'mainUser.bestie', ['loc', [null, [2, 58], [2, 73]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 115], [2, 118]]]]], [], ['loc', [null, [2, 110], [2, 119]]]]], [], ['loc', [null, [2, 102], [2, 120]]]]], 0, null, ['loc', [null, [2, 8], [4, 25]]]]],
            locals: [],
            templates: [child0]
          };
        })()));

        (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
        assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'User 0', 'The first element is highlighted');
        assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
        assert.equal(_this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');

        setTimeout(function () {
          assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'User 3', 'The 4th element is highlighted');
          assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'User 3', 'The 4th element is highlighted');
          assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'User 3', 'The trigger has the proper content');
          done();
        }, 10);
      });
    });
  });
});
define('dummy/tests/integration/components/power-select/ember-data-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/ember-data-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/ember-data-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/general-behaviour-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {
  var RSVP = _ember['default'].RSVP;

  (0, _emberQunit.moduleForComponent)('power-select', 'Integration | Component | Ember Power Select (General behavior)', {
    integration: true
  });

  (0, _emberQunit.test)('Click in the trigger of a closed select opens the dropdown', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
  });

  (0, _emberQunit.test)('Click in the trigger of an opened select closes the dropdown', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
  });

  (0, _emberQunit.test)('Search functionality is enabled by default', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 59], [2, 62]]]]], [], ['loc', [null, [2, 54], [2, 63]]]]], [], ['loc', [null, [2, 46], [2, 64]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-search').length, 1, 'The search box is rendered');
  });

  (0, _emberQunit.test)('The search functionality can be disabled by passing `searchEnabled=false`', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'searchEnabled', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 78], [2, 81]]]]], [], ['loc', [null, [2, 73], [2, 82]]]]], [], ['loc', [null, [2, 65], [2, 83]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    assert.equal($('.ember-power-select-search').length, 0, 'The search box NOT rendered');
  });

  (0, _emberQunit.test)('The search box gain focus automatically when opened', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok($('.ember-power-select-search input').get(0) === document.activeElement, 'The search box is focused after opening select');
  });

  (0, _emberQunit.test)('Each option of the select is the result of yielding an item', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'There is as many options in the markup as in the supplied array');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');
    assert.equal($('.ember-power-select-option:eq(9)').text().trim(), 'ten');
    assert.equal($('.ember-power-select-option:eq(13)').text().trim(), 'fourteen');
  });

  (0, _emberQunit.test)('If the passed options is a promise and it\'s not resolved the component shows a Loading message', function (assert) {
    var done = assert.async();
    assert.expect(3);

    this.numbersPromise = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(function () {
        console.debug('resolved!');resolve(_dummyTestsIntegrationComponentsConstants.numbers);
      }, 100);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');
    setTimeout(function () {
      assert.ok(!/Loading options/.test($('.ember-power-select-option').text()), 'The loading message is gone');
      assert.equal($('.ember-power-select-option').length, 20, 'The results appear when the promise is resolved');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('If the passed options is a promise and it\'s not resolved but the `loadingMessage` attribute is false, no loading message is shown', function (assert) {
    var done = assert.async();
    assert.expect(2);

    this.numbersPromise = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(function () {
        console.debug('resolved!');resolve(_dummyTestsIntegrationComponentsConstants.numbers);
      }, 100);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]], 'loadingMessage', false], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();

    assert.equal($('.ember-power-select-option').length, 0, 'No loading options message is displayed');
    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, 20, 'The results appear when the promise is resolved');
      done();
    }, 120);
  });

  (0, _emberQunit.test)('If a placeholder is provided, it shows while no element is selected', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'placeholder', 'abracadabra', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 97], [2, 100]]]]], [], ['loc', [null, [2, 92], [2, 101]]]]], [], ['loc', [null, [2, 84], [2, 102]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-trigger .ember-power-select-placeholder').text().trim(), 'abracadabra', 'The placeholder is rendered when there is no element');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');
    assert.equal($('.ember-power-select-trigger .ember-power-select-placeholder').length, 0, 'The placeholder is gone');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', 'The selected item replaced it');
  });

  (0, _emberQunit.test)('If the `selected` value changes the select gets updated, but the `onchange` action doesn\'t fire', function (assert) {
    var _this = this;

    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = null;
    this.foo = function () {
      assert.ok(false, 'The onchange action is never fired');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'foo', ['loc', [null, [2, 53], [2, 56]]]]], [], ['loc', [null, [2, 45], [2, 57]]]], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 67], [2, 75]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return _this.set('selected', 'three');
    });
    assert.equal($('.ember-power-select-trigger').text().trim(), 'three', 'The `three` element is selected');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'three', 'The proper option gets highlighed');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'three', 'The proper option gets selected');
  });

  (0, _emberQunit.test)('If the user selects a value and later on the selected value changes from the outside, the components updates too', function (assert) {
    var _this2 = this;

    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = null;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '"four" has been selected');
    _ember['default'].run(function () {
      return _this2.set('selected', 'three');
    });
    assert.equal($('.ember-power-select-trigger').text().trim(), 'three', '"three" has been selected because a change came from the outside');
  });

  (0, _emberQunit.test)('If the user passes `renderInPlace=true` the dropdown is added below the trigger instead of in the root', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'renderInPlace', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-dropdown').length, 1, 'The dropdown is inside the component');
  });

  (0, _emberQunit.test)('If the user passes `closeOnSelect=false` the dropdown remains visible after selecting an option with the mouse', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '"four" has been selected');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
  });

  (0, _emberQunit.test)('If the user passes `closeOnSelect=false` the dropdown remains visible after selecting an option with the with the keyboard', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '"four" has been selected');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
  });

  (0, _emberQunit.test)('If the content of the options is refreshed (starting with empty array proxy) the available options should also refresh', function (assert) {
    var done = assert.async();
    assert.expect(2);

    var data = [];
    this.proxy = _ember['default'].A(data);
    this.search = function () {
      return new RSVP.Promise(function (resolve) {
        resolve(data);
        _ember['default'].run.later(function () {
          data.pushObject('one');
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': {
              'name': 'missing-wrapper',
              'problems': ['wrong-type']
            },
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 1,
                'column': 0
              },
              'end': {
                'line': 1,
                'column': 106
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [1, 95], [1, 105]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 123
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'proxy', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [1, 45], [1, 51]]]]], [], ['loc', [null, [1, 37], [1, 52]]]], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [1, 75], [1, 78]]]]], [], ['loc', [null, [1, 70], [1, 79]]]]], [], ['loc', [null, [1, 62], [1, 80]]]]], 0, null, ['loc', [null, [1, 0], [1, 123]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("o");

    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, 1, 'The dropdown is opened and results shown after proxy is updated');
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('If the content of the options is updated (starting with populated array proxy) the available options should also refresh', function (assert) {
    var done = assert.async();
    assert.expect(5);

    var data = ['one'];
    this.proxy = _ember['default'].A(data);
    this.search = function () {
      return new RSVP.Promise(function (resolve) {
        resolve(data);
        _ember['default'].run.later(function () {
          data.pushObject('owner');
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': {
              'name': 'missing-wrapper',
              'problems': ['wrong-type']
            },
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 1,
                'column': 0
              },
              'end': {
                'line': 1,
                'column': 106
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [1, 95], [1, 105]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 123
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'proxy', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [1, 45], [1, 51]]]]], [], ['loc', [null, [1, 37], [1, 52]]]], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [1, 75], [1, 78]]]]], [], ['loc', [null, [1, 70], [1, 79]]]]], [], ['loc', [null, [1, 62], [1, 80]]]]], 0, null, ['loc', [null, [1, 0], [1, 123]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();

    assert.equal($('.ember-power-select-option').length, 1, 'The dropdown is opened and results shown with initial proxy contents');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');

    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("o");

    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results shown after proxy is updated');
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');
      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'owner');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('If the content of the selected is refreshed while opened the first element of the list gets highlighted', function (assert) {
    var _this3 = this;

    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'two', 'The second options is highlighted');
    _ember['default'].run(function () {
      return _this3.set('numbers', ['foo', 'bar', 'baz']);
    });
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'foo', 'The first element is highlighted');
  });

  (0, _emberQunit.test)('If the user passes `dropdownClass` the dropdown content should have that class', function (assert) {
    assert.expect(1);

    this.options = [];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'dropdownClass', 'this-is-a-test-class'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok($('.ember-power-select-dropdown').hasClass('this-is-a-test-class'), 'dropdownClass can be customized');
  });

  (0, _emberQunit.test)('If the user passes `class` the dropdown gets that class', function (assert) {
    assert.expect(1);
    this.options = [];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'class', 'my-foo'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    assert.ok($('.ember-power-select').hasClass('my-foo'), 'the entire select inherits that class');
  });

  (0, _emberQunit.test)('The filtering is reverted after closing the select', function (assert) {
    var _this4 = this;

    assert.expect(2);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'outside-div');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [3, 45], [3, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 71], [3, 74]]]]], [], ['loc', [null, [3, 66], [3, 75]]]]], [], ['loc', [null, [3, 58], [3, 76]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('th');
    assert.equal($('.ember-power-select-option').length, 2, 'the dropdown has filtered the results');
    _ember['default'].run(function () {
      var event = new window.Event('mousedown');
      _this4.$('#outside-div')[0].dispatchEvent(event);
    });
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'the dropdown has shows all results');
  });

  (0, _emberQunit.test)('It has the appropriate class when it receives a specific dropdown position', function (assert) {
    assert.expect(1);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'verticalPosition', 'above'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--above'), 'It has the class of dropdowns positioned above');
  });

  (0, _emberQunit.test)('The search term is yielded as second argument in single selects', function (assert) {
    assert.expect(2);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(':');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'term', ['loc', [null, [3, 6], [3, 14]]]], ['content', 'option', ['loc', [null, [3, 15], [3, 25]]]]],
          locals: ['option', 'term'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'tw:two', 'Each option receives the search term');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('thr');
    assert.equal($('.ember-power-select-trigger').text().trim(), 'thr:two', 'The trigger also receives the search term');
  });

  (0, _emberQunit.test)('If there is no search action and the options is empty the select shows the default "no options" message', function (assert) {
    this.options = [];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 1);
    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');
    assert.ok($('.ember-power-select-option').hasClass('ember-power-select-option--no-matches-message'), 'The row has a special class to differentiate it from regular options');
  });

  (0, _emberQunit.test)('If there is a search action and the options is empty it shows the `searchMessage`, and if after searching there is no results, it shows the `noResults` message', function (assert) {
    this.options = [];
    this.search = function () {
      return [];
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'search', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 42], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 1);
    assert.equal($('.ember-power-select-option').text().trim(), 'Type to search');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('foo');
    assert.equal($('.ember-power-select-option').length, 1);
    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');
  });

  (0, _emberQunit.test)('The default "no options" message can be customized passing `noMatchesMessage="other message"`', function (assert) {
    this.options = [];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'noMatchesMessage', 'Nope', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 1);
    assert.equal($('.ember-power-select-option').text().trim(), 'Nope');
  });

  (0, _emberQunit.test)('If there is a search action, the options are empty and the `seachMessage` in intentionally empty, it doesn\'t show anything, and if you seach and there is no results it shows the `noResultsMessage`', function (assert) {
    this.options = [];
    this.search = function () {
      return [];
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'search', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'searchMessage', false, 'options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 62], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 0);
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('foo');
    assert.equal($('.ember-power-select-option').length, 1);
    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');
  });

  (0, _emberQunit.test)('The content of the dropdown when there are no options can be completely customized using the inverse block', function (assert) {
    this.options = [];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      var child1 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 4,
                'column': 4
              },
              'end': {
                'line': 6,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createElement('span');
            dom.setAttribute(el1, 'class', 'empty-option-foo');
            var el2 = dom.createTextNode('Foo bar');
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 7,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'noMatchesMessage', 'Nope', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, 1, ['loc', [null, [2, 4], [6, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 0, 'No list elements, just the given alternate block');
    assert.equal($('.empty-option-foo').length, 1);
  });

  (0, _emberQunit.test)('When no `selected` is provided, the first item in the dropdown is highlighted', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    assert.equal($('.ember-power-select-option[aria-current="true"]').length, 1, 'One element is highlighted');
    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first one to be precise');
  });

  (0, _emberQunit.test)('When `selected` option is provided, it appears in the trigger yielded with the same block as the options', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'three', 'The selected option show in the trigger');

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      Selected: ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 16], [3, 26]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    assert.equal(this.$().text().trim(), 'Selected: three', 'The selected option uses the same yielded block as the options');
  });

  (0, _emberQunit.test)('When `selected` option is provided, it is highlighted when the dropdown opens', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $highlightedOption = $('.ember-power-select-option[aria-current="true"]');
    assert.equal($highlightedOption.length, 1, 'One element is highlighted');
    assert.equal($highlightedOption.text().trim(), 'three', 'The third option is highlighted');
  });

  (0, _emberQunit.test)('When `selected` option is provided, that option is marked as `.selected`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $selectedOption = $('.ember-power-select-option:contains("three")');
    assert.equal($selectedOption.attr('aria-selected'), 'true', 'The third option is marked as selected');
  });

  (0, _emberQunit.test)('The default search strategy matches disregarding diacritics differences and capitalization', function (assert) {
    assert.expect(8);

    this.names = _dummyTestsIntegrationComponentsConstants.names;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'names', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 56], [2, 59]]]]], [], ['loc', [null, [2, 51], [2, 60]]]]], [], ['loc', [null, [2, 43], [2, 61]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');
    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');
    assert.equal($('.ember-power-select-option').text().trim(), 'María');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Larsen');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João');
  });

  (0, _emberQunit.test)('You can pass a custom marcher with `matcher=myFn` to customize the search strategy', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.endsWithMatcher = function (option, text) {
      return option.slice(text.length * -1) === text ? 0 : -1;
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'endsWithMatcher', ['loc', [null, [2, 44], [2, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('on');
    assert.equal($('.ember-power-select-option').text().trim(), "No results found", 'No number ends in "on"');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('teen');
    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 number that end in "teen"');
  });

  (0, _emberQunit.test)('When no `selected` is provided, the first item in the dropdown is highlighted', function (assert) {
    assert.expect(3);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 60], [2, 63]]]]], [], ['loc', [null, [2, 55], [2, 64]]]]], [], ['loc', [null, [2, 47], [2, 65]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    assert.equal($('.ember-power-select-option[aria-current="true"]').length, 1, 'One element is highlighted');
    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first one to be precise');
  });

  (0, _emberQunit.test)('When a option is provided that options is rendered in the trigger using the same block as the options', function (assert) {
    assert.expect(1);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-trigger').text().trim(), 'ES: Spain', 'The selected country is rendered in the trigger');
  });

  (0, _emberQunit.test)('When `selected` option is provided, it is highlighted when the dropdown opens', function (assert) {
    assert.expect(2);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'country', ['loc', [null, [2, 77], [2, 84]]]]], [], ['loc', [null, [2, 72], [2, 85]]]]], [], ['loc', [null, [2, 64], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $highlightedOption = $('.ember-power-select-option[aria-current="true"]');
    assert.equal($highlightedOption.length, 1, 'One element is highlighted');
    assert.equal($highlightedOption.text().trim(), 'ES: Spain', 'The second option is highlighted');
  });

  (0, _emberQunit.test)('When `selected` option is provided, that option is marked as `.selected`', function (assert) {
    assert.expect(1);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(': ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    var $selectedOption = $('.ember-power-select-option:contains("ES: Spain")');
    assert.equal($selectedOption.attr('aria-selected'), 'true', 'The second option is marked as selected');
  });

  (0, _emberQunit.test)('The default search strategy matches disregarding diacritics differences and capitalization', function (assert) {
    assert.expect(8);

    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],
          locals: ['person'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 28], [2, 34]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María Murray');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');
    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');
    assert.equal($('.ember-power-select-option').text().trim(), 'María Murray');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João Jin');
  });

  (0, _emberQunit.test)('You can pass a custom marcher with `matcher=myFn` to customize the search strategy', function (assert) {
    assert.expect(4);

    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];

    this.nameOrSurnameNoDiacriticsCaseSensitive = function (person, term) {
      return (person.name + ' ' + person.surname).indexOf(term);
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],
          locals: ['person'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 28], [2, 34]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'nameOrSurnameNoDiacriticsCaseSensitive', ['loc', [null, [2, 43], [2, 81]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 104], [2, 107]]]]], [], ['loc', [null, [2, 99], [2, 108]]]]], [], ['loc', [null, [2, 91], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('s');
    assert.equal($('.ember-power-select-option').length, 3, 'Only 3 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');
    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'Lisa Simpson');
  });

  (0, _emberQunit.test)('BUGFIX: The highlighted element is reset when single selects are closed', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.foo = 'three';
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'three', 'The third element is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The forth element is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'three', 'The third element is highlighted again');
  });

  (0, _emberQunit.test)('BUGFIX: The highlighted element is reset when multiple selects are closed', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 40);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'two', 'The second element is highlighted');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted again');
  });

  (0, _emberQunit.test)('The trigger of the select has a id derived from the element id of the component', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    assert.ok(/^ember-power-select-trigger-ember\d+$/.test(this.$('.ember-power-select-trigger').attr('id'), 'The trigger has the proper id'));
  });

  (0, _emberQunit.test)('If the passed options is a promise that is resolved, searching should filter the results from a promise', function (assert) {
    var done = assert.async();
    assert.expect(5);

    this.numbersPromise = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(function () {
        resolve(_dummyTestsIntegrationComponentsConstants.numbers);
      }, 100);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    setTimeout(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("o");

      assert.equal($('.ember-power-select-option').length, 4, 'The dropdown is opened and results shown.');
      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');
      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'two');
      assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'four');
      assert.equal($('.ember-power-select-option:eq(3)').text().trim(), 'fourteen');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('Disabled single selects don\'t have a clear button even if `allowClear` is true', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.foo = _dummyTestsIntegrationComponentsConstants.numbers[2];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'allowClear', true, 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-clear-btn').length, 0, 'There is no clear button');
  });

  (0, _emberQunit.test)('If the passed selected element is a pending promise, the first element is highlighted and the trigger is empty', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 50);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');
  });

  (0, _emberQunit.test)('If the passed selected element is a resolved promise, that element is selected and the trigger contains the proper text', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers[3]);

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The 4th element is highlighted');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'four', 'The 4th element is highlighted');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');
  });

  (0, _emberQunit.test)('If the passed selected element is a pending promise that resolves while the select is opened, the highlighted & selected elements get updated, along with the trigger', function (assert) {
    var done = assert.async();
    assert.expect(6);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 50);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');

    setTimeout(function () {
      assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The 4th element is highlighted');
      assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'four', 'The 4th element is highlighted');
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');
      done();
    }, 100);
  });

  (0, _emberQunit.test)('When a promise resolves it doesn\'t overwrite a previous value if it isn\'t the same promise it resolved from', function (assert) {
    var done = assert.async();
    assert.expect(6);

    var promise1 = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 80);
    });

    var promise2 = new RSVP.Promise(function (resolve) {
      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[4], 20);
    });

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = promise1;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    this.set('selected', promise2);

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');

    setTimeout(function () {
      assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'five', 'The 5th element is highlighted');
      assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'five', 'The 5th element is highlighted');
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'five', 'The trigger has the proper content');
      done();
    }, 100);
  });

  (0, _emberQunit.test)('When both `selected` and `options` are async, and `selected` resolves before `options`, the proper options are selected/highlighted after each resolution', function (assert) {
    var done = assert.async();
    assert.expect(6);

    this.asyncOptions = new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        return resolve(_dummyTestsIntegrationComponentsConstants.numbers);
      }, 200);
    });
    this.asyncSelected = new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        return resolve('four');
      }, 10);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'asyncOptions', ['loc', [null, [2, 28], [2, 40]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'asyncSelected', ['loc', [null, [2, 50], [2, 63]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 86], [2, 89]]]]], [], ['loc', [null, [2, 81], [2, 90]]]]], [], ['loc', [null, [2, 73], [2, 91]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();

    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');

    setTimeout(function () {
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');
    }, 20);

    setTimeout(function () {
      assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The 4th element is highlighted');
      assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'four', 'The 4th element is selected');
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');
      done();
    }, 220);
  });

  (0, _emberQunit.test)('When both `selected` and `options` are async, and `options` resolves before `selected`, the proper options are selected/highlighted after each resolution', function (assert) {
    var done = assert.async();
    assert.expect(7);

    this.asyncOptions = new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        return resolve(_dummyTestsIntegrationComponentsConstants.numbers);
      }, 10);
    });
    this.asyncSelected = new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        return resolve('four');
      }, 200);
    });

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'asyncOptions', ['loc', [null, [2, 28], [2, 40]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'asyncSelected', ['loc', [null, [2, 50], [2, 63]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 86], [2, 89]]]]], [], ['loc', [null, [2, 81], [2, 90]]]]], [], ['loc', [null, [2, 73], [2, 91]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();

    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 0, 'no element is selected');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');

    setTimeout(function () {
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'The trigger is still empty');
      assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The 1st element is highlighted');
    }, 20);

    setTimeout(function () {
      assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The 4th element is highlighted');
      assert.equal($('.ember-power-select-option[aria-selected="true"]').text().trim(), 'four', 'The 4th element is selected');
      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');
      done();
    }, 220);
  });

  (0, _emberQunit.test)('When the input inside the select gets focused the entire component gains the `ember-basic-dropdown--focus-inside` class', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.ok(!this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select doesn\'t have the class yet');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      return $('.ember-power-select-search input').focus();
    });
    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select has the class now');
  });
});
define('dummy/tests/integration/components/power-select/general-behaviour-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/general-behaviour-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/general-behaviour-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/groups-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Groups)', {
    integration: true
  });

  (0, _emberQunit.test)('Options that have a `groupName` and `options` are considered groups and are rendered as such', function (assert) {
    assert.expect(10);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();

    var $rootLevelGroups = $('.ember-power-select-dropdown > .ember-power-select-options > .ember-power-select-group');
    var $rootLevelOptions = $('.ember-power-select-dropdown > .ember-power-select-options > .ember-power-select-option');
    assert.equal($rootLevelGroups.length, 3, 'There is 3 groups in the root level');
    assert.equal($rootLevelOptions.length, 2, 'There is 2 options in the root level');
    assert.equal($($rootLevelGroups[0]).find('.ember-power-select-group-name').text().trim(), 'Smalls');
    assert.equal($($rootLevelGroups[1]).find('.ember-power-select-group-name').text().trim(), 'Mediums');
    assert.equal($($rootLevelGroups[2]).find('> .ember-power-select-group-name').text().trim(), 'Bigs');
    assert.equal($($rootLevelOptions[0]).text().trim(), 'one hundred');
    assert.equal($($rootLevelOptions[1]).text().trim(), 'one thousand');

    var $bigs = $($rootLevelGroups[2]).find('> .ember-power-select-options');
    assert.equal($bigs.find('> .ember-power-select-group').length, 2, 'There is 2 sub-groups in the "bigs" group');
    assert.equal($bigs.find('> .ember-power-select-option').length, 1, 'There is 1 option in the "bigs" group');
  });

  (0, _emberQunit.test)('When filtering, a group title is visible as long as one of it\'s elements is', function (assert) {
    assert.expect(3);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('ve');
    var groupNames = $('.ember-power-select-group-name').toArray().map(function (e) {
      return $(e).text().trim();
    });
    var optionValues = $('.ember-power-select-option').toArray().map(function (e) {
      return $(e).text().trim();
    });
    assert.deepEqual(groupNames, ["Mediums", "Bigs", "Fairly big", "Really big"], 'Only the groups with matching options are shown');
    assert.deepEqual(optionValues, ["five", "seven", "eleven", "twelve"], 'Only the matching options are shown');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('lve');
    groupNames = $('.ember-power-select-group-name').toArray().map(function (e) {
      return $(e).text().trim();
    });
    assert.deepEqual(groupNames, ["Bigs", "Really big"], 'With no depth level');
  });

  (0, _emberQunit.test)('Click on an option of a group select selects the option and closes the dropdown', function (assert) {
    assert.expect(2);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 52], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 78], [2, 81]]]]], [], ['loc', [null, [2, 73], [2, 82]]]]], [], ['loc', [null, [2, 65], [2, 83]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:contains("four")');
    assert.equal($('.ember-power-select-trigger').text().trim(), "four", 'The clicked option was selected');
    assert.equal($('.ember-power-select-options').length, 0, 'The dropdown has dissapeared');
  });

  (0, _emberQunit.test)('Clicking on the title of a group doesn\'t performs any action nor closes the dropdown', function (assert) {
    var _this = this;

    assert.expect(1);

    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      return _this.$('.ember-power-select-group-name:eq(1)').click();
    });
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');
  });
});
define('dummy/tests/integration/components/power-select/groups-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/groups-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/groups-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/keyboard-control-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Keyboard control)', {
    integration: true
  });

  (0, _emberQunit.test)('Pressing keydown highlights the next option', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'two', 'The next options is highlighted now');
  });

  (0, _emberQunit.test)('Pressing keyup highlights the previous option', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', 'three', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 75], [2, 83]]]]], [], ['loc', [null, [2, 70], [2, 84]]]]], [], ['loc', [null, [2, 62], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'three');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 38);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'two', 'The previous options is highlighted now');
  });

  (0, _emberQunit.test)('When you the last option is highlighted, pressing keydown doesn\'t change the highlighted', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.lastNumber = _dummyTestsIntegrationComponentsConstants.numbers[_dummyTestsIntegrationComponentsConstants.numbers.length - 1];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'lastNumber', ['loc', [null, [2, 45], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'lastNumber', ['loc', [null, [2, 78], [2, 88]]]]], [], ['loc', [null, [2, 73], [2, 89]]]]], [], ['loc', [null, [2, 65], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'twenty');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'twenty', 'The last option is still the highlighted one');
  });

  (0, _emberQunit.test)('When you the first option is highlighted, pressing keyup doesn\'t change the highlighted', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.firstNumber = _dummyTestsIntegrationComponentsConstants.numbers[0];
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'firstNumber', ['loc', [null, [2, 45], [2, 56]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'firstNumber', ['loc', [null, [2, 79], [2, 90]]]]], [], ['loc', [null, [2, 74], [2, 91]]]]], [], ['loc', [null, [2, 66], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 38);
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first option is still the highlighted one');
  });

  (0, _emberQunit.test)('Pressing ENTER selects the highlighted element, closes the dropdown and focuses the trigger', function (assert) {
    var _this = this;

    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.changed = function (val, dropdown) {
      assert.equal(val, 'two', 'The onchange action is triggered with the selected value');
      _this.set('selected', val);
      assert.ok(dropdown.actions.close, 'The action receives the dropdown as second argument');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'changed', ['loc', [null, [2, 71], [2, 78]]]]], [], ['loc', [null, [2, 63], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
    assert.equal($('.ember-power-select-trigger').text().trim(), 'two', 'The highlighted element was selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Pressing ENTER on a single select with search disabled selects the highlighted element, closes the dropdown and focuses the trigger', function (assert) {
    var _this2 = this;

    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.changed = function (val, dropdown) {
      assert.equal(val, 'two', 'The onchange action is triggered with the selected value');
      _this2.set('selected', val);
      assert.ok(dropdown.actions.close, 'The action receives the dropdown as second argument');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 48], [2, 55]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 65], [2, 73]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'changed', ['loc', [null, [2, 91], [2, 98]]]]], [], ['loc', [null, [2, 83], [2, 99]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);
    assert.equal($('.ember-power-select-trigger').text().trim(), 'two', 'The highlighted element was selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Pressing ENTER when there is no highlighted element, closes the dropdown and focuses the trigger without calling the onchange function', function (assert) {
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleChange = function () {
      assert.ok(false, 'The handle change should not be called');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'handleChange', ['loc', [null, [2, 66], [2, 78]]]]], [], ['loc', [null, [2, 58], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Pressing TAB closes the select WITHOUT selecting the highlighed element and focuses the trigger', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 9);
    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'The highlighted element wasn\'t selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigges is focused');
  });

  (0, _emberQunit.test)('The component is focusable using the TAB key as any other kind of input', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    assert.equal(this.$('.ember-power-select-trigger').attr('tabindex'), "0", 'The trigger is reachable with TAB');
  });

  (0, _emberQunit.test)('If the component is focused, pressing ENTER opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return $('.ember-power-select-trigger').focus();
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
  });

  (0, _emberQunit.test)('If the single component is focused, pressing KEYDOWN opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return $('.ember-power-select-trigger').focus();
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
  });

  (0, _emberQunit.test)('If the single component is focused, pressing KEYUP opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return $('.ember-power-select-trigger').focus();
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 38);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
  });

  (0, _emberQunit.test)('Pressing ESC while the component is opened closes it and focuses the trigger', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 27);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The select is focused');
  });

  (0, _emberQunit.test)('In single-mode, when the user presses a key being the search input focused the passes `onkeydown` action is invoked with the public API and the event', function (assert) {
    assert.expect(9);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = null;
    this.handleKeydown = function (select, e) {
      assert.ok(select.hasOwnProperty('isOpen'), 'The yieded object has the `isOpen` key');
      assert.ok(select.actions.open, 'The yieded object has an `actions.open` key');
      assert.ok(select.actions.close, 'The yieded object has an `actions.close` key');
      assert.ok(select.actions.select, 'The yieded object has an `actions.select` key');
      assert.ok(select.actions.highlight, 'The yieded object has an `actions.highlight` key');
      assert.ok(select.actions.search, 'The yieded object has an `actions.search` key');
      assert.equal(e.keyCode, 13, 'The event is received as second argument');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 100], [2, 113]]]]], [], ['loc', [null, [2, 92], [2, 114]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
  });

  (0, _emberQunit.test)('in single-mode if the users calls preventDefault on the event received in the `onkeydown` action it prevents the component to do the usual thing', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = null;
    this.handleKeydown = function (select, e) {
      e.preventDefault();
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 100], [2, 113]]]]], [], ['loc', [null, [2, 92], [2, 114]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');
  });

  (0, _emberQunit.test)('In multiple-mode, when the user presses a key being the search input focused the passes `onkeydown` action is invoked with the public API and the event', function (assert) {
    assert.expect(9);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = [];
    this.handleKeydown = function (select, e) {
      assert.ok(select.hasOwnProperty('isOpen'), 'The yieded object has the `isOpen` key');
      assert.ok(select.actions.open, 'The yieded object has an `actions.open` key');
      assert.ok(select.actions.close, 'The yieded object has an `actions.close` key');
      assert.ok(select.actions.select, 'The yieded object has an `actions.select` key');
      assert.ok(select.actions.highlight, 'The yieded object has an `actions.highlight` key');
      assert.ok(select.actions.search, 'The yieded object has an `actions.search` key');
      assert.equal(e.keyCode, 13, 'The event is received as second argument');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 116], [2, 129]]]]], [], ['loc', [null, [2, 108], [2, 130]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
  });

  (0, _emberQunit.test)('in multiple-mode if the users calls preventDefault on the event received in the `onkeydown` action it prevents the component to do the usual thing', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = [];
    this.handleKeydown = function (select, e) {
      e.preventDefault();
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 116], [2, 129]]]]], [], ['loc', [null, [2, 108], [2, 130]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');
  });

  (0, _emberQunit.test)('Typing on a closed single select selects the value that matches the string typed so far', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    trigger.focus();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    assert.equal(trigger.textContent.trim(), 'nine', '"nine" has been selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');
  });

  //
  // I'm actually not sure what multiple selects closed should do when typing on them.
  // For now they just do nothing
  //
  // test('Typing on a closed multiple select with no searchbox does nothing', function(assert) {
  // });

  (0, _emberQunit.test)('Typing on a opened single select highlights the value that matches the string typed so far, scrolling if needed', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');
    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'nine', 'The option containing "nine" has been highlighted');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');
  });

  (0, _emberQunit.test)('Typing on a opened multiple select highlights the value that matches the string typed so far, scrolling if needed', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');
    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'nine', 'The option containing "nine" has been highlighted');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');
  });

  (0, _emberQunit.test)('The typed string gets reset after 1s idle', function (assert) {
    var done = assert.async();
    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    trigger.focus();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 84); // t
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 87); // w
    assert.equal(trigger.textContent.trim(), 'two', '"two" has been selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');
    setTimeout(function () {
      (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o
      assert.equal(trigger.textContent.trim(), 'one', '"one" has been selected, instead of "two", because the typing started over');
      assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');
      done();
    }, 1100);
  });

  (0, _emberQunit.test)('Type something that doesn\'t give you any result leaves the current selection', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    trigger.focus();
    assert.equal(trigger.textContent.trim(), '', 'nothing is selected');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 69); // e
    assert.equal(trigger.textContent.trim(), 'nine', 'nine has been selected');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 87); // w
    assert.equal(trigger.textContent.trim(), 'nine', 'nine is still selected because "ninew" gave no results');
  });

  (0, _emberQunit.test)('Typing on a opened single select highlights the value that matches the string, also when the options are complex, using the `searchField` for that', function (assert) {
    assert.expect(4);

    this.countries = _dummyTestsIntegrationComponentsConstants.countries;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],
          locals: ['country'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 47], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 78], [2, 86]]]]], [], ['loc', [null, [2, 73], [2, 87]]]]], [], ['loc', [null, [2, 65], [2, 88]]]], 'searchField', 'name'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 80); // p
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o
    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');
    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'Portugal', 'The option containing "Portugal" has been highlighted');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');
  });
});
define('dummy/tests/integration/components/power-select/keyboard-control-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/keyboard-control-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/keyboard-control-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/mouse-control-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Mouse control)', {
    integration: true
  });

  (0, _emberQunit.test)('Mouseovering a list item highlights it', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first element is highlighted');
    _ember['default'].run(function () {
      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });
      $('.ember-power-select-option:eq(3)')[0].dispatchEvent(event);
    });
    assert.equal($('.ember-power-select-option:eq(3)').attr('aria-current'), 'true', 'The 4th element is highlighted');
    assert.equal($('.ember-power-select-option:eq(3)').text().trim(), 'four');
  });

  (0, _emberQunit.test)('Clicking an item selects it, closes the dropdown and focuses the trigger', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.foo = function (val, dropdown) {
      assert.equal(val, 'four', 'The action is invoked with the selected value as first parameter');
      assert.ok(dropdown.actions.close, 'The action is invoked with the the dropdown object as second parameter');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select was closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Clicking the trigger while the select is opened closes it and and focuses the trigger', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Doing mousedown the clear button removes the selection but does not open the select', function (assert) {
    var _this = this;

    assert.expect(6);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.onChange = function (selected, dropdown) {
      assert.equal(selected, null, 'The onchange action was called with the new selection (null)');
      assert.ok(dropdown.actions.close, 'The onchange action was called with the dropdown object as second argument');
      _this.set('selected', selected);
    };
    this.selected = "three";
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'allowClear', true, 'onchange', ['subexpr', '@mut', [['get', 'onChange', ['loc', [null, [2, 79], [2, 87]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    assert.ok(/three/.test($('.ember-power-select-trigger').text().trim()), 'A element is selected');
    _ember['default'].run(function () {
      var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });
      $('.ember-power-select-clear-btn')[0].dispatchEvent(event);
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');
    assert.ok(!/three/.test($('.ember-power-select-trigger').text().trim()), 'That element is not selected now');
  });

  (0, _emberQunit.test)('Clicking anywhere outside the select while opened closes the component and doesn\'t focuses the trigger', function (assert) {
    var _this2 = this;

    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 3,
                'column': 4
              },
              'end': {
                'line': 5,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [4, 6], [4, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['multiple-nodes', 'wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'other-thing');
          var el2 = dom.createTextNode('Foo');
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 58], [3, 61]]]]], [], ['loc', [null, [3, 53], [3, 62]]]]], [], ['loc', [null, [3, 45], [3, 63]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    _ember['default'].run(function () {
      var event = new window.Event('mousedown');
      _this2.$('#other-thing')[0].dispatchEvent(event);
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    assert.ok($('.ember-power-select-trigger').get(0) !== document.activeElement, 'The select is not focused');
  });

  (0, _emberQunit.test)('Doing mouseup over an option less than 2px in the Y axis of where the mousedown that opened the component was triggered doesn\'t select the option', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)(null, { clientY: 123 });
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
    _ember['default'].run(function () {
      var event = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });
      event.clientY = 124;
      _ember['default'].run(function () {
        return _ember['default'].$('.ember-power-select-option:eq(1)')[0].dispatchEvent(event);
      });
    });
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');
    _ember['default'].run(function () {
      var event = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });
      event.clientY = 125;
      _ember['default'].run(function () {
        return _ember['default'].$('.ember-power-select-option:eq(1)')[0].dispatchEvent(event);
      });
    });
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed now');
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'two', 'The element has been selected');
  });

  (0, _emberQunit.test)('Clicking on a wrapped option should select it', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;

    this.foo = function (val) {
      assert.equal(val, 'four', 'The expected value was selected');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createElement('span');
            dom.setAttribute(el1, 'class', 'special-class');
            var el2 = dom.createComment('');
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.special-class:eq(3)');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select was closed');
    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Mouse-overing on a wrapped option should select it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createElement('span');
            dom.setAttribute(el1, 'class', 'special-class');
            var el2 = dom.createComment('');
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The first element is highlighted');
    _ember['default'].run(function () {
      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });
      $('.special-class:eq(3)')[0].dispatchEvent(event);
    });
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'four', 'The fourth element is highlighted');
  });

  (0, _emberQunit.test)('Mouse-overing the list itself doesn\'t crashes the app', function (assert) {
    assert.expect(0); // NOTE: The fact that this tests runs without errors is the prove that it works

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createElement('span');
            dom.setAttribute(el1, 'class', 'special-class');
            var el2 = dom.createComment('');
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });
      $('ul')[0].dispatchEvent(event);
    });
  });
});
define('dummy/tests/integration/components/power-select/mouse-control-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/mouse-control-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/mouse-control-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/multiple-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {
  var RSVP = _ember['default'].RSVP;

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Multiple)', {
    integration: true
  });

  (0, _emberQunit.test)('Multiple selects don\'t have a search box', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-search').length, 0, 'There is no search box');
  });

  (0, _emberQunit.test)('When the select opens, the search input in the trigger gets the focus', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The search input is focused');
  });

  (0, _emberQunit.test)('Click on an element selects it and closes the dropdown and focuses the trigger\'s input', function (assert) {
    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(this.$('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The input of the trigger is focused');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');
    assert.ok(/two/.test($('.ember-power-select-multiple-option').text()), 'The clicked element has been selected');
    assert.ok(this.$('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The input of the trigger is focused again');
  });

  (0, _emberQunit.test)('Selecting an element triggers the onchange action with the list of selected options', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.change = function (values) {
      assert.deepEqual(values, ['two'], 'The onchange action is fired with the list of values');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 54], [2, 60]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
  });

  (0, _emberQunit.test)('Click an option when there is already another selects both, and triggers the onchange action with them', function (assert) {
    var _this = this;

    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = ['four'];
    this.change = function (values) {
      assert.deepEqual(values, ['four', 'two'], 'The onchange action is fired with the list of values');
      _this.set('selectedNumbers', values);
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 79], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal($('.ember-power-select-multiple-option').length, 2, 'There is 2 options selected');
    assert.ok(/four/.test($('.ember-power-select-multiple-option:eq(0)').text()), 'The first option is the provided one');
    assert.ok(/two/.test($('.ember-power-select-multiple-option:eq(1)').text()), 'The second option is the one just selected');
  });

  (0, _emberQunit.test)('If there is many selections, all those options are styled as `selected`', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = ['four', 'two'];

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selectedNumbers', ['loc', [null, [2, 92], [2, 107]]]]], [], ['loc', [null, [2, 87], [2, 108]]]]], [], ['loc', [null, [2, 79], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option:eq(1)').attr('aria-selected'), 'true', 'The second option is styled as selected');
    assert.equal($('.ember-power-select-option:eq(3)').attr('aria-selected'), 'true', 'The 4th option is styled as selected');
  });

  (0, _emberQunit.test)('When the popup opens, the first items is highlighed, even if there is only one selection', function (assert) {
    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = ['four'];

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selectedNumbers', ['loc', [null, [2, 92], [2, 107]]]]], [], ['loc', [null, [2, 87], [2, 108]]]]], [], ['loc', [null, [2, 79], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option[aria-current="true"]').length, 1, 'There is one element highlighted');
    assert.equal($('.ember-power-select-option[aria-selected="true"]').length, 1, 'There is one element selected');
    assert.equal($('.ember-power-select-option[aria-current="true"][aria-selected="true"]').length, 0, 'They are not the same');
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'one', 'The highlighted element is the first one');
  });

  (0, _emberQunit.test)('Clicking on an option that is already selected unselects it, closes the select and triggers the `onchange` action', function (assert) {
    var _this2 = this;

    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selectedNumbers = ['four'];
    this.change = function (selected) {
      assert.ok(_ember['default'].isEmpty(selected), 'No elements are selected');
      _this2.set('selectedNumbers', selected);
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 79], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option[aria-selected="true"]');
    assert.equal($('.ember-power-select-multiple-option').length, 0, 'There is no options selected');
  });

  (0, _emberQunit.test)('The default filtering works in multiple mode', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('four');
    assert.equal($('.ember-power-select-option').length, 2, 'Only two items matched the criteria');
  });

  (0, _emberQunit.test)('The filtering specifying a searchkey works in multiple model', function (assert) {
    assert.expect(8);

    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(' ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],
          locals: ['person'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 37], [2, 43]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María Murray');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');
    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');
    assert.equal($('.ember-power-select-option').text().trim(), 'María Murray');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');
    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João Jin');
  });

  (0, _emberQunit.test)('The filtering specifying a custom matcher works in multiple model', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.endsWithMatcher = function (value, text) {
      return value.slice(text.length * -1) === text ? 0 : -1;
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'endsWithMatcher', ['loc', [null, [2, 53], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('on');
    assert.equal($('.ember-power-select-option').text().trim(), "No results found", 'No number ends in "on"');
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('teen');
    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 number that end in "teen"');
  });

  (0, _emberQunit.test)('The search using a custom action works int multiple mode', function (assert) {
    var done = assert.async();
    assert.expect(1);

    this.searchFn = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 36], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)("teen");

    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, 7);
      done();
    }, 150);
  });

  (0, _emberQunit.test)('Pressing ENTER when the select is closed opens and nothing is written on the box opens it', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The trigger is focused');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
  });

  (0, _emberQunit.test)('Pressing ENTER on a multiple select with `searchEnabled=false` when it is closed opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var trigger = this.$('.ember-power-select-trigger')[0];
    trigger.focus();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
  });

  (0, _emberQunit.test)('Pressing ENTER over a highlighted element selects it', function (assert) {
    var _this3 = this;

    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.change = function (selected) {
      assert.deepEqual(selected, ['two']);
      _this3.set('foo', selected);
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 67], [2, 73]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element was selected');
  });

  (0, _emberQunit.test)('Pressing ENTER over a highlighted element on a multiple select with `searchEnabled=false` selects it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');
    var trigger = this.$('.ember-power-select-trigger')[0];
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);
    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element was selected');
  });

  (0, _emberQunit.test)('Pressing ENTER over a highlighted element on a select with `searchEnabled=false` selects it', function (assert) {
    var _this4 = this;

    assert.expect(4);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.change = function (selected) {
      assert.deepEqual(selected, ['two']);
      _this4.set('foo', selected);
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 87], [2, 93]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');
    var trigger = this.$('.ember-power-select-trigger')[0];
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');
    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element is "two"');
  });

  (0, _emberQunit.test)('Pressing ENTER over a highlighted element what is already selected closes the select without doing anything and focuses the trigger', function (assert) {
    var _this5 = this;

    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = ['two'];
    this.didChange = function (val) {
      assert.ok(false, 'This should never be invoked');
      _this5.set('selected', val);
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element is still selected');
    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');
    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The trigger is focused');
  });

  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when there is text on it does nothing special', function (assert) {
    var _this6 = this;

    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = ['two'];
    this.didChange = function (val) {
      assert.ok(false, 'This should not be called');
      _this6.set('selected', val);
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('four');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');
  });

  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\'s empty removes the last selection and performs a search for that text immediatly, opening the select if closed', function (assert) {
    var _this7 = this;

    assert.expect(9);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = ['two'];
    this.didChange = function (val, dropdown) {
      assert.deepEqual(val, [], 'The selected item was unselected');
      _this7.set('selected', val);
      assert.ok(dropdown.actions.close, 'The dropdown API is received as second argument');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 54], [2, 63]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 73], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    var input = this.$('.ember-power-select-trigger-multiple-input')[0];
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(input, 8);
    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'two', 'The text of the seach input is two now');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown has been opened');
    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');
    assert.equal(input.selectionStart, 3);
    assert.equal(input.selectionEnd, 3);
  });

  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\'s empty removes the last selection and performs a search for that text immediatly (when options are not strings)', function (assert) {
    var _this8 = this;

    assert.expect(7);

    this.contries = _dummyTestsIntegrationComponentsConstants.countries;
    this.country = [_dummyTestsIntegrationComponentsConstants.countries[2], _dummyTestsIntegrationComponentsConstants.countries[4]];
    this.didChange = function (val, dropdown) {
      assert.deepEqual(val, [_dummyTestsIntegrationComponentsConstants.countries[2]], 'The selected item was unselected');
      _this8.set('country', val);
      assert.ok(dropdown.actions.close, 'The dropdown API is received as second argument');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'c.name', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['c'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'contries', ['loc', [null, [2, 37], [2, 45]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 55], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []], 'searchField', 'name'], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-multiple-option').length, 2, 'There is two elements selected');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'Latvia', 'The text of the seach input is two "Latvia"');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');
    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');
  });

  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\'s empty removes the last selection ALSO when that option didn\'t come from the outside', function (assert) {
    assert.expect(5);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(2)');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);
    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'three', 'The text of the seach input is three now');
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');
    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');
  });

  (0, _emberQunit.test)('If the multiple component is focused, pressing KEYDOWN opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
  });

  (0, _emberQunit.test)('If the multiple component is focused, pressing KEYUP opens it', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 38);
    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');
  });

  (0, _emberQunit.test)('The placeholder is only visible when no options are selected', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'placeholder', 'Select stuff here'], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), 'Select stuff here', 'There is a placeholder');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'The placeholder is gone');
  });

  (0, _emberQunit.test)('If the placeholder is null the placeholders shouldn\'t be "null" (issue #94)', function (assert) {
    assert.expect(3);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input does not have a placeholder');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');
  });

  (0, _emberQunit.test)('Selecting and removing should result in desired behavior', function (assert) {
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'Should add selected option');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');
    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'Should remove selected option');
  });

  (0, _emberQunit.test)('Selecting and removing can also be done with touch events', function (assert) {
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');
    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'Should add selected option');
    _ember['default'].run(function () {
      var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });
      _ember['default'].$('.ember-power-select-multiple-remove-btn')[0].dispatchEvent(event);
    });
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');
    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'Should remove selected option');
  });

  (0, _emberQunit.test)('Typing in the input opens the component and filters the options', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('fo');
    assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results filtered');
  });

  (0, _emberQunit.test)('Typing in the input opens the component and filters the options also with async searches', function (assert) {
    assert.expect(1);

    this.search = function (term) {
      return new RSVP.Promise(function (resolve) {
        _ember['default'].run.later(function () {
          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {
            return str.indexOf(term) > -1;
          }));
        }, 100);
      });
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 38], [2, 41]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 64], [2, 67]]]]], [], ['loc', [null, [2, 59], [2, 68]]]]], [], ['loc', [null, [2, 51], [2, 69]]]], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [2, 85], [2, 91]]]]], [], ['loc', [null, [2, 77], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('fo');
    var done = assert.async();

    setTimeout(function () {
      assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results filtered');
      done();
    }, 150);
  });

  (0, _emberQunit.test)('The search term is yielded as second argument in multiple selects', function (assert) {
    assert.expect(2);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(':');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['content', 'term', ['loc', [null, [3, 6], [3, 14]]]], ['content', 'option', ['loc', [null, [3, 15], [3, 25]]]]],
          locals: ['option', 'term'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'tw:two');
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('thr');
    assert.ok(/thr:two/.test($('.ember-power-select-trigger').text().trim()), 'The trigger also receives the search term');
  });

  (0, _emberQunit.test)('The search input is cleared when the component is closed', function (assert) {
    var _this9 = this;

    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type', 'multiple-nodes']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createElement('div');
          dom.setAttribute(el1, 'id', 'other-thing');
          var el2 = dom.createTextNode('Other div');
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'asjdnah');
    _ember['default'].run(function () {
      var event = new window.Event('mousedown');
      _this9.$('#other-thing')[0].dispatchEvent(event);
    });
    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), '');
  });

  (0, _emberQunit.test)('When hitting ENTER after a search with no results, the component is closed but the onchange function is not invoked', function (assert) {
    assert.expect(3);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleChange = function () {
      assert.ok(false, 'The handle change should not be called');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'handleChange', ['loc', [null, [2, 75], [2, 87]]]]], [], ['loc', [null, [2, 67], [2, 88]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);
    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');
    assert.ok(this.$('.ember-power-select-trigger-multiple-input')[0] === document.activeElement, 'The input is focused');
  });

  (0, _emberQunit.test)('The trigger of multiple selects have a special class to distinguish them from regular ones, even if you pass them another one', function (assert) {
    assert.expect(2);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'triggerClass', 'foobar-trigger', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 84], [2, 87]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 110], [2, 113]]]]], [], ['loc', [null, [2, 105], [2, 114]]]]], [], ['loc', [null, [2, 97], [2, 115]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.ok(this.$('.ember-power-select-trigger').hasClass('ember-power-select-multiple-trigger'), 'The trigger has the default class');
    assert.ok(this.$('.ember-power-select-trigger').hasClass('foobar-trigger'), 'The trigger has the given class');
  });

  (0, _emberQunit.test)('The component works when the array of selected elements is mutated in place instead of replaced', function (assert) {
    var _this10 = this;

    assert.expect(1);
    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.selected = _ember['default'].A();
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    _ember['default'].run(function () {
      return _this10.get('selected').pushObject(_dummyTestsIntegrationComponentsConstants.numbers[3]);
    });
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');
    assert.equal(this.$('.ember-power-select-multiple-option').length, 2, 'Two elements are selected');
  });

  (0, _emberQunit.test)('When the input inside the multiple select gets focused the entire component gains the `ember-basic-dropdown--focus-inside` class', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.ok(!this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select doesn\'t have the class yet');
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select has the class now');
  });
});
define('dummy/tests/integration/components/power-select/multiple-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/multiple-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/multiple-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/opened-property-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (The opened property)', {
    integration: true
  });

  (0, _emberQunit.test)('the select can be rendered already opened by passing `initiallyOpened=true`', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'initiallyOpened', true], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is opened');
  });
});
define('dummy/tests/integration/components/power-select/opened-property-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/opened-property-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/opened-property-test.js should pass jshint.');
  });
});
define('dummy/tests/integration/components/power-select/public-actions-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {

  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Public actions)', {
    integration: true
  });

  (0, _emberQunit.test)('The search action of single selects action receives the search term and the public API', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleSearch = function (term, select) {
      assert.equal(term, 'el', 'The search term is received as 1st argument');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 84], [2, 96]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');
  });

  (0, _emberQunit.test)('The search action of multiple selects action receives the search term and the public API', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleSearch = function (term, select) {
      assert.equal(term, 'el', 'The search term is received as 1st argument');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 93], [2, 105]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');
  });

  (0, _emberQunit.test)('The onchange of single selects action receives the selection and the public API', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleChange = function (selected, select) {
      assert.equal(selected, 'one', 'The first option is the selected');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'handleChange', ['loc', [null, [2, 58], [2, 70]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');
  });

  (0, _emberQunit.test)('The onchange of multiple selects action receives the selection and the public API', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleChange = function (selected, select) {
      assert.equal(selected, 'one', 'The first option is the selected');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'handleChange', ['loc', [null, [2, 67], [2, 79]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');
  });

  (0, _emberQunit.test)('The onkeydown of single selects action receives the public API and the keydown event', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.onKeyDown = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 59], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);
  });

  (0, _emberQunit.test)('The onkeydown can be used to easily allow to select on tab', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.onKeyDown = function (select, e) {
      if (e.keyCode === 9) {
        select.actions.select(select.highlighted);
        select.actions.close();
      }
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 59], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 9);
    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'three', 'The highlighted options has been selected');
    assert.equal($('.ember-power-select-options').length, 0, 'The select is closed');
  });

  (0, _emberQunit.test)('The onkeydown of multiple selects action receives the public API and the keydown event', function (assert) {
    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.onKeyDown = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 68], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);
  });

  (0, _emberQunit.test)('The onfocus of single selects action receives the public API and the focus event', function (assert) {
    var _this = this;

    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleFocus = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onfocus', ['subexpr', '@mut', [['get', 'handleFocus', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return _this.$('.ember-power-select-trigger').focus();
    });
  });

  (0, _emberQunit.test)('The onfocus of multiple selects action receives the public API and the focus event', function (assert) {
    var _this2 = this;

    assert.expect(10);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleFocus = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onfocus', ['subexpr', '@mut', [['get', 'handleFocus', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    _ember['default'].run(function () {
      return _this2.$('.ember-power-select-trigger').focus();
    });
  });

  (0, _emberQunit.test)('the `onopen` action is invoked when the dropdown opens', function (assert) {
    assert.expect(11);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleOpen = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 71], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is opened');
  });

  (0, _emberQunit.test)('the `onclose` action is invoked when the dropdown closes', function (assert) {
    assert.expect(12);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleClose = function (select, e) {
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.equal(typeof select.actions.choose, 'function', 'select.actions.choose is a function');
      assert.ok(e instanceof window.Event, 'The second argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onclose', ['subexpr', '@mut', [['get', 'handleClose', ['loc', [null, [2, 72], [2, 83]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is closed');
  });

  (0, _emberQunit.test)('the `oninput` action is invoked when the user modifies the text of the search input on single selects, and the search happens', function (assert) {
    assert.expect(15);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleInput = function (value, select, e) {
      assert.equal(value, 'tw', 'The first argument is the value of the input');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(select.searchText, '', 'select.searchText is still empty');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The third argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'two');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'twelve');
    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'twenty');
  });

  (0, _emberQunit.test)('the `oninput` action is invoked when the user modifies the text of the search input on multiple selects, and the search happens', function (assert) {
    assert.expect(15);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleInput = function (value, select, e) {
      assert.equal(value, 'tw', 'The first argument is the value of the input');
      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');
      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');
      assert.equal(select.searchText, '', 'select.searchText is still empty');
      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');
      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');
      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');
      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');
      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');
      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');
      assert.ok(e instanceof window.Event, 'The third argument is an event');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'two');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'twelve');
    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'twenty');
  });

  (0, _emberQunit.test)('if the `oninput` action of single selects returns false the search is cancelled', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleInput = function () /*value, select, e*/{
      return false;
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option').length, 20, 'There is the same options than before');
  });

  (0, _emberQunit.test)('if `oninput` action of multiple selects returns false the search is cancelled', function (assert) {
    assert.expect(1);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleInput = function () /*value, select, e*/{
      return false;
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');
    assert.equal($('.ember-power-select-option').length, 20, 'There is the same options than before');
  });

  (0, _emberQunit.test)('the `search` action of the public api passed to the public actions works as expected', function (assert) {
    assert.expect(6);

    this.handleSearch = function (term) {
      assert.equal(term, 'abc', 'The search term receives `abc`');
      return ['foo', 'bar', 'baz'];
    };
    this.handleOpen = function (select) {
      select.actions.search('abc');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 42], [2, 45]]]]], [], ['loc', [null, [2, 37], [2, 46]]]]], [], ['loc', [null, [2, 29], [2, 47]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 55], [2, 65]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 73], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-search input')[0].value, 'abc');
    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');
    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'foo');
    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'bar');
    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'baz');
  });

  (0, _emberQunit.test)('the `highlight` action of the public api passed to the public actions works as expected', function (assert) {
    assert.expect(2);
    this.options = ['foo', 'bar', 'baz'];
    this.handleOpen = function (select) {
      select.actions.highlight('baz');
    };
    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['option'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 71], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));
    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');
    assert.equal($('.ember-power-select-option[aria-current="true"]').text().trim(), 'baz', 'The third option is highlighted');
  });

  (0, _emberQunit.test)('The programmer can use the received public API to perform searches in single selects', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.initSearch = function (select) {
      assert.ok(true, 'The onopen action is fired');
      select.actions.search('hello');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onopen', ['subexpr', '@mut', [['get', 'initSearch', ['loc', [null, [2, 56], [2, 66]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 89], [2, 92]]]]], [], ['loc', [null, [2, 84], [2, 93]]]]], [], ['loc', [null, [2, 76], [2, 94]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-search input')[0].value, 'hello', 'The search text contains the searched string');
  });

  (0, _emberQunit.test)('The programmer can use the received public API to perform searches in mutiple selects', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.initSearch = function (select) {
      assert.ok(true, 'The onopen action is fired');
      select.actions.search('hello');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onopen', ['subexpr', '@mut', [['get', 'initSearch', ['loc', [null, [2, 65], [2, 75]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 98], [2, 101]]]]], [], ['loc', [null, [2, 93], [2, 102]]]]], [], ['loc', [null, [2, 85], [2, 103]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    assert.equal($('.ember-power-select-trigger-multiple-input')[0].value, 'hello', 'The search text contains the searched string');
  });

  (0, _emberQunit.test)('The search action of multiple selects has the searchText set to the up-to-date value', function (assert) {
    assert.expect(2);

    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;
    this.handleSearch = function (term, select) {
      assert.equal(term, 'el', 'The search term is received as 1st argument');
      assert.equal(select.searchText, 'el', 'the public API object has the searchText up to date');
    };

    this.render(_ember['default'].HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'fragmentReason': false,
            'revision': 'Ember@2.4.1',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],
          locals: ['number'],
          templates: []
        };
      })();

      return {
        meta: {
          'fragmentReason': {
            'name': 'missing-wrapper',
            'problems': ['wrong-type']
          },
          'revision': 'Ember@2.4.1',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 93], [2, 105]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();
    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');
  });
});
define('dummy/tests/integration/components/power-select/public-actions-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - integration/components/power-select/public-actions-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/power-select/public-actions-test.js should pass jshint.');
  });
});
define('dummy/tests/models/user.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - models/user.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'models/user.js should pass jshint.');
  });
});
define('dummy/tests/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'resolver.js should pass jshint.');
  });
});
define('dummy/tests/router.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - router.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'router.js should pass jshint.');
  });
});
define('dummy/tests/routes/legacy-demo.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - routes/legacy-demo.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'routes/legacy-demo.js should pass jshint.');
  });
});
define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {

  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);
});
define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - test-helper.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass jshint.');
  });
});
define('dummy/tests/unit/utils/group-utils-test', ['exports', 'ember-power-select/utils/group-utils', 'qunit'], function (exports, _emberPowerSelectUtilsGroupUtils, _qunit) {

  var groupedOptions = [{ groupName: "Smalls", options: ["zero", "one", "two", "three"] }, { groupName: "Mediums", options: ["four", "five", "six"] }, { groupName: "Bigs", options: [{ groupName: "Fairly big", options: ["seven", "eight", "nine"] }, { groupName: "Really big", options: ["ten", "eleven", "twelve"] }, "thirteen"]
  }, "one hundred", "one thousand"];
  var basicOptions = ['zero', 'one', 'two', 'three', 'four', 'five'];

  (0, _qunit.module)('Unit | Utility | Group utils');

  (0, _qunit.test)('#isGroup returns true when the given options has `groupName` and `options`', function (assert) {
    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({}));
    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ id: 1, text: 'hello' }));
    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ groupName: 1, noOptions: 'hello' }));
    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ other: 1, options: ['a', 'b'] }));
    assert.ok((0, _emberPowerSelectUtilsGroupUtils.isGroup)({ groupName: 1, options: ['a', 'b'] }));
  });

  (0, _qunit.test)('#indexOfOption returns the index of an option among all', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'zero'), 0);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'five'), 5);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'six'), -1);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, null), -1);
  });

  (0, _qunit.test)('#indexOfOption also works transversing groups', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'zero'), 0);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'six'), 6);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'seven'), 7);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'twelve'), 12);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'thirteen'), 13);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'one thousand'), 15);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, null), -1);
  });

  (0, _qunit.test)('#optionAtIndex returns the option in that index is present, null othewise', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 0), 'zero');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 5), 'five');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 7), null);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, -1), null); // Should this return the last??
  });

  (0, _qunit.test)('#optionAtIndex knows how to transverse groups', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 0), 'zero');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 6), 'six');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 7), 'seven');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 12), 'twelve');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 13), 'thirteen');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 15), 'one thousand');
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 16), undefined);
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, -1), undefined);
  });

  (0, _qunit.test)('#filterOptions generates new options respecting groups when the matches returns a boolean', function (assert) {
    var matcher = function matcher(value, searchText) {
      return new RegExp(searchText, 'i').test(value) ? 0 : -1;
    };
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'zero', matcher), [{ groupName: "Smalls", options: ["zero"] }]);
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'ele', matcher), [{ groupName: "Bigs", options: [{ groupName: "Really big", options: ["eleven"] }]
    }]);
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 't', matcher), [{ groupName: "Smalls", options: ["two", "three"] }, { groupName: "Bigs", options: [{ groupName: "Fairly big", options: ["eight"] }, { groupName: "Really big", options: ["ten", "twelve"] }, "thirteen"]
    }, "one thousand"]);

    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'imposible', matcher), []);
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, '', matcher), groupedOptions);
  });

  (0, _qunit.test)('#filterOptions generates new options respecting groups when the matches returns a number, taking negative numbers as "not found" and positive as matches', function (assert) {
    var matcher = function matcher(value, searchText) {
      return value.indexOf(searchText);
    };
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'zero', matcher), [{ groupName: "Smalls", options: ["zero"] }]);
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'ele', matcher), [{ groupName: "Bigs", options: [{ groupName: "Really big", options: ["eleven"] }]
    }]);
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 't', matcher), [{ groupName: "Smalls", options: ["two", "three"] }, { groupName: "Bigs", options: [{ groupName: "Fairly big", options: ["eight"] }, { groupName: "Really big", options: ["ten", "twelve"] }, "thirteen"]
    }, "one thousand"]);

    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'imposible', matcher), [], 'when nothing matches, an empty array is returned');
    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, '', matcher), groupedOptions, 'when all matches, all options ');
  });

  (0, _qunit.test)('#stripDiacritics returns the given string with diacritics normalized into simple letters', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.stripDiacritics)("áãàéèíìóõøòúùñ"), "aaaeeiioooouun");
  });

  (0, _qunit.test)('#stripDiacritics is able to handle integers', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.stripDiacritics)(1), "1");
  });

  (0, _qunit.test)('#countOptions returns the number of options, transversing the groups with no depth level', function (assert) {
    assert.equal((0, _emberPowerSelectUtilsGroupUtils.countOptions)(groupedOptions), 16);
  });
});
define('dummy/tests/unit/utils/group-utils-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - unit/utils/group-utils-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/group-utils-test.js should pass jshint.');
  });
});
/* jshint ignore:start */

require('dummy/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;

/* jshint ignore:end */
//# sourceMappingURL=tests.map