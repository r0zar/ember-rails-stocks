{"version":3,"sources":["dummy/tests/acceptance/all-public-pages-test.js","dummy/tests/acceptance/all-public-pages-test.jshint.js","dummy/tests/acceptance/helpers-test.js","dummy/tests/acceptance/helpers-test.jshint.js","dummy/tests/app.jshint.js","dummy/tests/blanket-options.js","dummy/tests/blanket-options.jshint.js","dummy/tests/components/animated-options.jshint.js","dummy/tests/components/code-sample.jshint.js","dummy/tests/components/navigable-select.jshint.js","dummy/tests/controllers/fastboot-test.jshint.js","dummy/tests/controllers/helpers-testing.jshint.js","dummy/tests/controllers/legacy-demo.jshint.js","dummy/tests/controllers/public-pages/cookbook/bootstrap-theme.jshint.js","dummy/tests/controllers/public-pages/cookbook/create-custom-options.jshint.js","dummy/tests/controllers/public-pages/cookbook/css-animations.jshint.js","dummy/tests/controllers/public-pages/cookbook/debounce-searches.jshint.js","dummy/tests/controllers/public-pages/cookbook/index.jshint.js","dummy/tests/controllers/public-pages/cookbook/navigable-select.jshint.js","dummy/tests/controllers/public-pages/cookbook.jshint.js","dummy/tests/controllers/public-pages/docs/action-handling.jshint.js","dummy/tests/controllers/public-pages/docs/custom-search-action.jshint.js","dummy/tests/controllers/public-pages/docs/disable-things.jshint.js","dummy/tests/controllers/public-pages/docs/groups.jshint.js","dummy/tests/controllers/public-pages/docs/how-to-use-it.jshint.js","dummy/tests/controllers/public-pages/docs/multiple-selection.jshint.js","dummy/tests/controllers/public-pages/docs/the-list.jshint.js","dummy/tests/controllers/public-pages/docs/the-search.jshint.js","dummy/tests/controllers/public-pages/docs/the-trigger.jshint.js","dummy/tests/controllers/public-pages/docs.jshint.js","dummy/tests/controllers/public-pages.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/ember-basic-dropdown.js","dummy/tests/helpers/ember-power-select.js","dummy/tests/helpers/highlight-substr.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/constants.js","dummy/tests/integration/components/constants.jshint.js","dummy/tests/integration/components/power-select/a11y-test.js","dummy/tests/integration/components/power-select/a11y-test.jshint.js","dummy/tests/integration/components/power-select/assertions-and-deprecations-test.js","dummy/tests/integration/components/power-select/assertions-and-deprecations-test.jshint.js","dummy/tests/integration/components/power-select/check-horizontal-position-test.js","dummy/tests/integration/components/power-select/check-horizontal-position-test.jshint.js","dummy/tests/integration/components/power-select/custom-search-test.js","dummy/tests/integration/components/power-select/custom-search-test.jshint.js","dummy/tests/integration/components/power-select/customization-with-classnames-test.js","dummy/tests/integration/components/power-select/customization-with-classnames-test.jshint.js","dummy/tests/integration/components/power-select/customization-with-compoments-test.js","dummy/tests/integration/components/power-select/customization-with-compoments-test.jshint.js","dummy/tests/integration/components/power-select/disabled-test.js","dummy/tests/integration/components/power-select/disabled-test.jshint.js","dummy/tests/integration/components/power-select/ember-data-test.js","dummy/tests/integration/components/power-select/ember-data-test.jshint.js","dummy/tests/integration/components/power-select/general-behaviour-test.js","dummy/tests/integration/components/power-select/general-behaviour-test.jshint.js","dummy/tests/integration/components/power-select/groups-test.js","dummy/tests/integration/components/power-select/groups-test.jshint.js","dummy/tests/integration/components/power-select/keyboard-control-test.js","dummy/tests/integration/components/power-select/keyboard-control-test.jshint.js","dummy/tests/integration/components/power-select/mouse-control-test.js","dummy/tests/integration/components/power-select/mouse-control-test.jshint.js","dummy/tests/integration/components/power-select/multiple-test.js","dummy/tests/integration/components/power-select/multiple-test.jshint.js","dummy/tests/integration/components/power-select/opened-property-test.js","dummy/tests/integration/components/power-select/opened-property-test.jshint.js","dummy/tests/integration/components/power-select/public-actions-test.js","dummy/tests/integration/components/power-select/public-actions-test.jshint.js","dummy/tests/models/user.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/legacy-demo.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/utils/group-utils-test.js","dummy/tests/unit/utils/group-utils-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/acceptance/all-public-pages-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance', 'ember'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance, _ember) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | All Public Pages');\n\n  (0, _qunit.test)('visit every Docs page in order', function (assert) {\n    var expectedPages = 15;\n    return keepClickingNext('/docs', '.doc-page-nav-link-next').then(function (urls) {\n      assert.equal(urls.length, expectedPages);\n    });\n  });\n\n  (0, _qunit.test)('visit every Cookbook page in order', function (assert) {\n    var expectedPages = 6;\n    return keepClickingNext('/cookbook', '.doc-page-nav-link-next').then(function (urls) {\n      assert.equal(urls.length, expectedPages);\n    });\n  });\n\n  (0, _qunit.test)('visit /addons', function (assert) {\n    visit('/addons');\n    andThen(function () {\n      assert.equal('/addons', currentURL());\n    });\n  });\n\n  function keepClickingNext(initialUrl, nextLinkSelector) {\n    var seenURLs = Object.create(null);\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      visit(initialUrl);\n      andThen(function () {\n        visitNextPage();\n      });\n      function visitNextPage() {\n        andThen(function () {\n          if (seenURLs[currentURL()]) {\n            throw new Error(\"page visitor detected a loop\");\n          }\n          seenURLs[currentURL()] = true;\n          var nextLink = find(nextLinkSelector);\n          if (nextLink.length === 0) {\n            resolve(Object.keys(seenURLs));\n          } else {\n            click(nextLinkSelector);\n            visitNextPage();\n          }\n        });\n      }\n    });\n  }\n});","define('dummy/tests/acceptance/all-public-pages-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/all-public-pages-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/all-public-pages-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/helpers-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | helpers | selectChoose');\n\n  (0, _qunit.test)('selectChoose helper opens the select and selects the option with the given text', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      selectChoose('.select-choose', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.select-choose .ember-power-select-trigger').text().trim(), 'three', 'The proper value has been selected');\n      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');\n      assert.equal(find('.select-choose-target').text().trim(), 'You\\'ve selected: three');\n    });\n  });\n\n  (0, _qunit.test)('selectChoose selects the option with the given text on an already opened select', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      click('.select-choose .ember-power-select-trigger');\n    });\n\n    andThen(function () {\n      selectChoose('.select-choose', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.select-choose .ember-power-select-trigger').text().trim(), 'three', 'The proper value has been selected');\n      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');\n      assert.equal(find('.select-choose-target').text().trim(), 'You\\'ve selected: three');\n    });\n  });\n\n  (0, _qunit.test)('the selectChoose helper works with an onopen function that fetches data async on single selects', function (assert) {\n    visit('/helpers-testing');\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      selectChoose('.select-choose-onopen', 'three');\n    });\n    andThen(function () {\n      assert.equal(find('.select-choose-onopen .ember-power-select-trigger').text().trim().split(' ')[0].trim(), 'three', 'The proper value has been selected');\n      assert.equal($('.ember-power-select-options').length, 0, 'The select is closed');\n      assert.equal(find('.select-choose-target').text().trim(), 'You\\'ve selected: three');\n    });\n  });\n\n  (0, _qunit.test)('the selectChoose helper works with an onopen function that fetches data async on multiple selects', function (assert) {\n    visit('/helpers-testing');\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      selectChoose('.select-choose-onopen-multiple', 'three');\n    });\n    andThen(function () {\n      assert.equal(find('.select-choose-onopen-multiple .ember-power-select-multiple-option').length, 1, 'One options has been selected');\n      assert.ok(/three/.test(find('.select-choose-onopen-multiple .ember-power-select-multiple-option:eq(0)').text().trim()), 'The proper value has been selected');\n      assert.equal($('.ember-power-select-options').length, 0, 'The selectis closed');\n    });\n  });\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | helpers | selectSearch');\n\n  (0, _qunit.test)('selectSearch helper searches in the given single select if it is already opened', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      click('.select-async .ember-power-select-trigger');\n      selectSearch('.select-async', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.ember-power-select-options').text().trim(), 'three');\n    });\n  });\n\n  (0, _qunit.test)('selectSearch helper searches in the given single select, opening it if needed', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      selectSearch('.select-async', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.ember-power-select-options').text().trim(), 'three');\n    });\n  });\n\n  (0, _qunit.test)('selectSearch helper searches in the given multiple select opened', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      click('.select-multiple .ember-power-select-trigger');\n      selectSearch('.select-multiple', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.ember-power-select-options').text().trim(), 'three');\n    });\n  });\n\n  (0, _qunit.test)('selectSearch helper searches in the given multiple select closed', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/helpers-testing');\n      selectSearch('.select-multiple', 'three');\n    });\n\n    andThen(function () {\n      assert.equal(find('.ember-power-select-options').text().trim(), 'three');\n    });\n  });\n\n  (0, _qunit.test)('removeMultipleOption removes selected option', function (assert) {\n    visit('/helpers-testing');\n\n    selectChoose('.select-choose-onopen-multiple', 'three');\n    selectChoose('.select-choose-onopen-multiple', 'four');\n    andThen(function () {\n      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 2, 'Multiple options selected');\n    });\n\n    removeMultipleOption('.select-choose-onopen-multiple', 'three');\n    andThen(function () {\n      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 1, 'One option removed');\n    });\n\n    removeMultipleOption('.select-choose-onopen-multiple', 'four');\n    andThen(function () {\n      assert.equal(find('.select-choose-onopen-multiple > .ember-power-select-trigger > .ember-power-select-multiple-options > li').length, 0, 'Last option removed');\n    });\n  });\n\n  (0, _qunit.test)('clearSelected removes selected option', function (assert) {\n    visit('/helpers-testing');\n\n    andThen(function () {\n      assert.notOk(find('.select-choose-onopen .ember-power-select-clear-btn').text());\n    });\n\n    selectChoose('.select-choose-onopen', 'three');\n    andThen(function () {\n      assert.ok(find('.select-choose-onopen .ember-power-select-clear-btn').text());\n      assert.ok(find('.select-choose-onopen .ember-power-select-selected-item').text(), 'three', 'The proper value has been selected');\n    });\n\n    clearSelected('.select-choose-onopen', 'three');\n    andThen(function () {\n      assert.notOk(find('.select-choose-onopen .ember-power-select-clear-btn').text());\n    });\n  });\n});","define('dummy/tests/acceptance/helpers-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/helpers-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/helpers-test.js should pass jshint.');\n  });\n});","define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/blanket-options', ['exports'], function (exports) {\n  /* globals blanket, module */\n\n  var options = {\n    modulePrefix: 'ember-power-select',\n    filter: '//.*ember-power-select/.*/',\n    antifilter: '//.*(tests|template).*/',\n    loaderExclusions: [],\n    enableCoverage: true,\n    cliOptions: {\n      reporters: ['json'],\n      autostart: true\n    }\n  };\n  if (typeof exports === 'undefined') {\n    blanket.options(options);\n  } else {\n    module.exports = options;\n  }\n});","define('dummy/tests/blanket-options.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - blanket-options.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'blanket-options.js should pass jshint.');\n  });\n});","define('dummy/tests/components/animated-options.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/animated-options.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/animated-options.js should pass jshint.');\n  });\n});","define('dummy/tests/components/code-sample.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/code-sample.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/code-sample.js should pass jshint.');\n  });\n});","define('dummy/tests/components/navigable-select.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/navigable-select.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/navigable-select.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/fastboot-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/fastboot-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/fastboot-test.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/helpers-testing.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/helpers-testing.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/helpers-testing.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/legacy-demo.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/legacy-demo.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/legacy-demo.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/bootstrap-theme.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/bootstrap-theme.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/bootstrap-theme.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/create-custom-options.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/create-custom-options.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/create-custom-options.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/css-animations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/css-animations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/css-animations.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/debounce-searches.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/debounce-searches.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/debounce-searches.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/index.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook/navigable-select.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook/navigable-select.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook/navigable-select.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/cookbook.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/cookbook.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/cookbook.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/action-handling.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/action-handling.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/action-handling.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/custom-search-action.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/custom-search-action.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/custom-search-action.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/disable-things.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/disable-things.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/disable-things.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/groups.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/groups.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/groups.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/how-to-use-it.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/how-to-use-it.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/how-to-use-it.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/multiple-selection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/multiple-selection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/multiple-selection.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/the-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/the-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/the-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/the-search.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/the-search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/the-search.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs/the-trigger.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs/the-trigger.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs/the-trigger.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages/docs.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages/docs.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages/docs.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/public-pages.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/public-pages.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/public-pages.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-basic-dropdown', ['exports'], function (exports) {\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(event);\n    });\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchEndEvent);\n    });\n  }\n});","define('dummy/tests/helpers/ember-power-select', ['exports', 'ember'], function (exports, _ember) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = $(selector);\n    $selector.val(text);\n    var event = document.createEvent(\"Events\");\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = _ember['default'].$(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    _ember['default'].run(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent(\"Events\");\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    _ember['default'].run(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    _ember['default'].run(function () {\n      typeText('.ember-power-select-search input, .ember-power-select-trigger-multiple-input', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    var isEmberOne = _ember['default'].VERSION.match(/1\\.13/);\n\n    _ember['default'].Test.registerAsyncHelper('selectChoose', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      // If the dropdown is closed, open it\n      if (_ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = $('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-option:contains(\"' + value + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length > 1) {\n          target = potentialTargets.find(function (t) {\n            return t.textContent.trim() === value;\n          }) || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _ember['default'].Test.registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      var isMultipleSelect = _ember['default'].$(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = _ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n\n      if (isMultipleSelect) {\n        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);\n        if (isEmberOne) {\n          triggerEvent(cssPath + ' .ember-power-select-trigger-multiple-input', 'input');\n        }\n      } else {\n        fillIn('.ember-power-select-search input', value);\n        if (isEmberOne) {\n          triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search input', 'input');\n        }\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn')[0];\n      try {\n        nativeMouseDown(elem);\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('clearSelected', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn')[0];\n      try {\n        nativeMouseDown(elem);\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('dummy/tests/helpers/highlight-substr.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/highlight-substr.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/highlight-substr.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment', 'dummy/tests/helpers/ember-power-select'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment, _dummyTestsHelpersEmberPowerSelect) {\n  exports['default'] = startApp;\n\n  (0, _dummyTestsHelpersEmberPowerSelect['default'])();\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/constants', ['exports'], function (exports) {\n  var numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'];\n\n  exports.numbers = numbers;\n  var names = [\"María\", \"Søren Larsen\", \"João\", \"Miguel\", \"Marta\", \"Lisa\"];\n\n  exports.names = names;\n  var countries = [{ name: 'United States', code: 'US', population: 321853000 }, { name: 'Spain', code: 'ES', population: 46439864 }, { name: 'Portugal', code: 'PT', population: 10374822 }, { name: 'Russia', code: 'RU', population: 146588880 }, { name: 'Latvia', code: 'LV', population: 1978300 }, { name: 'Brazil', code: 'BR', population: 204921000 }, { name: 'United Kingdom', code: 'GB', population: 64596752 }];\n\n  exports.countries = countries;\n  var countriesWithDisabled = [{ name: 'United States', code: 'US', population: 321853000 }, { name: 'Spain', code: 'ES', population: 46439864 }, { name: 'Portugal', code: 'PT', population: 10374822, disabled: true }, { name: 'Russia', code: 'RU', population: 146588880, disabled: true }, { name: 'Latvia', code: 'LV', population: 1978300 }, { name: 'Brazil', code: 'BR', population: 204921000, disabled: true }, { name: 'United Kingdom', code: 'GB', population: 64596752 }];\n\n  exports.countriesWithDisabled = countriesWithDisabled;\n  var groupedNumbers = [{ groupName: \"Smalls\", options: [\"one\", \"two\", \"three\"] }, { groupName: \"Mediums\", options: [\"four\", \"five\", \"six\"] }, { groupName: \"Bigs\", options: [{ groupName: \"Fairly big\", options: [\"seven\", \"eight\", \"nine\"] }, { groupName: \"Really big\", options: [\"ten\", \"eleven\", \"twelve\"] }, \"thirteen\"]\n  }, \"one hundred\", \"one thousand\"];\n  exports.groupedNumbers = groupedNumbers;\n});","define('dummy/tests/integration/components/constants.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/constants.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/constants.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/a11y-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants', 'dummy/tests/helpers/ember-power-select'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants, _dummyTestsHelpersEmberPowerSelect) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Accesibility)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Single-select: The top-level options list have `role=listbox` and nested lists have `role=group`', function (assert) {\n    assert.expect(2);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $rootLevelOptionsList = $('.ember-power-select-dropdown > .ember-power-select-options');\n    assert.equal($rootLevelOptionsList.attr('role'), 'listbox', 'The top-level list has `role=listbox`');\n    var $nestedOptionList = $('.ember-power-select-options .ember-power-select-options');\n    assert.ok($nestedOptionList.toArray().every(function (l) {\n      return l.attributes.role.value === 'group';\n    }), 'All the nested lists have `role=group`');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The top-level options list have `role=listbox` and nested lists have `role=group`', function (assert) {\n    assert.expect(2);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 37], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $rootLevelOptionsList = $('.ember-power-select-dropdown > .ember-power-select-options');\n    assert.equal($rootLevelOptionsList.attr('role'), 'listbox', 'The top-level list has `role=listbox`');\n    var $nestedOptionList = $('.ember-power-select-options .ember-power-select-options');\n    assert.ok($nestedOptionList.toArray().every(function (l) {\n      return l.attributes.role.value === 'group';\n    }), 'All the nested lists have `role=group`');\n  });\n\n  (0, _emberQunit.test)('Single-select: All options have `role=option`', function (assert) {\n    assert.expect(1);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok($('.ember-power-select-option').toArray().every(function (l) {\n      return l.attributes.role.value === 'option';\n    }), 'All the options have `role=option`');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: All options have `role=option`', function (assert) {\n    assert.expect(1);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok($('.ember-power-select-option').toArray().every(function (l) {\n      return l.attributes.role.value === 'option';\n    }), 'All the options have `role=option`');\n  });\n\n  (0, _emberQunit.test)('Single-select: The selected option has `aria-selected=true` and the rest `aria-selected=false`', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = \"two\";\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:contains(\"two\")').attr('aria-selected'), 'true', 'the selected option has aria-selected=true');\n    assert.equal($('.ember-power-select-option[aria-selected=\"false\"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-selected=false');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The selected options have `aria-selected=true` and the rest `aria-selected=false`', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = ['two', 'four'];\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:contains(\"two\")').attr('aria-selected'), 'true', 'the first selected option has aria-selected=true');\n    assert.equal($('.ember-power-select-option:contains(\"four\")').attr('aria-selected'), 'true', 'the second selected option has aria-selected=true');\n    assert.equal($('.ember-power-select-option[aria-selected=\"false\"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 2, 'All other options have aria-selected=false');\n  });\n\n  (0, _emberQunit.test)('Single-select: The highlighted option has `aria-current=true` and the rest `aria-current=false`', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:contains(\"one\")').attr('aria-current'), 'true', 'the highlighted option has aria-current=true');\n    assert.equal($('.ember-power-select-option[aria-current=\"false\"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-current=false');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option:contains(\"one\")').attr('aria-current'), 'false', 'the first option has now aria-current=false');\n    assert.equal($('.ember-power-select-option:contains(\"two\")').attr('aria-current'), 'true', 'the second option has now aria-current=false');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The highlighted option has `aria-current=true` and the rest `aria-current=false`', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:contains(\"one\")').attr('aria-current'), 'true', 'the highlighted option has aria-current=true');\n    assert.equal($('.ember-power-select-option[aria-current=\"false\"]').length, _dummyTestsIntegrationComponentsConstants.numbers.length - 1, 'All other options have aria-current=false');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option:contains(\"one\")').attr('aria-current'), 'false', 'the first option has now aria-current=false');\n    assert.equal($('.ember-power-select-option:contains(\"two\")').attr('aria-current'), 'true', 'the second option has now aria-current=false');\n  });\n\n  (0, _emberQunit.test)('Single-select: Options with a disabled field have `aria-disabled=true`', function (assert) {\n    assert.expect(1);\n\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-disabled=true]').length, 3, 'Three of them are disabled');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: Options with a disabled field have `aria-disabled=true`', function (assert) {\n    assert.expect(1);\n\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 37], [2, 58]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 81], [2, 84]]]]], [], ['loc', [null, [2, 76], [2, 85]]]]], [], ['loc', [null, [2, 68], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-disabled=true]').length, 3, 'Three of them are disabled');\n  });\n\n  (0, _emberQunit.test)('Single-select: The trigger has `role=button`, `aria-haspopup=true` and `aria-controls=<id-of-dropdown>`', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-trigger').attr('role'), 'button', 'The trigger has role button');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-haspopup'), 'true', 'aria-haspopup is true');\n    assert.ok(/^ember-basic-dropdown-content-ember\\d+$/.test(this.$('.ember-power-select-trigger').attr('aria-controls')), 'aria-controls point to the dropdown');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The trigger has `role=button`, `aria-haspopup=true` and `aria-controls=<id-of-dropdown>`', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-trigger').attr('role'), 'button', 'The trigger has role button');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-haspopup'), 'true', 'aria-haspopup is true');\n    assert.ok(/^ember-basic-dropdown-content-ember\\d+$/.test(this.$('.ember-power-select-trigger').attr('aria-controls')), 'aria-controls point to the dropdown');\n  });\n\n  (0, _emberQunit.test)('Single-select: The trigger attributes `aria-expanded` and `aria-pressed` that are true when the dropdown is opened', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'false', 'Not expanded');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'false', 'Not pressed');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'true', 'Not expanded');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'true', 'Not pressed');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The trigger attributes `aria-expanded` and `aria-pressed` that are true when the dropdown is opened', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'false', 'Not expanded');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'false', 'Not pressed');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-expanded'), 'true', 'Not expanded');\n    assert.equal(this.$('.ember-power-select-trigger').attr('aria-pressed'), 'true', 'Not pressed');\n  });\n\n  (0, _emberQunit.test)('Single-select: The listbox has a unique id`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(/^ember-power-select-options-ember\\d+$/.test($('.ember-power-select-options').attr('id')), 'The search has a unique id');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The listbox has a unique id`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(/^ember-power-select-options-ember\\d+$/.test($('.ember-power-select-options').attr('id')), 'The search has a unique id');\n  });\n\n  (0, _emberQunit.test)('Single-select: The searchbox has type `search` and `aria-controls=<id-of-listbox>`', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-search input').attr('type'), 'search', 'The type of the input is `search`');\n    assert.ok(/^ember-power-select-options-ember\\d+$/.test($('.ember-power-select-search input').attr('aria-controls')), 'The `aria-controls` points to the id of the listbox');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The searchbox has type `search` and `aria-controls=<id-of-listbox>`', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-trigger-multiple-input').attr('type'), 'search', 'The type of the input is `search`');\n    assert.ok(/^ember-power-select-options-ember\\d+$/.test($('.ember-power-select-trigger-multiple-input').attr('aria-controls')), 'The `aria-controls` points to the id of the listbox');\n  });\n\n  (0, _emberQunit.test)('Single-select: The listbox has `aria-controls=<id-of-the-trigger>`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(/^ember-power-select-trigger-ember\\d+$/.test($('.ember-power-select-options').attr('aria-controls')), 'The listbox controls the trigger');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The listbox has `aria-controls=<id-of-the-trigger>`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(/^ember-power-select-trigger-ember\\d+$/.test($('.ember-power-select-options').attr('aria-controls')), 'The listbox controls the trigger');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The selected elements are <li>s inside an <ul>, and have an item with `role=button` with `aria-label=\"remove element\"`', function (assert) {\n    assert.expect(12);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = ['two', 'four', 'six'];\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.$('.ember-power-select-multiple-option').toArray().forEach(function (e) {\n      assert.equal(e.tagName, 'LI', 'The element is a list item');\n      assert.equal(e.parentElement.tagName, 'UL', 'The parent element is a list');\n      var closeButton = e.querySelector('.ember-power-select-multiple-remove-btn');\n      assert.equal($(closeButton).attr('role'), 'button', 'The role of the close button is \"button\"');\n      assert.equal($(closeButton).attr('aria-label'), 'remove element', 'The close button has a helpful aria label');\n    });\n  });\n\n  (0, _emberQunit.test)('Single-select: The trigger element correctly passes through WAI-ARIA widget attributes', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 12,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [11, 6], [11, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 13,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['ariaInvalid', true, 'ariaLabel', 'ariaLabelString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'required', true, 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [8, 15], [8, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [12, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    var $trigger = this.$('.ember-power-select-trigger');\n\n    assert.equal($trigger.attr('aria-label'), 'ariaLabelString', 'aria-label set correctly');\n    assert.equal($trigger.attr('aria-invalid'), 'true', 'aria-invalid set correctly');\n    assert.equal($trigger.attr('aria-required'), 'true', 'aria-required set correctly');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The trigger element correctly passes through WAI-ARIA widget attributes', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 12,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [11, 6], [11, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 13,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['ariaLabel', 'ariaLabelString', 'ariaInvalid', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'required', true, 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [8, 15], [8, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [12, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    var $trigger = this.$('.ember-power-select-trigger');\n\n    assert.equal($trigger.attr('aria-label'), 'ariaLabelString', 'aria-label set correctly');\n    assert.equal($trigger.attr('aria-invalid'), 'true', 'aria-invalid set correctly');\n    assert.equal($trigger.attr('aria-required'), 'true', 'aria-required set correctly');\n  });\n\n  (0, _emberQunit.test)('Single-select: The trigger element correctly passes through WAI-ARIA relationship attributes', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 11,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [10, 6], [10, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 12,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['ariaDescribedBy', 'ariaDescribedByString', 'ariaLabelledBy', 'ariaLabelledByString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [7, 15], [7, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [11, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    var $trigger = this.$('.ember-power-select-trigger');\n\n    assert.equal($trigger.attr('aria-describedby'), 'ariaDescribedByString', 'aria-describedby set correctly');\n    assert.equal($trigger.attr('aria-labelledby'), 'ariaLabelledByString', 'aria-required set correctly');\n  });\n\n  (0, _emberQunit.test)('Multiple-select: The trigger element correctly passes through WAI-ARIA relationship attributes', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 11,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [10, 6], [10, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 12,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['ariaDescribedBy', 'ariaDescribedByString', 'ariaLabelledBy', 'ariaLabelledByString', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [5, 28], [5, 31]]]]], [], ['loc', [null, [5, 23], [5, 32]]]]], [], ['loc', [null, [5, 15], [5, 33]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [6, 14], [6, 21]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [7, 15], [7, 23]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [11, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    var $trigger = this.$('.ember-power-select-trigger');\n\n    assert.equal($trigger.attr('aria-describedby'), 'ariaDescribedByString', 'aria-describedby set correctly');\n    assert.equal($trigger.attr('aria-labelledby'), 'ariaLabelledByString', 'aria-required set correctly');\n  });\n});","define('dummy/tests/integration/components/power-select/a11y-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/a11y-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/a11y-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/assertions-and-deprecations-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Assertions & deprecations)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('the `onchange` function is mandatory', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n\n    assert.throws(function () {\n      _this.render(Ember.HTMLBars.template((function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'fragmentReason': false,\n              'revision': 'Ember@2.4.1',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 2,\n                  'column': 6\n                },\n                'end': {\n                  'line': 2,\n                  'column': 75\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n              dom.insertBoundary(fragment, 0);\n              dom.insertBoundary(fragment, null);\n              return morphs;\n            },\n            statements: [['content', 'opt', ['loc', [null, [2, 68], [2, 75]]]]],\n            locals: ['opt'],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 3,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n    ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 30], [2, 39]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 49], [2, 57]]]]], [], []]], 0, null, ['loc', [null, [2, 6], [2, 92]]]]],\n          locals: [],\n          templates: [child0]\n        };\n      })()));\n    }, /requires an `onchange` function/);\n  });\n});","define('dummy/tests/integration/components/power-select/assertions-and-deprecations-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/assertions-and-deprecations-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/assertions-and-deprecations-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/check-horizontal-position-test', ['exports', 'ember-qunit', 'dummy/tests/helpers/ember-power-select'], function (exports, _emberQunit, _dummyTestsHelpersEmberPowerSelect) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (horizontalPosition)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('check horizontal position specifying `right`', function (assert) {\n    assert.expect(2);\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['horizontalPosition', 'right', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 69], [2, 72]]]]], [], ['loc', [null, [2, 64], [2, 73]]]]], [], ['loc', [null, [2, 56], [2, 74]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-basic-dropdown--left').length, 0);\n    assert.equal($('.ember-basic-dropdown--right').length, 2);\n  });\n\n  (0, _emberQunit.test)('check horizontal position without specify any property', function (assert) {\n    assert.expect(2);\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 42], [2, 45]]]]], [], ['loc', [null, [2, 37], [2, 46]]]]], [], ['loc', [null, [2, 29], [2, 47]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-basic-dropdown--right').length, 0);\n    assert.equal($('.ember-basic-dropdown--left').length, 2);\n  });\n});","define('dummy/tests/integration/components/power-select/check-horizontal-position-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/check-horizontal-position-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/check-horizontal-position-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/custom-search-test', ['exports', 'ember', 'ember-qunit', 'ember-test-helpers/wait', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _emberTestHelpersWait, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n  var RSVP = _ember['default'].RSVP;\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Custom search function)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('When you pass a custom search action instead of options, opening the select show a \"Type to search\" message in a list element', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function () {};\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text(), 'Type to search', 'The dropdown shows the \"type to seach\" message');\n  });\n\n  (0, _emberQunit.test)('When no options are given but there is a search action, a \"type to search\" message is rendered', function (assert) {\n    assert.expect(2);\n\n    this.searchFn = function () {};\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text(), 'Type to search');\n    assert.ok($('.ember-power-select-option').hasClass('ember-power-select-option--search-message'), 'The option with the search message has a special class');\n  });\n\n  (0, _emberQunit.test)('The \"type to search\" message can be customized passing `searchMessage=something`', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function () {};\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'searchMessage', 'Type the name of the thing', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 101], [2, 104]]]]], [], ['loc', [null, [2, 96], [2, 105]]]]], [], ['loc', [null, [2, 88], [2, 106]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text(), 'Type the name of the thing');\n  });\n\n  (0, _emberQunit.test)('The search function can return an array and those options get rendered', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function (term) {\n      return _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n        return str.indexOf(term) > -1;\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.equal($('.ember-power-select-option').length, 7);\n  });\n\n  (0, _emberQunit.test)('The search function can return a promise that resolves to an array and those options get rendered', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option').length, 7);\n    });\n  });\n\n  (0, _emberQunit.test)('While the async search is being performed the \"Type to search\" dissapears the \"Loading...\" message appears', function (assert) {\n    assert.expect(3);\n\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(/Type to search/.test($('.ember-power-select-dropdown').text()), 'The type to search message is displayed');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.ok(!/Type to search/.test($('.ember-power-select-dropdown').text()), 'The type to search message dissapeared');\n    assert.ok(/Loading options\\.\\.\\./.test($('.ember-power-select-dropdown').text()), '\"Loading options...\" message appears');\n    return (0, _emberTestHelpersWait['default'])();\n  });\n\n  (0, _emberQunit.test)('When the search resolves to an empty array then the \"No results found\" message or block appears.', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function () {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve([]);\n        }, 10);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.ok(/No results found/.test($('.ember-power-select-option').text()), 'The default \"No results\" message renders');\n    });\n  });\n\n  (0, _emberQunit.test)('When the search resolves to an empty array then the custom \"No results\" message appears', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function () {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve([]);\n        }, 10);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'noMatchesMessage', 'Meec. Try again', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 93], [2, 96]]]]], [], ['loc', [null, [2, 88], [2, 97]]]]], [], ['loc', [null, [2, 80], [2, 98]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.ok(/Meec\\. Try again/.test($('.ember-power-select-option').text()), 'The customized \"No results\" message renders');\n    });\n  });\n\n  (0, _emberQunit.test)('When the search resolves to an empty array then the custom alternate block renders', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function () {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve([]);\n        }, 10);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      var child1 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 4,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('span');\n            dom.setAttribute(el1, 'class', 'foo-bar');\n            var el2 = dom.createTextNode('Baz');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, 1, ['loc', [null, [2, 4], [6, 21]]]]],\n        locals: [],\n        templates: [child0, child1]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-dropdown .foo-bar').length, 1, 'The alternate block message gets rendered');\n    });\n  });\n\n  (0, _emberQunit.test)('When one search is fired before the previous one resolved, the \"Loading\" continues until the 2nd is resolved', function (assert) {\n    var done = assert.async();\n    assert.expect(2);\n\n    this.searchFn = function () {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"tee\");\n\n    setTimeout(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    }, 50);\n\n    setTimeout(function () {\n      assert.ok(/Loading options/.test($('.ember-power-select-option').text()), 'The loading message is visible');\n      assert.equal($('.ember-power-select-option').length, 1, 'No results are shown');\n    }, 120);\n\n    setTimeout(done, 180);\n  });\n\n  (0, _emberQunit.test)('On an empty select, when the search resolves, the first element is highlighted like with regular filtering', function (assert) {\n    assert.expect(1);\n\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first result is highlighted');\n    });\n  });\n\n  (0, _emberQunit.test)('On an select with a selected value, if after a search this value is not among the options the first element is highlighted', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = _dummyTestsIntegrationComponentsConstants.numbers[2];\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 27], [2, 35]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 44], [2, 51]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 61], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:eq(2)').attr('aria-current'), 'true', 'The 3rd result is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first result is highlighted');\n    });\n  });\n\n  (0, _emberQunit.test)('Closing a component with a custom search cleans the search box and the results list', function (assert) {\n    var _this = this;\n\n    assert.expect(5);\n    this.searchFn = function (term) {\n      return RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n        return str.indexOf(term) > -1;\n      }));\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'different-node');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 27], [3, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 58], [3, 61]]]]], [], ['loc', [null, [3, 53], [3, 62]]]]], [], ['loc', [null, [3, 45], [3, 63]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.equal($('.ember-power-select-option').length, 7, 'Results are filtered');\n    assert.equal($('.ember-power-select-search input').val(), 'teen');\n    _ember['default'].run(function () {\n      var event = new window.Event('mousedown');\n      _this.$('#different-node')[0].dispatchEvent(event);\n    });\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 1, 'Results have been cleared');\n    assert.equal($('.ember-power-select-option').text().trim(), 'Type to search');\n    assert.equal($('.ember-power-select-search input').val(), '', 'The searchbox was cleared');\n  });\n\n  (0, _emberQunit.test)('When received both options and search, those options are shown when the dropdown opens before the first search is performed', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 50);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'different-node');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 43], [3, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 74], [3, 77]]]]], [], ['loc', [null, [3, 69], [3, 78]]]]], [], ['loc', [null, [3, 61], [3, 79]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.equal($('.ember-power-select-option').length, 21, 'All the options are shown and also the loading message');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...');\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option').length, 7, 'All the options are shown but no the loading message');\n    });\n  });\n\n  (0, _emberQunit.test)('Don\\'t return from the search action and update the options instead also works as an strategy', function (assert) {\n    var _this2 = this;\n\n    assert.expect(2);\n\n    this.selectedOptions = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.searchFn = function (term) {\n      _ember['default'].run.later(function () {\n        _this2.set('selectedOptions', _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n          return str.indexOf(term) > -1;\n        }));\n      }, 20);\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'different-node');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'selectedOptions', ['loc', [null, [3, 28], [3, 43]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 51], [3, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 82], [3, 85]]]]], [], ['loc', [null, [3, 77], [3, 86]]]]], [], ['loc', [null, [3, 69], [3, 87]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option').length, 7);\n    });\n  });\n\n  (0, _emberQunit.test)('Setting the options to a promise from the custom search function works (and does not prevent further searches)', function (assert) {\n    var _this3 = this;\n\n    var done = assert.async();\n    assert.expect(14);\n\n    this.selectedOptions = RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n    var searchCalls = 0;\n    this.searchFn = function (term) {\n      searchCalls++;\n      var promise = new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 30);\n      });\n      _this3.set('selectedOptions', promise);\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'different-node');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'selectedOptions', ['loc', [null, [3, 28], [3, 43]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 51], [3, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 82], [3, 85]]]]], [], ['loc', [null, [3, 77], [3, 86]]]]], [], ['loc', [null, [3, 69], [3, 87]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 20, 'All the options are shown');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.equal($('.ember-power-select-option').length, 21, 'All the options are shown plus the loading message');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');\n\n    setTimeout(function () {\n      assert.equal(searchCalls, 1, 'The search was called only once');\n      assert.equal($('.ember-power-select-option').length, 7);\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"seven\");\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');\n      assert.equal($('.ember-power-select-option').length, 8);\n    }, 40);\n\n    setTimeout(function () {\n      assert.equal(searchCalls, 2, 'The search was called only twice');\n      assert.equal($('.ember-power-select-option').length, 8);\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'It is still searching the previous result');\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"four\");\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'The loading message is shown');\n      assert.equal($('.ember-power-select-option').length, 8);\n    }, 60);\n\n    setTimeout(function () {\n      assert.equal(searchCalls, 3, 'The search was called only three times');\n      assert.equal($('.ember-power-select-option').length, 2);\n      done();\n    }, 200);\n  });\n\n  (0, _emberQunit.test)('If you delete the last char of the input before the previous promise resolves, that promise is discarded', function (assert) {\n    var done = assert.async();\n    assert.expect(2);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        setTimeout(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(':');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],\n          locals: ['number', 'searchTerm'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 43], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    setTimeout(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"t\");\n    }, 150);\n    setTimeout(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"\");\n    }, 200);\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'All the options are displayed after clearing the search');\n      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'two:', 'The results are the original options');\n      done();\n    }, 300);\n  });\n\n  (0, _emberQunit.test)('The yielded search term in single selects is updated only when the async search for it finishes', function (assert) {\n    var done = assert.async();\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        setTimeout(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(':');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],\n          locals: ['number', 'searchTerm'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 43], [2, 51]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], ['loc', [null, [2, 69], [2, 78]]]]], [], ['loc', [null, [2, 61], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'thirteen:teen', 'The results and the searchTerm have updated');\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"four\");\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'There is a search going on');\n      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'thirteen:teen', 'The results and the searchTerm are still the same because the search has not finished yet');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('The yielded search term in multiple selects is updated only when the async search for it finishes', function (assert) {\n    var done = assert.async();\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        setTimeout(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(':');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]], ['content', 'searchTerm', ['loc', [null, [3, 17], [3, 31]]]]],\n          locals: ['number', 'searchTerm'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 52], [2, 60]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 83], [2, 86]]]]], [], ['loc', [null, [2, 78], [2, 87]]]]], [], ['loc', [null, [2, 70], [2, 88]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'thirteen:teen', 'The results and the searchTerm have updated');\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"four\");\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Loading options...', 'There is a search going on');\n      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'thirteen:teen', 'The results and the searchTerm are still the same because the search has not finished yet');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('BUGFIX: Destroy a component why an async search is pending does not cause an error', function (assert) {\n    var done = assert.async();\n    assert.expect(0); // This test has no assertions. The fact that nothing fails is the proof that it works\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.visible = true;\n\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        setTimeout(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 200);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'fragmentReason': false,\n              'revision': 'Ember@2.4.1',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 3,\n                  'column': 6\n                },\n                'end': {\n                  'line': 5,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 2,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(':');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(2);\n              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n              return morphs;\n            },\n            statements: [['content', 'number', ['loc', [null, [4, 8], [4, 18]]]], ['content', 'searchTerm', ['loc', [null, [4, 19], [4, 33]]]]],\n            locals: ['number', 'searchTerm'],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 39], [3, 46]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [3, 54], [3, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 85], [3, 88]]]]], [], ['loc', [null, [3, 80], [3, 89]]]]], [], ['loc', [null, [3, 72], [3, 90]]]]], 0, null, ['loc', [null, [3, 6], [5, 32]]]]],\n          locals: [],\n          templates: [child0]\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'visible', ['loc', [null, [2, 10], [2, 17]]]]], [], 0, null, ['loc', [null, [2, 4], [6, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    this.set('visible', false);\n    setTimeout(function () {\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('BUGFIX: When the given options are a promise and a search function is provided, clearing the search must display the results of the original promise', function (assert) {\n    assert.expect(3);\n    this.numbersPromise = RSVP.Promise.resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n\n    this.searchFn = function (term) {\n      return _dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n        return str.indexOf(term) > -1;\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 3\n              },\n              'end': {\n                'line': 4,\n                'column': 3\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('     ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 5], [3, 15]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 27], [2, 41]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 49], [2, 57]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 93], [2, 96]]]]], [], ['loc', [null, [2, 88], [2, 97]]]]], [], ['loc', [null, [2, 80], [2, 98]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 20, 'There is 20 options');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 options');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"\");\n    assert.equal($('.ember-power-select-option').length, 20, 'There is 20 options again§');\n  });\n});","define('dummy/tests/integration/components/power-select/custom-search-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/custom-search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/custom-search-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/customization-with-classnames-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Customization using triggerClass)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('trigger on single selects can be customized using triggerClass', function (assert) {\n    assert.expect(1);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]], 'triggerClass', 'country-single-trigger'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.country-single-trigger').length, 1, 'Class was added.');\n  });\n\n  (0, _emberQunit.test)('trigger on multiple selects can be customized using triggerClass', function (assert) {\n    assert.expect(1);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = [_dummyTestsIntegrationComponentsConstants.countries[1], _dummyTestsIntegrationComponentsConstants.countries[0]];\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]], 'triggerClass', 'country-multiple-trigger'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.country-multiple-trigger').length, 1, 'Class was added.');\n  });\n});","define('dummy/tests/integration/components/power-select/customization-with-classnames-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/customization-with-classnames-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/customization-with-classnames-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/customization-with-compoments-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants', 'dummy/tests/helpers/ember-power-select', 'ember'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants, _dummyTestsHelpersEmberPowerSelect, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Customization using components)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('selected option can be customized using triggerComponent', function (assert) {\n    assert.expect(3);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'triggerComponent', 'selected-country', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 113], [2, 116]]]]], [], ['loc', [null, [2, 108], [2, 117]]]]], [], ['loc', [null, [2, 100], [2, 118]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-status-icon').length, 0, 'The provided trigger component is not rendered');\n    assert.equal($('.ember-power-select-trigger .icon-flag').length, 1, 'The custom flag appears.');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'Spain', 'With the country name as the text.');\n  });\n\n  (0, _emberQunit.test)('selected item option can be customized using selectedItemComponent', function (assert) {\n    assert.expect(3);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'selectedItemComponent', 'selected-item-country', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 123], [2, 126]]]]], [], ['loc', [null, [2, 118], [2, 127]]]]], [], ['loc', [null, [2, 110], [2, 128]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-status-icon').length, 1, 'The provided trigger component is rendered');\n    assert.equal($('.ember-power-select-trigger .icon-flag').length, 1, 'The custom flag appears.');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'Spain', 'With the country name as the text.');\n  });\n\n  (0, _emberQunit.test)('the list of options can be customized using optionsComponent', function (assert) {\n    assert.expect(2);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'optionsComponent', 'list-of-countries', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 114], [2, 117]]]]], [], ['loc', [null, [2, 109], [2, 118]]]]], [], ['loc', [null, [2, 101], [2, 119]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var text = $('.ember-power-select-options').text().trim();\n    assert.ok(/Countries:/.test(text), 'The given component is rendered');\n    assert.ok(/3\\. Russia/.test(text), 'The component has access to the options');\n  });\n\n  (0, _emberQunit.test)('the content before the list can be customized passing `beforeOptionsComponent`', function (assert) {\n    assert.expect(2);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'beforeOptionsComponent', 'custom-before-options', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 124], [2, 127]]]]], [], ['loc', [null, [2, 119], [2, 128]]]]], [], ['loc', [null, [2, 111], [2, 129]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown #custom-before-options-p-tag').length, 1, 'The custom component is rendered instead of the usual search bar');\n    assert.equal($('.ember-power-select-search input').length, 0, 'The search input is not visible');\n  });\n\n  (0, _emberQunit.test)('the content after the list can be customized passing `afterOptionsComponent`', function (assert) {\n    assert.expect(2);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'afterOptionsComponent', 'custom-after-options', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 122], [2, 125]]]]], [], ['loc', [null, [2, 117], [2, 126]]]]], [], ['loc', [null, [2, 109], [2, 127]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown #custom-after-options-p-tag').length, 1, 'The custom component is rendered instead of the usual search bar');\n    assert.equal($('.ember-power-select-search input').length, 1, 'The search input is still visible');\n  });\n\n  (0, _emberQunit.test)('the `beforeOptionsComponent` and `afterOptionsComponent` receive the `extra` hash', function (assert) {\n    assert.expect(1);\n    var counter = 0;\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n    this.someAction = function () {\n      counter++;\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 9,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [8, 6], [8, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 10,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [3, 15], [3, 22]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [4, 28], [4, 36]]]]], [], ['loc', [null, [4, 23], [4, 37]]]]], [], ['loc', [null, [4, 15], [4, 38]]]], 'afterOptionsComponent', 'custom-after-options2', 'beforeOptionsComponent', 'custom-before-options2', 'extra', ['subexpr', 'hash', [], ['passedAction', ['subexpr', 'action', [['get', 'someAction', ['loc', [null, [7, 39], [7, 49]]]]], [], ['loc', [null, [7, 31], [7, 50]]]]], ['loc', [null, [7, 12], [7, 51]]]]], 0, null, ['loc', [null, [2, 4], [9, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      return $('.custom-before-options2-button')[0].click();\n    });\n    _ember['default'].run(function () {\n      return $('.custom-after-options2-button')[0].click();\n    });\n    assert.equal(counter, 2, 'The action inside the extra hash has been called twice');\n  });\n\n  (0, _emberQunit.test)('the `triggerComponent` receives the `loading` state', function (assert) {\n    assert.expect(2);\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 7,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [6, 6], [6, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [3, 15], [3, 22]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [4, 28], [4, 36]]]]], [], ['loc', [null, [4, 23], [4, 37]]]]], [], ['loc', [null, [4, 15], [4, 38]]]], 'triggerComponent', 'custom-trigger-for-loading'], 0, null, ['loc', [null, [2, 4], [7, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'It isn\\'t loading', 'Results are not loading');\n    var pendingPromise = new _ember['default'].RSVP.Promise(function (resolve) {\n      setTimeout(function () {\n        resolve(_dummyTestsIntegrationComponentsConstants.countries);\n      }, 100);\n    });\n    _ember['default'].run(this, 'set', 'countries', pendingPromise);\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'Is loading', 'Results are loading');\n  });\n});","define('dummy/tests/integration/components/power-select/customization-with-compoments-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/customization-with-compoments-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/customization-with-compoments-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/disabled-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Disabled)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('A disabled dropdown doesn\\'t responds to mouse/keyboard events', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'disabled', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var $trigger = this.$('.ember-power-select-trigger');\n    assert.ok($trigger.attr('aria-disabled'), 'true', 'The trigger has `aria-disabled=true`');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');\n  });\n\n  (0, _emberQunit.test)('A disabled dropdown is not focusable, and ignores the passed tabindex ', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'tabindex', '123', 'disabled', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 87], [2, 90]]]]], [], ['loc', [null, [2, 82], [2, 91]]]]], [], ['loc', [null, [2, 74], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.equal(this.$('.ember-power-select-trigger').attr('tabindex'), undefined, 'The trigger has no tabindex so it can\\'t be focused');\n  });\n\n  (0, _emberQunit.test)('Disabled options are not highlighted when hovered with the mouse', function (assert) {\n    assert.expect(1);\n\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      return $('.ember-power-select-option[aria-disabled=\"true\"]:eq(0)').trigger('mouseover');\n    });\n    assert.equal($('.ember-power-select-option[aria-disabled=\"true\"]:eq(0)').attr('aria-current'), 'false', 'The hovered option was not highlighted because it\\'s disabled');\n  });\n\n  (0, _emberQunit.test)('Disabled options are skipped when highlighting items with the keyboard', function (assert) {\n    assert.expect(1);\n\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 28], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.ok($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'LV: Latvia', 'The hovered option was not highlighted because it\\'s disabled');\n  });\n\n  (0, _emberQunit.test)('When passed `disabled=true`, the input inside the trigger is also disabled', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(this.$('.ember-power-select-trigger-multiple-input').prop('disabled'), 'The input is disabled');\n  });\n\n  (0, _emberQunit.test)('When passed `disabled=true`, the options cannot be removed', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = [_dummyTestsIntegrationComponentsConstants.numbers[2], _dummyTestsIntegrationComponentsConstants.numbers[4]];\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 38], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 90], [2, 97]]]]], [], []], 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-multiple-remove-btn').length, 0, 'There is no button to remove selected elements');\n  });\n\n  (0, _emberQunit.test)('BUGFIX: When after a search the only result is a disabled element, it isn\\'t highlighted and cannot be selected', function (assert) {\n    assert.expect(3);\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 3\n              },\n              'end': {\n                'line': 4,\n                'column': 3\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('     ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"Br\");\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').length, 0, 'Nothing is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'Nothing was selected');\n  });\n\n  (0, _emberQunit.test)('BUGFIX: When after a search there is two results and the first one is a disabled element, the second one is highlighted', function (assert) {\n    assert.expect(4);\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 3\n              },\n              'end': {\n                'line': 4,\n                'column': 3\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('     ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"o\"); // Finds [\"Portugal\", \"United Kingdom\"]\n    assert.equal($('.ember-power-select-option').length, 2, 'There is two results');\n    assert.equal($('.ember-power-select-option[aria-disabled=\"true\"]').length, 1, 'One is disabled');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').length, 1, 'One element is highlighted');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'United Kingdom', 'The first non-disabled element is highlighted');\n  });\n\n  (0, _emberQunit.test)('BUGFIX: When searching by pressing keys on a focused & closed select, disabled options are ignored', function (assert) {\n    assert.expect(3);\n    this.countriesWithDisabled = _dummyTestsIntegrationComponentsConstants.countriesWithDisabled;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 3\n              },\n              'end': {\n                'line': 4,\n                'column': 3\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('     ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 5], [3, 21]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countriesWithDisabled', ['loc', [null, [2, 27], [2, 48]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 103], [2, 106]]]]], [], ['loc', [null, [2, 98], [2, 107]]]]], [], ['loc', [null, [2, 90], [2, 108]]]]], 0, null, ['loc', [null, [2, 3], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    trigger.focus();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');\n    assert.equal(trigger.textContent.trim(), 'United Kingdom', '\"United Kingdom\" has been selected');\n  });\n});","define('dummy/tests/integration/components/power-select/disabled-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/disabled-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/disabled-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/ember-data-test', ['exports', 'ember', 'ember-qunit', 'ember-test-helpers/wait', 'dummy/tests/helpers/ember-power-select', 'dummy/initializers/ember-cli-mirage', 'dummy/initializers/ember-data'], function (exports, _ember, _emberQunit, _emberTestHelpersWait, _dummyTestsHelpersEmberPowerSelect, _dummyInitializersEmberCliMirage, _dummyInitializersEmberData) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Ember-data integration)', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      var owner = _ember['default'].getOwner(this);\n      this.server = (0, _dummyInitializersEmberCliMirage.startMirage)({ environment: 'test', modulePrefix: 'dummy' });\n\n      _dummyInitializersEmberData['default'].initialize(owner);\n      this.store = owner.lookup('service:store');\n    },\n\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _emberQunit.test)('Passing as options of a `store.findAll` works', function (assert) {\n    server.createList('user', 10);\n    this.users = this.store.findAll('user');\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option').length, 10, 'Once the collection resolves the options render normally');\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('2');\n      assert.equal($('.ember-power-select-option').length, 1, 'Filtering works');\n    });\n  });\n\n  (0, _emberQunit.test)('Passing as options the result of `store.query` works', function (assert) {\n    server.createList('user', 10);\n    this.users = this.store.query('user', { foo: 'bar' });\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal($('.ember-power-select-option').length, 10, 'Once the collection resolves the options render normally');\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('2');\n      assert.equal($('.ember-power-select-option').length, 1, 'Filtering works');\n    });\n  });\n\n  (0, _emberQunit.test)('Delete an item in a multiple selection', function (assert) {\n    server.createList('user', 10);\n    this.users = this.store.findAll('user');\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.name', ['loc', [null, [3, 6], [3, 21]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 37], [2, 42]]]]], [], []], 'searchField', 'name', 'selected', ['subexpr', '@mut', [['get', 'users', ['loc', [null, [2, 71], [2, 76]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'users', ['loc', [null, [2, 99], [2, 104]]]]], [], ['loc', [null, [2, 94], [2, 105]]]]], [], ['loc', [null, [2, 86], [2, 106]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn:first');\n      assert.equal($('.ember-power-select-multiple-remove-btn').length, 9, 'Once the collection resolves the options render normally');\n    });\n  });\n\n  (0, _emberQunit.test)('The `selected` option can be an async belongsTo', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n    assert.expect(6);\n\n    var users = server.createList('user', 10);\n    var mainUser = server.create('user', { friendIds: users.map(function (u) {\n        return u.id;\n      }), bestieId: users[3].id });\n\n    _ember['default'].run(function () {\n      _this.store.findRecord('user', mainUser.id).then(function (record) {\n        _this.mainUser = record;\n        _this.render(_ember['default'].HTMLBars.template((function () {\n          var child0 = (function () {\n            return {\n              meta: {\n                'fragmentReason': false,\n                'revision': 'Ember@2.4.1',\n                'loc': {\n                  'source': null,\n                  'start': {\n                    'line': 2,\n                    'column': 8\n                  },\n                  'end': {\n                    'line': 4,\n                    'column': 8\n                  }\n                }\n              },\n              isEmpty: false,\n              arity: 1,\n              cachedFragment: null,\n              hasRendered: false,\n              buildFragment: function buildFragment(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode('          ');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment('');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode('\\n');\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                var morphs = new Array(1);\n                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                return morphs;\n              },\n              statements: [['content', 'option.name', ['loc', [null, [3, 10], [3, 25]]]]],\n              locals: ['option'],\n              templates: []\n            };\n          })();\n\n          return {\n            meta: {\n              'fragmentReason': {\n                'name': 'missing-wrapper',\n                'problems': ['wrong-type']\n              },\n              'revision': 'Ember@2.4.1',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 1,\n                  'column': 0\n                },\n                'end': {\n                  'line': 5,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('      ');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n              return morphs;\n            },\n            statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'mainUser.friends', ['loc', [null, [2, 32], [2, 48]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'mainUser.bestie', ['loc', [null, [2, 58], [2, 73]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 115], [2, 118]]]]], [], ['loc', [null, [2, 110], [2, 119]]]]], [], ['loc', [null, [2, 102], [2, 120]]]]], 0, null, ['loc', [null, [2, 8], [4, 25]]]]],\n            locals: [],\n            templates: [child0]\n          };\n        })()));\n\n        (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n        assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'User 0', 'The first element is highlighted');\n        assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n        assert.equal(_this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n\n        setTimeout(function () {\n          assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'User 3', 'The 4th element is highlighted');\n          assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'User 3', 'The 4th element is highlighted');\n          assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'User 3', 'The trigger has the proper content');\n          done();\n        }, 10);\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/power-select/ember-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/ember-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/ember-data-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/general-behaviour-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n  var RSVP = _ember['default'].RSVP;\n\n  (0, _emberQunit.moduleForComponent)('power-select', 'Integration | Component | Ember Power Select (General behavior)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Click in the trigger of a closed select opens the dropdown', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n  });\n\n  (0, _emberQunit.test)('Click in the trigger of an opened select closes the dropdown', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n  });\n\n  (0, _emberQunit.test)('Search functionality is enabled by default', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 59], [2, 62]]]]], [], ['loc', [null, [2, 54], [2, 63]]]]], [], ['loc', [null, [2, 46], [2, 64]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-search').length, 1, 'The search box is rendered');\n  });\n\n  (0, _emberQunit.test)('The search functionality can be disabled by passing `searchEnabled=false`', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'searchEnabled', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 78], [2, 81]]]]], [], ['loc', [null, [2, 73], [2, 82]]]]], [], ['loc', [null, [2, 65], [2, 83]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    assert.equal($('.ember-power-select-search').length, 0, 'The search box NOT rendered');\n  });\n\n  (0, _emberQunit.test)('The search box gain focus automatically when opened', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok($('.ember-power-select-search input').get(0) === document.activeElement, 'The search box is focused after opening select');\n  });\n\n  (0, _emberQunit.test)('Each option of the select is the result of yielding an item', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'There is as many options in the markup as in the supplied array');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');\n    assert.equal($('.ember-power-select-option:eq(9)').text().trim(), 'ten');\n    assert.equal($('.ember-power-select-option:eq(13)').text().trim(), 'fourteen');\n  });\n\n  (0, _emberQunit.test)('If the passed options is a promise and it\\'s not resolved the component shows a Loading message', function (assert) {\n    var done = assert.async();\n    assert.expect(3);\n\n    this.numbersPromise = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(function () {\n        console.debug('resolved!');resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n      }, 100);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').text().trim(), 'Loading options...', 'The loading message appears while the promise is pending');\n    setTimeout(function () {\n      assert.ok(!/Loading options/.test($('.ember-power-select-option').text()), 'The loading message is gone');\n      assert.equal($('.ember-power-select-option').length, 20, 'The results appear when the promise is resolved');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('If the passed options is a promise and it\\'s not resolved but the `loadingMessage` attribute is false, no loading message is shown', function (assert) {\n    var done = assert.async();\n    assert.expect(2);\n\n    this.numbersPromise = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(function () {\n        console.debug('resolved!');resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n      }, 100);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]], 'loadingMessage', false], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n\n    assert.equal($('.ember-power-select-option').length, 0, 'No loading options message is displayed');\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, 20, 'The results appear when the promise is resolved');\n      done();\n    }, 120);\n  });\n\n  (0, _emberQunit.test)('If a placeholder is provided, it shows while no element is selected', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'placeholder', 'abracadabra', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 97], [2, 100]]]]], [], ['loc', [null, [2, 92], [2, 101]]]]], [], ['loc', [null, [2, 84], [2, 102]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-trigger .ember-power-select-placeholder').text().trim(), 'abracadabra', 'The placeholder is rendered when there is no element');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');\n    assert.equal($('.ember-power-select-trigger .ember-power-select-placeholder').length, 0, 'The placeholder is gone');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', 'The selected item replaced it');\n  });\n\n  (0, _emberQunit.test)('If the `selected` value changes the select gets updated, but the `onchange` action doesn\\'t fire', function (assert) {\n    var _this = this;\n\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = null;\n    this.foo = function () {\n      assert.ok(false, 'The onchange action is never fired');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'foo', ['loc', [null, [2, 53], [2, 56]]]]], [], ['loc', [null, [2, 45], [2, 57]]]], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 67], [2, 75]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return _this.set('selected', 'three');\n    });\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'three', 'The `three` element is selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'three', 'The proper option gets highlighed');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'three', 'The proper option gets selected');\n  });\n\n  (0, _emberQunit.test)('If the user selects a value and later on the selected value changes from the outside, the components updates too', function (assert) {\n    var _this2 = this;\n\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = null;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '\"four\" has been selected');\n    _ember['default'].run(function () {\n      return _this2.set('selected', 'three');\n    });\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'three', '\"three\" has been selected because a change came from the outside');\n  });\n\n  (0, _emberQunit.test)('If the user passes `renderInPlace=true` the dropdown is added below the trigger instead of in the root', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'renderInPlace', true, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-dropdown').length, 1, 'The dropdown is inside the component');\n  });\n\n  (0, _emberQunit.test)('If the user passes `closeOnSelect=false` the dropdown remains visible after selecting an option with the mouse', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '\"four\" has been selected');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n  });\n\n  (0, _emberQunit.test)('If the user passes `closeOnSelect=false` the dropdown remains visible after selecting an option with the with the keyboard', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'four', '\"four\" has been selected');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n  });\n\n  (0, _emberQunit.test)('If the content of the options is refreshed (starting with empty array proxy) the available options should also refresh', function (assert) {\n    var done = assert.async();\n    assert.expect(2);\n\n    var data = [];\n    this.proxy = _ember['default'].A(data);\n    this.search = function () {\n      return new RSVP.Promise(function (resolve) {\n        resolve(data);\n        _ember['default'].run.later(function () {\n          data.pushObject('one');\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 106\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [1, 95], [1, 105]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 123\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'proxy', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [1, 45], [1, 51]]]]], [], ['loc', [null, [1, 37], [1, 52]]]], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [1, 75], [1, 78]]]]], [], ['loc', [null, [1, 70], [1, 79]]]]], [], ['loc', [null, [1, 62], [1, 80]]]]], 0, null, ['loc', [null, [1, 0], [1, 123]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"o\");\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, 1, 'The dropdown is opened and results shown after proxy is updated');\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('If the content of the options is updated (starting with populated array proxy) the available options should also refresh', function (assert) {\n    var done = assert.async();\n    assert.expect(5);\n\n    var data = ['one'];\n    this.proxy = _ember['default'].A(data);\n    this.search = function () {\n      return new RSVP.Promise(function (resolve) {\n        resolve(data);\n        _ember['default'].run.later(function () {\n          data.pushObject('owner');\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 106\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [1, 95], [1, 105]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 123\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'proxy', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [1, 45], [1, 51]]]]], [], ['loc', [null, [1, 37], [1, 52]]]], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [1, 75], [1, 78]]]]], [], ['loc', [null, [1, 70], [1, 79]]]]], [], ['loc', [null, [1, 62], [1, 80]]]]], 0, null, ['loc', [null, [1, 0], [1, 123]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n\n    assert.equal($('.ember-power-select-option').length, 1, 'The dropdown is opened and results shown with initial proxy contents');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');\n\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"o\");\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results shown after proxy is updated');\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');\n      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'owner');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('If the content of the selected is refreshed while opened the first element of the list gets highlighted', function (assert) {\n    var _this3 = this;\n\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'closeOnSelect', false, 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'two', 'The second options is highlighted');\n    _ember['default'].run(function () {\n      return _this3.set('numbers', ['foo', 'bar', 'baz']);\n    });\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'foo', 'The first element is highlighted');\n  });\n\n  (0, _emberQunit.test)('If the user passes `dropdownClass` the dropdown content should have that class', function (assert) {\n    assert.expect(1);\n\n    this.options = [];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'dropdownClass', 'this-is-a-test-class'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok($('.ember-power-select-dropdown').hasClass('this-is-a-test-class'), 'dropdownClass can be customized');\n  });\n\n  (0, _emberQunit.test)('If the user passes `class` the dropdown gets that class', function (assert) {\n    assert.expect(1);\n    this.options = [];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'class', 'my-foo'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.ok($('.ember-power-select').hasClass('my-foo'), 'the entire select inherits that class');\n  });\n\n  (0, _emberQunit.test)('The filtering is reverted after closing the select', function (assert) {\n    var _this4 = this;\n\n    assert.expect(2);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'outside-div');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [3, 45], [3, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 71], [3, 74]]]]], [], ['loc', [null, [3, 66], [3, 75]]]]], [], ['loc', [null, [3, 58], [3, 76]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('th');\n    assert.equal($('.ember-power-select-option').length, 2, 'the dropdown has filtered the results');\n    _ember['default'].run(function () {\n      var event = new window.Event('mousedown');\n      _this4.$('#outside-div')[0].dispatchEvent(event);\n    });\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, _dummyTestsIntegrationComponentsConstants.numbers.length, 'the dropdown has shows all results');\n  });\n\n  (0, _emberQunit.test)('It has the appropriate class when it receives a specific dropdown position', function (assert) {\n    assert.expect(1);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'verticalPosition', 'above'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--above'), 'It has the class of dropdowns positioned above');\n  });\n\n  (0, _emberQunit.test)('The search term is yielded as second argument in single selects', function (assert) {\n    assert.expect(2);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(':');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'term', ['loc', [null, [3, 6], [3, 14]]]], ['content', 'option', ['loc', [null, [3, 15], [3, 25]]]]],\n          locals: ['option', 'term'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'tw:two', 'Each option receives the search term');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('thr');\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'thr:two', 'The trigger also receives the search term');\n  });\n\n  (0, _emberQunit.test)('If there is no search action and the options is empty the select shows the default \"no options\" message', function (assert) {\n    this.options = [];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 1);\n    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');\n    assert.ok($('.ember-power-select-option').hasClass('ember-power-select-option--no-matches-message'), 'The row has a special class to differentiate it from regular options');\n  });\n\n  (0, _emberQunit.test)('If there is a search action and the options is empty it shows the `searchMessage`, and if after searching there is no results, it shows the `noResults` message', function (assert) {\n    this.options = [];\n    this.search = function () {\n      return [];\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'search', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 42], [2, 49]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 72], [2, 75]]]]], [], ['loc', [null, [2, 67], [2, 76]]]]], [], ['loc', [null, [2, 59], [2, 77]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 1);\n    assert.equal($('.ember-power-select-option').text().trim(), 'Type to search');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('foo');\n    assert.equal($('.ember-power-select-option').length, 1);\n    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');\n  });\n\n  (0, _emberQunit.test)('The default \"no options\" message can be customized passing `noMatchesMessage=\"other message\"`', function (assert) {\n    this.options = [];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'noMatchesMessage', 'Nope', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 1);\n    assert.equal($('.ember-power-select-option').text().trim(), 'Nope');\n  });\n\n  (0, _emberQunit.test)('If there is a search action, the options are empty and the `seachMessage` in intentionally empty, it doesn\\'t show anything, and if you seach and there is no results it shows the `noResultsMessage`', function (assert) {\n    this.options = [];\n    this.search = function () {\n      return [];\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['search', ['subexpr', '@mut', [['get', 'search', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'searchMessage', false, 'options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 62], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 0);\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('foo');\n    assert.equal($('.ember-power-select-option').length, 1);\n    assert.equal($('.ember-power-select-option').text().trim(), 'No results found');\n  });\n\n  (0, _emberQunit.test)('The content of the dropdown when there are no options can be completely customized using the inverse block', function (assert) {\n    this.options = [];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      var child1 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 4,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('span');\n            dom.setAttribute(el1, 'class', 'empty-option-foo');\n            var el2 = dom.createTextNode('Foo bar');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'noMatchesMessage', 'Nope', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, 1, ['loc', [null, [2, 4], [6, 21]]]]],\n        locals: [],\n        templates: [child0, child1]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 0, 'No list elements, just the given alternate block');\n    assert.equal($('.empty-option-foo').length, 1);\n  });\n\n  (0, _emberQunit.test)('When no `selected` is provided, the first item in the dropdown is highlighted', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').length, 1, 'One element is highlighted');\n    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first one to be precise');\n  });\n\n  (0, _emberQunit.test)('When `selected` option is provided, it appears in the trigger yielded with the same block as the options', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'three', 'The selected option show in the trigger');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      Selected: ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 16], [3, 26]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'Selected: three', 'The selected option uses the same yielded block as the options');\n  });\n\n  (0, _emberQunit.test)('When `selected` option is provided, it is highlighted when the dropdown opens', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $highlightedOption = $('.ember-power-select-option[aria-current=\"true\"]');\n    assert.equal($highlightedOption.length, 1, 'One element is highlighted');\n    assert.equal($highlightedOption.text().trim(), 'three', 'The third option is highlighted');\n  });\n\n  (0, _emberQunit.test)('When `selected` option is provided, that option is marked as `.selected`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['selected', 'three', 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 45], [2, 52]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 75], [2, 78]]]]], [], ['loc', [null, [2, 70], [2, 79]]]]], [], ['loc', [null, [2, 62], [2, 80]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $selectedOption = $('.ember-power-select-option:contains(\"three\")');\n    assert.equal($selectedOption.attr('aria-selected'), 'true', 'The third option is marked as selected');\n  });\n\n  (0, _emberQunit.test)('The default search strategy matches disregarding diacritics differences and capitalization', function (assert) {\n    assert.expect(8);\n\n    this.names = _dummyTestsIntegrationComponentsConstants.names;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'names', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 56], [2, 59]]]]], [], ['loc', [null, [2, 51], [2, 60]]]]], [], ['loc', [null, [2, 43], [2, 61]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');\n    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');\n    assert.equal($('.ember-power-select-option').text().trim(), 'María');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Larsen');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João');\n  });\n\n  (0, _emberQunit.test)('You can pass a custom marcher with `matcher=myFn` to customize the search strategy', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.endsWithMatcher = function (option, text) {\n      return option.slice(text.length * -1) === text ? 0 : -1;\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'endsWithMatcher', ['loc', [null, [2, 44], [2, 59]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 82], [2, 85]]]]], [], ['loc', [null, [2, 77], [2, 86]]]]], [], ['loc', [null, [2, 69], [2, 87]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('on');\n    assert.equal($('.ember-power-select-option').text().trim(), \"No results found\", 'No number ends in \"on\"');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('teen');\n    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 number that end in \"teen\"');\n  });\n\n  (0, _emberQunit.test)('When no `selected` is provided, the first item in the dropdown is highlighted', function (assert) {\n    assert.expect(3);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 60], [2, 63]]]]], [], ['loc', [null, [2, 55], [2, 64]]]]], [], ['loc', [null, [2, 47], [2, 65]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').length, 1, 'One element is highlighted');\n    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first one to be precise');\n  });\n\n  (0, _emberQunit.test)('When a option is provided that options is rendered in the trigger using the same block as the options', function (assert) {\n    assert.expect(1);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'ES: Spain', 'The selected country is rendered in the trigger');\n  });\n\n  (0, _emberQunit.test)('When `selected` option is provided, it is highlighted when the dropdown opens', function (assert) {\n    assert.expect(2);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'country', ['loc', [null, [2, 77], [2, 84]]]]], [], ['loc', [null, [2, 72], [2, 85]]]]], [], ['loc', [null, [2, 64], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $highlightedOption = $('.ember-power-select-option[aria-current=\"true\"]');\n    assert.equal($highlightedOption.length, 1, 'One element is highlighted');\n    assert.equal($highlightedOption.text().trim(), 'ES: Spain', 'The second option is highlighted');\n  });\n\n  (0, _emberQunit.test)('When `selected` option is provided, that option is marked as `.selected`', function (assert) {\n    assert.expect(1);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = _dummyTestsIntegrationComponentsConstants.countries[1]; // Spain\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(': ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option.code', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'option.name', ['loc', [null, [3, 23], [3, 38]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 77], [2, 80]]]]], [], ['loc', [null, [2, 72], [2, 81]]]]], [], ['loc', [null, [2, 64], [2, 82]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    var $selectedOption = $('.ember-power-select-option:contains(\"ES: Spain\")');\n    assert.equal($selectedOption.attr('aria-selected'), 'true', 'The second option is marked as selected');\n  });\n\n  (0, _emberQunit.test)('The default search strategy matches disregarding diacritics differences and capitalization', function (assert) {\n    assert.expect(8);\n\n    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],\n          locals: ['person'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 28], [2, 34]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María Murray');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');\n    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');\n    assert.equal($('.ember-power-select-option').text().trim(), 'María Murray');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João Jin');\n  });\n\n  (0, _emberQunit.test)('You can pass a custom marcher with `matcher=myFn` to customize the search strategy', function (assert) {\n    assert.expect(4);\n\n    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];\n\n    this.nameOrSurnameNoDiacriticsCaseSensitive = function (person, term) {\n      return (person.name + ' ' + person.surname).indexOf(term);\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],\n          locals: ['person'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 28], [2, 34]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'nameOrSurnameNoDiacriticsCaseSensitive', ['loc', [null, [2, 43], [2, 81]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 104], [2, 107]]]]], [], ['loc', [null, [2, 99], [2, 108]]]]], [], ['loc', [null, [2, 91], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('s');\n    assert.equal($('.ember-power-select-option').length, 3, 'Only 3 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');\n    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'Lisa Simpson');\n  });\n\n  (0, _emberQunit.test)('BUGFIX: The highlighted element is reset when single selects are closed', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.foo = 'three';\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'three', 'The third element is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The forth element is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'three', 'The third element is highlighted again');\n  });\n\n  (0, _emberQunit.test)('BUGFIX: The highlighted element is reset when multiple selects are closed', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 40);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'two', 'The second element is highlighted');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted again');\n  });\n\n  (0, _emberQunit.test)('The trigger of the select has a id derived from the element id of the component', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.ok(/^ember-power-select-trigger-ember\\d+$/.test(this.$('.ember-power-select-trigger').attr('id'), 'The trigger has the proper id'));\n  });\n\n  (0, _emberQunit.test)('If the passed options is a promise that is resolved, searching should filter the results from a promise', function (assert) {\n    var done = assert.async();\n    assert.expect(5);\n\n    this.numbersPromise = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(function () {\n        resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n      }, 100);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbersPromise', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    setTimeout(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n      (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"o\");\n\n      assert.equal($('.ember-power-select-option').length, 4, 'The dropdown is opened and results shown.');\n      assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'one');\n      assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'two');\n      assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'four');\n      assert.equal($('.ember-power-select-option:eq(3)').text().trim(), 'fourteen');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('Disabled single selects don\\'t have a clear button even if `allowClear` is true', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.foo = _dummyTestsIntegrationComponentsConstants.numbers[2];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'allowClear', true, 'disabled', true], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-clear-btn').length, 0, 'There is no clear button');\n  });\n\n  (0, _emberQunit.test)('If the passed selected element is a pending promise, the first element is highlighted and the trigger is empty', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 50);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n  });\n\n  (0, _emberQunit.test)('If the passed selected element is a resolved promise, that element is selected and the trigger contains the proper text', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = RSVP.resolve(_dummyTestsIntegrationComponentsConstants.numbers[3]);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');\n  });\n\n  (0, _emberQunit.test)('If the passed selected element is a pending promise that resolves while the select is opened, the highlighted & selected elements get updated, along with the trigger', function (assert) {\n    var done = assert.async();\n    assert.expect(6);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 50);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n      assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');\n      done();\n    }, 100);\n  });\n\n  (0, _emberQunit.test)('When a promise resolves it doesn\\'t overwrite a previous value if it isn\\'t the same promise it resolved from', function (assert) {\n    var done = assert.async();\n    assert.expect(6);\n\n    var promise1 = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[3], 80);\n    });\n\n    var promise2 = new RSVP.Promise(function (resolve) {\n      _ember['default'].run.later(resolve, _dummyTestsIntegrationComponentsConstants.numbers[4], 20);\n    });\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = promise1;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.set('selected', promise2);\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'five', 'The 5th element is highlighted');\n      assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'five', 'The 5th element is highlighted');\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'five', 'The trigger has the proper content');\n      done();\n    }, 100);\n  });\n\n  (0, _emberQunit.test)('When both `selected` and `options` are async, and `selected` resolves before `options`, the proper options are selected/highlighted after each resolution', function (assert) {\n    var done = assert.async();\n    assert.expect(6);\n\n    this.asyncOptions = new _ember['default'].RSVP.Promise(function (resolve) {\n      setTimeout(function () {\n        return resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n      }, 200);\n    });\n    this.asyncSelected = new _ember['default'].RSVP.Promise(function (resolve) {\n      setTimeout(function () {\n        return resolve('four');\n      }, 10);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'asyncOptions', ['loc', [null, [2, 28], [2, 40]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'asyncSelected', ['loc', [null, [2, 50], [2, 63]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 86], [2, 89]]]]], [], ['loc', [null, [2, 81], [2, 90]]]]], [], ['loc', [null, [2, 73], [2, 91]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n\n    setTimeout(function () {\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');\n    }, 20);\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n      assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'four', 'The 4th element is selected');\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');\n      done();\n    }, 220);\n  });\n\n  (0, _emberQunit.test)('When both `selected` and `options` are async, and `options` resolves before `selected`, the proper options are selected/highlighted after each resolution', function (assert) {\n    var done = assert.async();\n    assert.expect(7);\n\n    this.asyncOptions = new _ember['default'].RSVP.Promise(function (resolve) {\n      setTimeout(function () {\n        return resolve(_dummyTestsIntegrationComponentsConstants.numbers);\n      }, 10);\n    });\n    this.asyncSelected = new _ember['default'].RSVP.Promise(function (resolve) {\n      setTimeout(function () {\n        return resolve('four');\n      }, 200);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'asyncOptions', ['loc', [null, [2, 28], [2, 40]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'asyncSelected', ['loc', [null, [2, 50], [2, 63]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 86], [2, 89]]]]], [], ['loc', [null, [2, 81], [2, 90]]]]], [], ['loc', [null, [2, 73], [2, 91]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 0, 'no element is selected');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'Nothing is selected yet');\n\n    setTimeout(function () {\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), '', 'The trigger is still empty');\n      assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The 1st element is highlighted');\n    }, 20);\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The 4th element is highlighted');\n      assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').text().trim(), 'four', 'The 4th element is selected');\n      assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'four', 'The trigger has the proper content');\n      done();\n    }, 220);\n  });\n\n  (0, _emberQunit.test)('When the input inside the select gets focused the entire component gains the `ember-basic-dropdown--focus-inside` class', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(!this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select doesn\\'t have the class yet');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      return $('.ember-power-select-search input').focus();\n    });\n    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select has the class now');\n  });\n});","define('dummy/tests/integration/components/power-select/general-behaviour-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/general-behaviour-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/general-behaviour-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/groups-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Groups)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Options that have a `groupName` and `options` are considered groups and are rendered as such', function (assert) {\n    assert.expect(10);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n\n    var $rootLevelGroups = $('.ember-power-select-dropdown > .ember-power-select-options > .ember-power-select-group');\n    var $rootLevelOptions = $('.ember-power-select-dropdown > .ember-power-select-options > .ember-power-select-option');\n    assert.equal($rootLevelGroups.length, 3, 'There is 3 groups in the root level');\n    assert.equal($rootLevelOptions.length, 2, 'There is 2 options in the root level');\n    assert.equal($($rootLevelGroups[0]).find('.ember-power-select-group-name').text().trim(), 'Smalls');\n    assert.equal($($rootLevelGroups[1]).find('.ember-power-select-group-name').text().trim(), 'Mediums');\n    assert.equal($($rootLevelGroups[2]).find('> .ember-power-select-group-name').text().trim(), 'Bigs');\n    assert.equal($($rootLevelOptions[0]).text().trim(), 'one hundred');\n    assert.equal($($rootLevelOptions[1]).text().trim(), 'one thousand');\n\n    var $bigs = $($rootLevelGroups[2]).find('> .ember-power-select-options');\n    assert.equal($bigs.find('> .ember-power-select-group').length, 2, 'There is 2 sub-groups in the \"bigs\" group');\n    assert.equal($bigs.find('> .ember-power-select-option').length, 1, 'There is 1 option in the \"bigs\" group');\n  });\n\n  (0, _emberQunit.test)('When filtering, a group title is visible as long as one of it\\'s elements is', function (assert) {\n    assert.expect(3);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('ve');\n    var groupNames = $('.ember-power-select-group-name').toArray().map(function (e) {\n      return $(e).text().trim();\n    });\n    var optionValues = $('.ember-power-select-option').toArray().map(function (e) {\n      return $(e).text().trim();\n    });\n    assert.deepEqual(groupNames, [\"Mediums\", \"Bigs\", \"Fairly big\", \"Really big\"], 'Only the groups with matching options are shown');\n    assert.deepEqual(optionValues, [\"five\", \"seven\", \"eleven\", \"twelve\"], 'Only the matching options are shown');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('lve');\n    groupNames = $('.ember-power-select-group-name').toArray().map(function (e) {\n      return $(e).text().trim();\n    });\n    assert.deepEqual(groupNames, [\"Bigs\", \"Really big\"], 'With no depth level');\n  });\n\n  (0, _emberQunit.test)('Click on an option of a group select selects the option and closes the dropdown', function (assert) {\n    assert.expect(2);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 52], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 78], [2, 81]]]]], [], ['loc', [null, [2, 73], [2, 82]]]]], [], ['loc', [null, [2, 65], [2, 83]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:contains(\"four\")');\n    assert.equal($('.ember-power-select-trigger').text().trim(), \"four\", 'The clicked option was selected');\n    assert.equal($('.ember-power-select-options').length, 0, 'The dropdown has dissapeared');\n  });\n\n  (0, _emberQunit.test)('Clicking on the title of a group doesn\\'t performs any action nor closes the dropdown', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    this.groupedNumbers = _dummyTestsIntegrationComponentsConstants.groupedNumbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'groupedNumbers', ['loc', [null, [2, 28], [2, 42]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 65], [2, 68]]]]], [], ['loc', [null, [2, 60], [2, 69]]]]], [], ['loc', [null, [2, 52], [2, 70]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      return _this.$('.ember-power-select-group-name:eq(1)').click();\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');\n  });\n});","define('dummy/tests/integration/components/power-select/groups-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/groups-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/groups-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/keyboard-control-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Keyboard control)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Pressing keydown highlights the next option', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'two', 'The next options is highlighted now');\n  });\n\n  (0, _emberQunit.test)('Pressing keyup highlights the previous option', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', 'three', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 75], [2, 83]]]]], [], ['loc', [null, [2, 70], [2, 84]]]]], [], ['loc', [null, [2, 62], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'three');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 38);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'two', 'The previous options is highlighted now');\n  });\n\n  (0, _emberQunit.test)('When you the last option is highlighted, pressing keydown doesn\\'t change the highlighted', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.lastNumber = _dummyTestsIntegrationComponentsConstants.numbers[_dummyTestsIntegrationComponentsConstants.numbers.length - 1];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'lastNumber', ['loc', [null, [2, 45], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'lastNumber', ['loc', [null, [2, 78], [2, 88]]]]], [], ['loc', [null, [2, 73], [2, 89]]]]], [], ['loc', [null, [2, 65], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'twenty');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'twenty', 'The last option is still the highlighted one');\n  });\n\n  (0, _emberQunit.test)('When you the first option is highlighted, pressing keyup doesn\\'t change the highlighted', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.firstNumber = _dummyTestsIntegrationComponentsConstants.numbers[0];\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'firstNumber', ['loc', [null, [2, 45], [2, 56]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'firstNumber', ['loc', [null, [2, 79], [2, 90]]]]], [], ['loc', [null, [2, 74], [2, 91]]]]], [], ['loc', [null, [2, 66], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 38);\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first option is still the highlighted one');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER selects the highlighted element, closes the dropdown and focuses the trigger', function (assert) {\n    var _this = this;\n\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.changed = function (val, dropdown) {\n      assert.equal(val, 'two', 'The onchange action is triggered with the selected value');\n      _this.set('selected', val);\n      assert.ok(dropdown.actions.close, 'The action receives the dropdown as second argument');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'changed', ['loc', [null, [2, 71], [2, 78]]]]], [], ['loc', [null, [2, 63], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'two', 'The highlighted element was selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER on a single select with search disabled selects the highlighted element, closes the dropdown and focuses the trigger', function (assert) {\n    var _this2 = this;\n\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.changed = function (val, dropdown) {\n      assert.equal(val, 'two', 'The onchange action is triggered with the selected value');\n      _this2.set('selected', val);\n      assert.ok(dropdown.actions.close, 'The action receives the dropdown as second argument');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 48], [2, 55]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 65], [2, 73]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'changed', ['loc', [null, [2, 91], [2, 98]]]]], [], ['loc', [null, [2, 83], [2, 99]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);\n    assert.equal($('.ember-power-select-trigger').text().trim(), 'two', 'The highlighted element was selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER when there is no highlighted element, closes the dropdown and focuses the trigger without calling the onchange function', function (assert) {\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleChange = function () {\n      assert.ok(false, 'The handle change should not be called');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'handleChange', ['loc', [null, [2, 66], [2, 78]]]]], [], ['loc', [null, [2, 58], [2, 79]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Pressing TAB closes the select WITHOUT selecting the highlighed element and focuses the trigger', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 9);\n    assert.equal($('.ember-power-select-trigger').text().trim(), '', 'The highlighted element wasn\\'t selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigges is focused');\n  });\n\n  (0, _emberQunit.test)('The component is focusable using the TAB key as any other kind of input', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.equal(this.$('.ember-power-select-trigger').attr('tabindex'), \"0\", 'The trigger is reachable with TAB');\n  });\n\n  (0, _emberQunit.test)('If the component is focused, pressing ENTER opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return $('.ember-power-select-trigger').focus();\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n  });\n\n  (0, _emberQunit.test)('If the single component is focused, pressing KEYDOWN opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return $('.ember-power-select-trigger').focus();\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n  });\n\n  (0, _emberQunit.test)('If the single component is focused, pressing KEYUP opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return $('.ember-power-select-trigger').focus();\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 38);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n  });\n\n  (0, _emberQunit.test)('Pressing ESC while the component is opened closes it and focuses the trigger', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 27);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The select is focused');\n  });\n\n  (0, _emberQunit.test)('In single-mode, when the user presses a key being the search input focused the passes `onkeydown` action is invoked with the public API and the event', function (assert) {\n    assert.expect(9);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = null;\n    this.handleKeydown = function (select, e) {\n      assert.ok(select.hasOwnProperty('isOpen'), 'The yieded object has the `isOpen` key');\n      assert.ok(select.actions.open, 'The yieded object has an `actions.open` key');\n      assert.ok(select.actions.close, 'The yieded object has an `actions.close` key');\n      assert.ok(select.actions.select, 'The yieded object has an `actions.select` key');\n      assert.ok(select.actions.highlight, 'The yieded object has an `actions.highlight` key');\n      assert.ok(select.actions.search, 'The yieded object has an `actions.search` key');\n      assert.equal(e.keyCode, 13, 'The event is received as second argument');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 100], [2, 113]]]]], [], ['loc', [null, [2, 92], [2, 114]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n  });\n\n  (0, _emberQunit.test)('in single-mode if the users calls preventDefault on the event received in the `onkeydown` action it prevents the component to do the usual thing', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = null;\n    this.handleKeydown = function (select, e) {\n      e.preventDefault();\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 76], [2, 79]]]]], [], ['loc', [null, [2, 71], [2, 80]]]]], [], ['loc', [null, [2, 63], [2, 81]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 100], [2, 113]]]]], [], ['loc', [null, [2, 92], [2, 114]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');\n  });\n\n  (0, _emberQunit.test)('In multiple-mode, when the user presses a key being the search input focused the passes `onkeydown` action is invoked with the public API and the event', function (assert) {\n    assert.expect(9);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = [];\n    this.handleKeydown = function (select, e) {\n      assert.ok(select.hasOwnProperty('isOpen'), 'The yieded object has the `isOpen` key');\n      assert.ok(select.actions.open, 'The yieded object has an `actions.open` key');\n      assert.ok(select.actions.close, 'The yieded object has an `actions.close` key');\n      assert.ok(select.actions.select, 'The yieded object has an `actions.select` key');\n      assert.ok(select.actions.highlight, 'The yieded object has an `actions.highlight` key');\n      assert.ok(select.actions.search, 'The yieded object has an `actions.search` key');\n      assert.equal(e.keyCode, 13, 'The event is received as second argument');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 116], [2, 129]]]]], [], ['loc', [null, [2, 108], [2, 130]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n  });\n\n  (0, _emberQunit.test)('in multiple-mode if the users calls preventDefault on the event received in the `onkeydown` action it prevents the component to do the usual thing', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = [];\n    this.handleKeydown = function (select, e) {\n      e.preventDefault();\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 92], [2, 95]]]]], [], ['loc', [null, [2, 87], [2, 96]]]]], [], ['loc', [null, [2, 79], [2, 97]]]], 'onkeydown', ['subexpr', 'action', [['get', 'handleKeydown', ['loc', [null, [2, 116], [2, 129]]]]], [], ['loc', [null, [2, 108], [2, 130]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');\n  });\n\n  (0, _emberQunit.test)('Typing on a closed single select selects the value that matches the string typed so far', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    trigger.focus();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    assert.equal(trigger.textContent.trim(), 'nine', '\"nine\" has been selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');\n  });\n\n  //\n  // I'm actually not sure what multiple selects closed should do when typing on them.\n  // For now they just do nothing\n  //\n  // test('Typing on a closed multiple select with no searchbox does nothing', function(assert) {\n  // });\n\n  (0, _emberQunit.test)('Typing on a opened single select highlights the value that matches the string typed so far, scrolling if needed', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');\n    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'nine', 'The option containing \"nine\" has been highlighted');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');\n  });\n\n  (0, _emberQunit.test)('Typing on a opened multiple select highlights the value that matches the string typed so far, scrolling if needed', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');\n    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'nine', 'The option containing \"nine\" has been highlighted');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');\n  });\n\n  (0, _emberQunit.test)('The typed string gets reset after 1s idle', function (assert) {\n    var done = assert.async();\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    trigger.focus();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 84); // t\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 87); // w\n    assert.equal(trigger.textContent.trim(), 'two', '\"two\" has been selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');\n    setTimeout(function () {\n      (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o\n      assert.equal(trigger.textContent.trim(), 'one', '\"one\" has been selected, instead of \"two\", because the typing started over');\n      assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is still closed');\n      done();\n    }, 1100);\n  });\n\n  (0, _emberQunit.test)('Type something that doesn\\'t give you any result leaves the current selection', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 76], [2, 84]]]]], [], ['loc', [null, [2, 71], [2, 85]]]]], [], ['loc', [null, [2, 63], [2, 86]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    trigger.focus();\n    assert.equal(trigger.textContent.trim(), '', 'nothing is selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 73); // i\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 78); // n\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 69); // e\n    assert.equal(trigger.textContent.trim(), 'nine', 'nine has been selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 87); // w\n    assert.equal(trigger.textContent.trim(), 'nine', 'nine is still selected because \"ninew\" gave no results');\n  });\n\n  (0, _emberQunit.test)('Typing on a opened single select highlights the value that matches the string, also when the options are complex, using the `searchField` for that', function (assert) {\n    assert.expect(4);\n\n    this.countries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'country.name', ['loc', [null, [3, 6], [3, 22]]]]],\n          locals: ['country'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'countries', ['loc', [null, [2, 28], [2, 37]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 47], [2, 55]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 78], [2, 86]]]]], [], ['loc', [null, [2, 73], [2, 87]]]]], [], ['loc', [null, [2, 65], [2, 88]]]], 'searchField', 'name'], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is open');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 80); // p\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 79); // o\n    assert.equal(trigger.textContent.trim(), '', 'nothing has been selected');\n    assert.equal($('.ember-power-select-option[aria-current=true]').text().trim(), 'Portugal', 'The option containing \"Portugal\" has been highlighted');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropdown is still closed');\n  });\n});","define('dummy/tests/integration/components/power-select/keyboard-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/keyboard-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/keyboard-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/mouse-control-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Mouse control)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Mouseovering a list item highlights it', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:eq(0)').attr('aria-current'), 'true', 'The first element is highlighted');\n    _ember['default'].run(function () {\n      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });\n      $('.ember-power-select-option:eq(3)')[0].dispatchEvent(event);\n    });\n    assert.equal($('.ember-power-select-option:eq(3)').attr('aria-current'), 'true', 'The 4th element is highlighted');\n    assert.equal($('.ember-power-select-option:eq(3)').text().trim(), 'four');\n  });\n\n  (0, _emberQunit.test)('Clicking an item selects it, closes the dropdown and focuses the trigger', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.foo = function (val, dropdown) {\n      assert.equal(val, 'four', 'The action is invoked with the selected value as first parameter');\n      assert.ok(dropdown.actions.close, 'The action is invoked with the the dropdown object as second parameter');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(3)');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select was closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Clicking the trigger while the select is opened closes it and and focuses the trigger', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Doing mousedown the clear button removes the selection but does not open the select', function (assert) {\n    var _this = this;\n\n    assert.expect(6);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.onChange = function (selected, dropdown) {\n      assert.equal(selected, null, 'The onchange action was called with the new selection (null)');\n      assert.ok(dropdown.actions.close, 'The onchange action was called with the dropdown object as second argument');\n      _this.set('selected', selected);\n    };\n    this.selected = \"three\";\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 45], [2, 53]]]]], [], []], 'allowClear', true, 'onchange', ['subexpr', '@mut', [['get', 'onChange', ['loc', [null, [2, 79], [2, 87]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    assert.ok(/three/.test($('.ember-power-select-trigger').text().trim()), 'A element is selected');\n    _ember['default'].run(function () {\n      var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n      $('.ember-power-select-clear-btn')[0].dispatchEvent(event);\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is still closed');\n    assert.ok(!/three/.test($('.ember-power-select-trigger').text().trim()), 'That element is not selected now');\n  });\n\n  (0, _emberQunit.test)('Clicking anywhere outside the select while opened closes the component and doesn\\'t focuses the trigger', function (assert) {\n    var _this2 = this;\n\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [4, 6], [4, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'other-thing');\n          var el2 = dom.createTextNode('Foo');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [3, 28], [3, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [3, 58], [3, 61]]]]], [], ['loc', [null, [3, 53], [3, 62]]]]], [], ['loc', [null, [3, 45], [3, 63]]]]], 0, null, ['loc', [null, [3, 4], [5, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    _ember['default'].run(function () {\n      var event = new window.Event('mousedown');\n      _this2.$('#other-thing')[0].dispatchEvent(event);\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    assert.ok($('.ember-power-select-trigger').get(0) !== document.activeElement, 'The select is not focused');\n  });\n\n  (0, _emberQunit.test)('Doing mouseup over an option less than 2px in the Y axis of where the mousedown that opened the component was triggered doesn\\'t select the option', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)(null, { clientY: 123 });\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n    _ember['default'].run(function () {\n      var event = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });\n      event.clientY = 124;\n      _ember['default'].run(function () {\n        return _ember['default'].$('.ember-power-select-option:eq(1)')[0].dispatchEvent(event);\n      });\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is still opened');\n    _ember['default'].run(function () {\n      var event = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });\n      event.clientY = 125;\n      _ember['default'].run(function () {\n        return _ember['default'].$('.ember-power-select-option:eq(1)')[0].dispatchEvent(event);\n      });\n    });\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed now');\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'two', 'The element has been selected');\n  });\n\n  (0, _emberQunit.test)('Clicking on a wrapped option should select it', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n\n    this.foo = function (val) {\n      assert.equal(val, 'four', 'The expected value was selected');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('span');\n            dom.setAttribute(el1, 'class', 'special-class');\n            var el2 = dom.createComment('');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.special-class:eq(3)');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select was closed');\n    assert.ok($('.ember-power-select-trigger').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Mouse-overing on a wrapped option should select it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('span');\n            dom.setAttribute(el1, 'class', 'special-class');\n            var el2 = dom.createComment('');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The first element is highlighted');\n    _ember['default'].run(function () {\n      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });\n      $('.special-class:eq(3)')[0].dispatchEvent(event);\n    });\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'four', 'The fourth element is highlighted');\n  });\n\n  (0, _emberQunit.test)('Mouse-overing the list itself doesn\\'t crashes the app', function (assert) {\n    assert.expect(0); // NOTE: The fact that this tests runs without errors is the prove that it works\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('span');\n            dom.setAttribute(el1, 'class', 'special-class');\n            var el2 = dom.createComment('');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 34], [3, 44]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      var event = new window.Event('mouseover', { bubbles: true, cancelable: true, view: window });\n      $('ul')[0].dispatchEvent(event);\n    });\n  });\n});","define('dummy/tests/integration/components/power-select/mouse-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/mouse-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/mouse-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/multiple-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n  var RSVP = _ember['default'].RSVP;\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Multiple)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Multiple selects don\\'t have a search box', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-search').length, 0, 'There is no search box');\n  });\n\n  (0, _emberQunit.test)('When the select opens, the search input in the trigger gets the focus', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The search input is focused');\n  });\n\n  (0, _emberQunit.test)('Click on an element selects it and closes the dropdown and focuses the trigger\\'s input', function (assert) {\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(this.$('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The input of the trigger is focused');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');\n    assert.ok(/two/.test($('.ember-power-select-multiple-option').text()), 'The clicked element has been selected');\n    assert.ok(this.$('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The input of the trigger is focused again');\n  });\n\n  (0, _emberQunit.test)('Selecting an element triggers the onchange action with the list of selected options', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.change = function (values) {\n      assert.deepEqual(values, ['two'], 'The onchange action is fired with the list of values');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 54], [2, 60]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n  });\n\n  (0, _emberQunit.test)('Click an option when there is already another selects both, and triggers the onchange action with them', function (assert) {\n    var _this = this;\n\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = ['four'];\n    this.change = function (values) {\n      assert.deepEqual(values, ['four', 'two'], 'The onchange action is fired with the list of values');\n      _this.set('selectedNumbers', values);\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 79], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal($('.ember-power-select-multiple-option').length, 2, 'There is 2 options selected');\n    assert.ok(/four/.test($('.ember-power-select-multiple-option:eq(0)').text()), 'The first option is the provided one');\n    assert.ok(/two/.test($('.ember-power-select-multiple-option:eq(1)').text()), 'The second option is the one just selected');\n  });\n\n  (0, _emberQunit.test)('If there is many selections, all those options are styled as `selected`', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = ['four', 'two'];\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selectedNumbers', ['loc', [null, [2, 92], [2, 107]]]]], [], ['loc', [null, [2, 87], [2, 108]]]]], [], ['loc', [null, [2, 79], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option:eq(1)').attr('aria-selected'), 'true', 'The second option is styled as selected');\n    assert.equal($('.ember-power-select-option:eq(3)').attr('aria-selected'), 'true', 'The 4th option is styled as selected');\n  });\n\n  (0, _emberQunit.test)('When the popup opens, the first items is highlighed, even if there is only one selection', function (assert) {\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = ['four'];\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selectedNumbers', ['loc', [null, [2, 92], [2, 107]]]]], [], ['loc', [null, [2, 87], [2, 108]]]]], [], ['loc', [null, [2, 79], [2, 109]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').length, 1, 'There is one element highlighted');\n    assert.equal($('.ember-power-select-option[aria-selected=\"true\"]').length, 1, 'There is one element selected');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"][aria-selected=\"true\"]').length, 0, 'They are not the same');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'one', 'The highlighted element is the first one');\n  });\n\n  (0, _emberQunit.test)('Clicking on an option that is already selected unselects it, closes the select and triggers the `onchange` action', function (assert) {\n    var _this2 = this;\n\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selectedNumbers = ['four'];\n    this.change = function (selected) {\n      assert.ok(_ember['default'].isEmpty(selected), 'No elements are selected');\n      _this2.set('selectedNumbers', selected);\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selectedNumbers', ['loc', [null, [2, 54], [2, 69]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 79], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-multiple-option').length, 1, 'There is 1 option selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option[aria-selected=\"true\"]');\n    assert.equal($('.ember-power-select-multiple-option').length, 0, 'There is no options selected');\n  });\n\n  (0, _emberQunit.test)('The default filtering works in multiple mode', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('four');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only two items matched the criteria');\n  });\n\n  (0, _emberQunit.test)('The filtering specifying a searchkey works in multiple model', function (assert) {\n    assert.expect(8);\n\n    this.people = [{ name: 'María', surname: 'Murray' }, { name: 'Søren', surname: 'Williams' }, { name: 'João', surname: 'Jin' }, { name: 'Miguel', surname: 'Camba' }, { name: 'Marta', surname: 'Stinson' }, { name: 'Lisa', surname: 'Simpson' }];\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(' ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'person.name', ['loc', [null, [3, 6], [3, 21]]]], ['content', 'person.surname', ['loc', [null, [3, 22], [3, 40]]]]],\n          locals: ['person'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'people', ['loc', [null, [2, 37], [2, 43]]]]], [], []], 'searchField', 'name', 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 85], [2, 88]]]]], [], ['loc', [null, [2, 80], [2, 89]]]]], [], ['loc', [null, [2, 72], [2, 90]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mar');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'María Murray');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'Marta Stinson');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('mari');\n    assert.equal($('.ember-power-select-option').length, 1, 'Only 1 results match the search');\n    assert.equal($('.ember-power-select-option').text().trim(), 'María Murray');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('o');\n    assert.equal($('.ember-power-select-option').length, 2, 'Only 2 results match the search');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'Søren Williams');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'João Jin');\n  });\n\n  (0, _emberQunit.test)('The filtering specifying a custom matcher works in multiple model', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.endsWithMatcher = function (value, text) {\n      return value.slice(text.length * -1) === text ? 0 : -1;\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'matcher', ['subexpr', '@mut', [['get', 'endsWithMatcher', ['loc', [null, [2, 53], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('on');\n    assert.equal($('.ember-power-select-option').text().trim(), \"No results found\", 'No number ends in \"on\"');\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('teen');\n    assert.equal($('.ember-power-select-option').length, 7, 'There is 7 number that end in \"teen\"');\n  });\n\n  (0, _emberQunit.test)('The search using a custom action works int multiple mode', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    this.searchFn = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['search', ['subexpr', '@mut', [['get', 'searchFn', ['loc', [null, [2, 36], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)(\"teen\");\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, 7);\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER when the select is closed opens and nothing is written on the box opens it', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The trigger is focused');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER on a multiple select with `searchEnabled=false` when it is closed opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    trigger.focus();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER over a highlighted element selects it', function (assert) {\n    var _this3 = this;\n\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.change = function (selected) {\n      assert.deepEqual(selected, ['two']);\n      _this3.set('foo', selected);\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 67], [2, 73]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element was selected');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER over a highlighted element on a multiple select with `searchEnabled=false` selects it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is rendered');\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);\n    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element was selected');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER over a highlighted element on a select with `searchEnabled=false` selects it', function (assert) {\n    var _this4 = this;\n\n    assert.expect(4);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.change = function (selected) {\n      assert.deepEqual(selected, ['two']);\n      _this4.set('foo', selected);\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['searchEnabled', false, 'options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 57], [2, 64]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 74], [2, 77]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'change', ['loc', [null, [2, 87], [2, 93]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');\n    var trigger = this.$('.ember-power-select-trigger')[0];\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(trigger, 13);\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');\n    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element is \"two\"');\n  });\n\n  (0, _emberQunit.test)('Pressing ENTER over a highlighted element what is already selected closes the select without doing anything and focuses the trigger', function (assert) {\n    var _this5 = this;\n\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = ['two'];\n    this.didChange = function (val) {\n      assert.ok(false, 'This should never be invoked');\n      _this5.set('selected', val);\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.ok(/two/.test($('.ember-power-select-trigger').text().trim()), 'The element is still selected');\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is not rendered');\n    assert.ok($('.ember-power-select-trigger-multiple-input').get(0) === document.activeElement, 'The trigger is focused');\n  });\n\n  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when there is text on it does nothing special', function (assert) {\n    var _this6 = this;\n\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = ['two'];\n    this.didChange = function (val) {\n      assert.ok(false, 'This should not be called');\n      _this6.set('selected', val);\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('four');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');\n  });\n\n  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\\'s empty removes the last selection and performs a search for that text immediatly, opening the select if closed', function (assert) {\n    var _this7 = this;\n\n    assert.expect(9);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = ['two'];\n    this.didChange = function (val, dropdown) {\n      assert.deepEqual(val, [], 'The selected item was unselected');\n      _this7.set('selected', val);\n      assert.ok(dropdown.actions.close, 'The dropdown API is received as second argument');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 54], [2, 63]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 73], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    var input = this.$('.ember-power-select-trigger-multiple-input')[0];\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(input, 8);\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'two', 'The text of the seach input is two now');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown has been opened');\n    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');\n    assert.equal(input.selectionStart, 3);\n    assert.equal(input.selectionEnd, 3);\n  });\n\n  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\\'s empty removes the last selection and performs a search for that text immediatly (when options are not strings)', function (assert) {\n    var _this8 = this;\n\n    assert.expect(7);\n\n    this.contries = _dummyTestsIntegrationComponentsConstants.countries;\n    this.country = [_dummyTestsIntegrationComponentsConstants.countries[2], _dummyTestsIntegrationComponentsConstants.countries[4]];\n    this.didChange = function (val, dropdown) {\n      assert.deepEqual(val, [_dummyTestsIntegrationComponentsConstants.countries[2]], 'The selected item was unselected');\n      _this8.set('country', val);\n      assert.ok(dropdown.actions.close, 'The dropdown API is received as second argument');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'c.name', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['c'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'contries', ['loc', [null, [2, 37], [2, 45]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'country', ['loc', [null, [2, 55], [2, 62]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'didChange', ['loc', [null, [2, 72], [2, 81]]]]], [], []], 'searchField', 'name'], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 2, 'There is two elements selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'Latvia', 'The text of the seach input is two \"Latvia\"');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');\n    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');\n  });\n\n  (0, _emberQunit.test)('Pressing BACKSPACE on the search input when it\\'s empty removes the last selection ALSO when that option didn\\'t come from the outside', function (assert) {\n    assert.expect(5);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(2)');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'There is one element selected');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 8);\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'There is no elements selected');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'three', 'The text of the seach input is three now');\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The dropown is still opened');\n    assert.equal($('.ember-power-select-option').length, 1, 'The list has been filtered');\n  });\n\n  (0, _emberQunit.test)('If the multiple component is focused, pressing KEYDOWN opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 40);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n  });\n\n  (0, _emberQunit.test)('If the multiple component is focused, pressing KEYUP opens it', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 27);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The select is closed');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 38);\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'The select is opened');\n  });\n\n  (0, _emberQunit.test)('The placeholder is only visible when no options are selected', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'placeholder', 'Select stuff here'], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), 'Select stuff here', 'There is a placeholder');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'The placeholder is gone');\n  });\n\n  (0, _emberQunit.test)('If the placeholder is null the placeholders shouldn\\'t be \"null\" (issue #94)', function (assert) {\n    assert.expect(3);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input does not have a placeholder');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');\n  });\n\n  (0, _emberQunit.test)('Selecting and removing should result in desired behavior', function (assert) {\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'Should add selected option');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseDown)('.ember-power-select-multiple-remove-btn');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'Should remove selected option');\n  });\n\n  (0, _emberQunit.test)('Selecting and removing can also be done with touch events', function (assert) {\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(1)');\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 1, 'Should add selected option');\n    _ember['default'].run(function () {\n      var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n      _ember['default'].$('.ember-power-select-multiple-remove-btn')[0].dispatchEvent(event);\n    });\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').attr('placeholder'), '', 'Input still does not have a placeholder');\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 0, 'Should remove selected option');\n  });\n\n  (0, _emberQunit.test)('Typing in the input opens the component and filters the options', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('fo');\n    assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results filtered');\n  });\n\n  (0, _emberQunit.test)('Typing in the input opens the component and filters the options also with async searches', function (assert) {\n    assert.expect(1);\n\n    this.search = function (term) {\n      return new RSVP.Promise(function (resolve) {\n        _ember['default'].run.later(function () {\n          resolve(_dummyTestsIntegrationComponentsConstants.numbers.filter(function (str) {\n            return str.indexOf(term) > -1;\n          }));\n        }, 100);\n      });\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 38], [2, 41]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 64], [2, 67]]]]], [], ['loc', [null, [2, 59], [2, 68]]]]], [], ['loc', [null, [2, 51], [2, 69]]]], 'search', ['subexpr', 'action', [['get', 'search', ['loc', [null, [2, 85], [2, 91]]]]], [], ['loc', [null, [2, 77], [2, 92]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('fo');\n    var done = assert.async();\n\n    setTimeout(function () {\n      assert.equal($('.ember-power-select-option').length, 2, 'The dropdown is opened and results filtered');\n      done();\n    }, 150);\n  });\n\n  (0, _emberQunit.test)('The search term is yielded as second argument in multiple selects', function (assert) {\n    assert.expect(2);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(':');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'term', ['loc', [null, [3, 6], [3, 14]]]], ['content', 'option', ['loc', [null, [3, 15], [3, 25]]]]],\n          locals: ['option', 'term'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'tw:two');\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('thr');\n    assert.ok(/thr:two/.test($('.ember-power-select-trigger').text().trim()), 'The trigger also receives the search term');\n  });\n\n  (0, _emberQunit.test)('The search input is cleared when the component is closed', function (assert) {\n    var _this9 = this;\n\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type', 'multiple-nodes']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'other-thing');\n          var el2 = dom.createTextNode('Other div');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), 'asjdnah');\n    _ember['default'].run(function () {\n      var event = new window.Event('mousedown');\n      _this9.$('#other-thing')[0].dispatchEvent(event);\n    });\n    assert.equal(this.$('.ember-power-select-trigger-multiple-input').val(), '');\n  });\n\n  (0, _emberQunit.test)('When hitting ENTER after a search with no results, the component is closed but the onchange function is not invoked', function (assert) {\n    assert.expect(3);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleChange = function () {\n      assert.ok(false, 'The handle change should not be called');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['get', 'handleChange', ['loc', [null, [2, 75], [2, 87]]]]], [], ['loc', [null, [2, 67], [2, 88]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('asjdnah');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'No results found');\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)(this.$('.ember-power-select-trigger-multiple-input')[0], 13);\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'The dropdown is closed');\n    assert.ok(this.$('.ember-power-select-trigger-multiple-input')[0] === document.activeElement, 'The input is focused');\n  });\n\n  (0, _emberQunit.test)('The trigger of multiple selects have a special class to distinguish them from regular ones, even if you pass them another one', function (assert) {\n    assert.expect(2);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'triggerClass', 'foobar-trigger', 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 84], [2, 87]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 110], [2, 113]]]]], [], ['loc', [null, [2, 105], [2, 114]]]]], [], ['loc', [null, [2, 97], [2, 115]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(this.$('.ember-power-select-trigger').hasClass('ember-power-select-multiple-trigger'), 'The trigger has the default class');\n    assert.ok(this.$('.ember-power-select-trigger').hasClass('foobar-trigger'), 'The trigger has the given class');\n  });\n\n  (0, _emberQunit.test)('The component works when the array of selected elements is mutated in place instead of replaced', function (assert) {\n    var _this10 = this;\n\n    assert.expect(1);\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.selected = _ember['default'].A();\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'selected', ['loc', [null, [2, 54], [2, 62]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'selected', ['loc', [null, [2, 85], [2, 93]]]]], [], ['loc', [null, [2, 80], [2, 94]]]]], [], ['loc', [null, [2, 72], [2, 95]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    _ember['default'].run(function () {\n      return _this10.get('selected').pushObject(_dummyTestsIntegrationComponentsConstants.numbers[3]);\n    });\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');\n    assert.equal(this.$('.ember-power-select-multiple-option').length, 2, 'Two elements are selected');\n  });\n\n  (0, _emberQunit.test)('When the input inside the multiple select gets focused the entire component gains the `ember-basic-dropdown--focus-inside` class', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 67], [2, 70]]]]], [], ['loc', [null, [2, 62], [2, 71]]]]], [], ['loc', [null, [2, 54], [2, 72]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(!this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select doesn\\'t have the class yet');\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.ok(this.$('.ember-power-select').hasClass('ember-basic-dropdown--focus-inside'), 'The select has the class now');\n  });\n});","define('dummy/tests/integration/components/power-select/multiple-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/multiple-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/multiple-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/opened-property-test', ['exports', 'ember-qunit', 'dummy/tests/integration/components/constants'], function (exports, _emberQunit, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (The opened property)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('the select can be rendered already opened by passing `initiallyOpened=true`', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'initiallyOpened', true], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is opened');\n  });\n});","define('dummy/tests/integration/components/power-select/opened-property-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/opened-property-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/opened-property-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/power-select/public-actions-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/ember-power-select', 'dummy/tests/integration/components/constants'], function (exports, _ember, _emberQunit, _dummyTestsHelpersEmberPowerSelect, _dummyTestsIntegrationComponentsConstants) {\n\n  (0, _emberQunit.moduleForComponent)('ember-power-select', 'Integration | Component | Ember Power Select (Public actions)', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('The search action of single selects action receives the search term and the public API', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleSearch = function (term, select) {\n      assert.equal(term, 'el', 'The search term is received as 1st argument');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 71], [2, 74]]]]], [], ['loc', [null, [2, 66], [2, 75]]]]], [], ['loc', [null, [2, 58], [2, 76]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 84], [2, 96]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');\n  });\n\n  (0, _emberQunit.test)('The search action of multiple selects action receives the search term and the public API', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleSearch = function (term, select) {\n      assert.equal(term, 'el', 'The search term is received as 1st argument');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 93], [2, 105]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');\n  });\n\n  (0, _emberQunit.test)('The onchange of single selects action receives the selection and the public API', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleChange = function (selected, select) {\n      assert.equal(selected, 'one', 'The first option is the selected');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'handleChange', ['loc', [null, [2, 58], [2, 70]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');\n  });\n\n  (0, _emberQunit.test)('The onchange of multiple selects action receives the selection and the public API', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleChange = function (selected, select) {\n      assert.equal(selected, 'one', 'The first option is the selected');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', '@mut', [['get', 'handleChange', ['loc', [null, [2, 67], [2, 79]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.nativeMouseUp)('.ember-power-select-option:eq(0)');\n  });\n\n  (0, _emberQunit.test)('The onkeydown of single selects action receives the public API and the keydown event', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.onKeyDown = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 59], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-search input')[0], 13);\n  });\n\n  (0, _emberQunit.test)('The onkeydown can be used to easily allow to select on tab', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.onKeyDown = function (select, e) {\n      if (e.keyCode === 9) {\n        select.actions.select(select.highlighted);\n        select.actions.close();\n      }\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 59], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 40);\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger')[0], 9);\n    assert.equal(this.$('.ember-power-select-trigger').text().trim(), 'three', 'The highlighted options has been selected');\n    assert.equal($('.ember-power-select-options').length, 0, 'The select is closed');\n  });\n\n  (0, _emberQunit.test)('The onkeydown of multiple selects action receives the public API and the keydown event', function (assert) {\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.onKeyDown = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onkeydown', ['subexpr', '@mut', [['get', 'onKeyDown', ['loc', [null, [2, 68], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.triggerKeydown)($('.ember-power-select-trigger-multiple-input')[0], 13);\n  });\n\n  (0, _emberQunit.test)('The onfocus of single selects action receives the public API and the focus event', function (assert) {\n    var _this = this;\n\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleFocus = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onfocus', ['subexpr', '@mut', [['get', 'handleFocus', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return _this.$('.ember-power-select-trigger').focus();\n    });\n  });\n\n  (0, _emberQunit.test)('The onfocus of multiple selects action receives the public API and the focus event', function (assert) {\n    var _this2 = this;\n\n    assert.expect(10);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleFocus = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onfocus', ['subexpr', '@mut', [['get', 'handleFocus', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _ember['default'].run(function () {\n      return _this2.$('.ember-power-select-trigger').focus();\n    });\n  });\n\n  (0, _emberQunit.test)('the `onopen` action is invoked when the dropdown opens', function (assert) {\n    assert.expect(11);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleOpen = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 71], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 1, 'Dropdown is opened');\n  });\n\n  (0, _emberQunit.test)('the `onclose` action is invoked when the dropdown closes', function (assert) {\n    assert.expect(12);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleClose = function (select, e) {\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(typeof select.searchText, 'string', 'select.searchText is a string');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.equal(typeof select.actions.choose, 'function', 'select.actions.choose is a function');\n      assert.ok(e instanceof window.Event, 'The second argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onclose', ['subexpr', '@mut', [['get', 'handleClose', ['loc', [null, [2, 72], [2, 83]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-dropdown').length, 0, 'Dropdown is closed');\n  });\n\n  (0, _emberQunit.test)('the `oninput` action is invoked when the user modifies the text of the search input on single selects, and the search happens', function (assert) {\n    assert.expect(15);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleInput = function (value, select, e) {\n      assert.equal(value, 'tw', 'The first argument is the value of the input');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(select.searchText, '', 'select.searchText is still empty');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The third argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'two');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'twelve');\n    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'twenty');\n  });\n\n  (0, _emberQunit.test)('the `oninput` action is invoked when the user modifies the text of the search input on multiple selects, and the search happens', function (assert) {\n    assert.expect(15);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleInput = function (value, select, e) {\n      assert.equal(value, 'tw', 'The first argument is the value of the input');\n      assert.equal(typeof select.isOpen, 'boolean', 'select.isOpen is a boolean');\n      assert.equal(typeof select.highlighted, 'string', 'select.highlighted is a string');\n      assert.equal(select.searchText, '', 'select.searchText is still empty');\n      assert.equal(typeof select.actions.open, 'function', 'select.actions.open is a function');\n      assert.equal(typeof select.actions.close, 'function', 'select.actions.close is a function');\n      assert.equal(typeof select.actions.reposition, 'function', 'select.actions.reposition is a function');\n      assert.equal(typeof select.actions.search, 'function', 'select.actions.search is a function');\n      assert.equal(typeof select.actions.highlight, 'function', 'select.actions.highlight is a function');\n      assert.equal(typeof select.actions.select, 'function', 'select.actions.select is a function');\n      assert.ok(e instanceof window.Event, 'The third argument is an event');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'two');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'twelve');\n    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'twenty');\n  });\n\n  (0, _emberQunit.test)('if the `oninput` action of single selects returns false the search is cancelled', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleInput = function () /*value, select, e*/{\n      return false;\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 57], [2, 68]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 91], [2, 94]]]]], [], ['loc', [null, [2, 86], [2, 95]]]]], [], ['loc', [null, [2, 78], [2, 96]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option').length, 20, 'There is the same options than before');\n  });\n\n  (0, _emberQunit.test)('if `oninput` action of multiple selects returns false the search is cancelled', function (assert) {\n    assert.expect(1);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleInput = function () /*value, select, e*/{\n      return false;\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'oninput', ['subexpr', '@mut', [['get', 'handleInput', ['loc', [null, [2, 66], [2, 77]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 100], [2, 103]]]]], [], ['loc', [null, [2, 95], [2, 104]]]]], [], ['loc', [null, [2, 87], [2, 105]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('tw');\n    assert.equal($('.ember-power-select-option').length, 20, 'There is the same options than before');\n  });\n\n  (0, _emberQunit.test)('the `search` action of the public api passed to the public actions works as expected', function (assert) {\n    assert.expect(6);\n\n    this.handleSearch = function (term) {\n      assert.equal(term, 'abc', 'The search term receives `abc`');\n      return ['foo', 'bar', 'baz'];\n    };\n    this.handleOpen = function (select) {\n      select.actions.search('abc');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 42], [2, 45]]]]], [], ['loc', [null, [2, 37], [2, 46]]]]], [], ['loc', [null, [2, 29], [2, 47]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 55], [2, 65]]]]], [], []], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 73], [2, 85]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-search input')[0].value, 'abc');\n    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');\n    assert.equal($('.ember-power-select-option:eq(0)').text().trim(), 'foo');\n    assert.equal($('.ember-power-select-option:eq(1)').text().trim(), 'bar');\n    assert.equal($('.ember-power-select-option:eq(2)').text().trim(), 'baz');\n  });\n\n  (0, _emberQunit.test)('the `highlight` action of the public api passed to the public actions works as expected', function (assert) {\n    assert.expect(2);\n    this.options = ['foo', 'bar', 'baz'];\n    this.handleOpen = function (select) {\n      select.actions.highlight('baz');\n    };\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'option', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['option'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 58], [2, 61]]]]], [], ['loc', [null, [2, 53], [2, 62]]]]], [], ['loc', [null, [2, 45], [2, 63]]]], 'onopen', ['subexpr', '@mut', [['get', 'handleOpen', ['loc', [null, [2, 71], [2, 81]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-option').length, 3, 'There is three options');\n    assert.equal($('.ember-power-select-option[aria-current=\"true\"]').text().trim(), 'baz', 'The third option is highlighted');\n  });\n\n  (0, _emberQunit.test)('The programmer can use the received public API to perform searches in single selects', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.initSearch = function (select) {\n      assert.ok(true, 'The onopen action is fired');\n      select.actions.search('hello');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 28], [2, 35]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 45], [2, 48]]]]], [], []], 'onopen', ['subexpr', '@mut', [['get', 'initSearch', ['loc', [null, [2, 56], [2, 66]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 89], [2, 92]]]]], [], ['loc', [null, [2, 84], [2, 93]]]]], [], ['loc', [null, [2, 76], [2, 94]]]]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-search input')[0].value, 'hello', 'The search text contains the searched string');\n  });\n\n  (0, _emberQunit.test)('The programmer can use the received public API to perform searches in mutiple selects', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.initSearch = function (select) {\n      assert.ok(true, 'The onopen action is fired');\n      select.actions.search('hello');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onopen', ['subexpr', '@mut', [['get', 'initSearch', ['loc', [null, [2, 65], [2, 75]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 98], [2, 101]]]]], [], ['loc', [null, [2, 93], [2, 102]]]]], [], ['loc', [null, [2, 85], [2, 103]]]]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    assert.equal($('.ember-power-select-trigger-multiple-input')[0].value, 'hello', 'The search text contains the searched string');\n  });\n\n  (0, _emberQunit.test)('The search action of multiple selects has the searchText set to the up-to-date value', function (assert) {\n    assert.expect(2);\n\n    this.numbers = _dummyTestsIntegrationComponentsConstants.numbers;\n    this.handleSearch = function (term, select) {\n      assert.equal(term, 'el', 'The search term is received as 1st argument');\n      assert.equal(select.searchText, 'el', 'the public API object has the searchText up to date');\n    };\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'number', ['loc', [null, [3, 6], [3, 16]]]]],\n          locals: ['number'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'power-select-multiple', [], ['options', ['subexpr', '@mut', [['get', 'numbers', ['loc', [null, [2, 37], [2, 44]]]]], [], []], 'selected', ['subexpr', '@mut', [['get', 'foo', ['loc', [null, [2, 54], [2, 57]]]]], [], []], 'onchange', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'foo', ['loc', [null, [2, 80], [2, 83]]]]], [], ['loc', [null, [2, 75], [2, 84]]]]], [], ['loc', [null, [2, 67], [2, 85]]]], 'search', ['subexpr', '@mut', [['get', 'handleSearch', ['loc', [null, [2, 93], [2, 105]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    (0, _dummyTestsHelpersEmberPowerSelect.clickTrigger)();\n    (0, _dummyTestsHelpersEmberPowerSelect.typeInSearch)('el');\n  });\n});","define('dummy/tests/integration/components/power-select/public-actions-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/power-select/public-actions-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/power-select/public-actions-test.js should pass jshint.');\n  });\n});","define('dummy/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/legacy-demo.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/legacy-demo.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/legacy-demo.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/group-utils-test', ['exports', 'ember-power-select/utils/group-utils', 'qunit'], function (exports, _emberPowerSelectUtilsGroupUtils, _qunit) {\n\n  var groupedOptions = [{ groupName: \"Smalls\", options: [\"zero\", \"one\", \"two\", \"three\"] }, { groupName: \"Mediums\", options: [\"four\", \"five\", \"six\"] }, { groupName: \"Bigs\", options: [{ groupName: \"Fairly big\", options: [\"seven\", \"eight\", \"nine\"] }, { groupName: \"Really big\", options: [\"ten\", \"eleven\", \"twelve\"] }, \"thirteen\"]\n  }, \"one hundred\", \"one thousand\"];\n  var basicOptions = ['zero', 'one', 'two', 'three', 'four', 'five'];\n\n  (0, _qunit.module)('Unit | Utility | Group utils');\n\n  (0, _qunit.test)('#isGroup returns true when the given options has `groupName` and `options`', function (assert) {\n    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({}));\n    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ id: 1, text: 'hello' }));\n    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ groupName: 1, noOptions: 'hello' }));\n    assert.ok(!(0, _emberPowerSelectUtilsGroupUtils.isGroup)({ other: 1, options: ['a', 'b'] }));\n    assert.ok((0, _emberPowerSelectUtilsGroupUtils.isGroup)({ groupName: 1, options: ['a', 'b'] }));\n  });\n\n  (0, _qunit.test)('#indexOfOption returns the index of an option among all', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'zero'), 0);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'five'), 5);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, 'six'), -1);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(basicOptions, null), -1);\n  });\n\n  (0, _qunit.test)('#indexOfOption also works transversing groups', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'zero'), 0);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'six'), 6);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'seven'), 7);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'twelve'), 12);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'thirteen'), 13);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, 'one thousand'), 15);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.indexOfOption)(groupedOptions, null), -1);\n  });\n\n  (0, _qunit.test)('#optionAtIndex returns the option in that index is present, null othewise', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 0), 'zero');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 5), 'five');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, 7), null);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(basicOptions, -1), null); // Should this return the last??\n  });\n\n  (0, _qunit.test)('#optionAtIndex knows how to transverse groups', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 0), 'zero');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 6), 'six');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 7), 'seven');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 12), 'twelve');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 13), 'thirteen');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 15), 'one thousand');\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, 16), undefined);\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.optionAtIndex)(groupedOptions, -1), undefined);\n  });\n\n  (0, _qunit.test)('#filterOptions generates new options respecting groups when the matches returns a boolean', function (assert) {\n    var matcher = function matcher(value, searchText) {\n      return new RegExp(searchText, 'i').test(value) ? 0 : -1;\n    };\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'zero', matcher), [{ groupName: \"Smalls\", options: [\"zero\"] }]);\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'ele', matcher), [{ groupName: \"Bigs\", options: [{ groupName: \"Really big\", options: [\"eleven\"] }]\n    }]);\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 't', matcher), [{ groupName: \"Smalls\", options: [\"two\", \"three\"] }, { groupName: \"Bigs\", options: [{ groupName: \"Fairly big\", options: [\"eight\"] }, { groupName: \"Really big\", options: [\"ten\", \"twelve\"] }, \"thirteen\"]\n    }, \"one thousand\"]);\n\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'imposible', matcher), []);\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, '', matcher), groupedOptions);\n  });\n\n  (0, _qunit.test)('#filterOptions generates new options respecting groups when the matches returns a number, taking negative numbers as \"not found\" and positive as matches', function (assert) {\n    var matcher = function matcher(value, searchText) {\n      return value.indexOf(searchText);\n    };\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'zero', matcher), [{ groupName: \"Smalls\", options: [\"zero\"] }]);\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'ele', matcher), [{ groupName: \"Bigs\", options: [{ groupName: \"Really big\", options: [\"eleven\"] }]\n    }]);\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 't', matcher), [{ groupName: \"Smalls\", options: [\"two\", \"three\"] }, { groupName: \"Bigs\", options: [{ groupName: \"Fairly big\", options: [\"eight\"] }, { groupName: \"Really big\", options: [\"ten\", \"twelve\"] }, \"thirteen\"]\n    }, \"one thousand\"]);\n\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, 'imposible', matcher), [], 'when nothing matches, an empty array is returned');\n    assert.deepEqual((0, _emberPowerSelectUtilsGroupUtils.filterOptions)(groupedOptions, '', matcher), groupedOptions, 'when all matches, all options ');\n  });\n\n  (0, _qunit.test)('#stripDiacritics returns the given string with diacritics normalized into simple letters', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.stripDiacritics)(\"áãàéèíìóõøòúùñ\"), \"aaaeeiioooouun\");\n  });\n\n  (0, _qunit.test)('#stripDiacritics is able to handle integers', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.stripDiacritics)(1), \"1\");\n  });\n\n  (0, _qunit.test)('#countOptions returns the number of options, transversing the groups with no depth level', function (assert) {\n    assert.equal((0, _emberPowerSelectUtilsGroupUtils.countOptions)(groupedOptions), 16);\n  });\n});","define('dummy/tests/unit/utils/group-utils-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/group-utils-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/group-utils-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfx4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnlpprx3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChsKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjanylvklkzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}